

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Apr 11 17:16:53 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.40
    29                           ; Generated 17/11/2021 GMT
    30                           ; 
    31                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4620 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  00F8C8                     __pidataCOMRAM:
    66                           	callstack 0
    67                           
    68                           ;initializer for _direction
    69  00F8C8  0001               	dw	1
    70  0000                     _PORTBbits	set	3969
    71  0000                     _PORTB	set	3969
    72  0000                     _TRISA	set	3986
    73  0000                     _ADCON1	set	4033
    74  0000                     _TRISE	set	3990
    75  0000                     _TRISD	set	3989
    76  0000                     _TRISC	set	3988
    77  0000                     _TRISB	set	3987
    78  0000                     _PORTD	set	3971
    79                           
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83  00F8F6                     __pcinit:
    84                           	callstack 0
    85  00F8F6                     start_initialization:
    86                           	callstack 0
    87  00F8F6                     __initialization:
    88                           	callstack 0
    89                           
    90                           ; Initialize objects allocated to COMRAM (2 bytes)
    91                           ; load TBLPTR registers with __pidataCOMRAM
    92  00F8F6  0EC8               	movlw	low __pidataCOMRAM
    93  00F8F8  6EF6               	movwf	tblptrl,c
    94  00F8FA  0EF8               	movlw	high __pidataCOMRAM
    95  00F8FC  6EF7               	movwf	tblptrh,c
    96  00F8FE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    97  00F900  6EF8               	movwf	tblptru,c
    98  00F902  0009               	tblrd		*+	;fetch initializer
    99  00F904  CFF5 F018          	movff	tablat,__pdataCOMRAM
   100  00F908  0009               	tblrd		*+	;fetch initializer
   101  00F90A  CFF5 F019          	movff	tablat,__pdataCOMRAM+1
   102                           
   103                           ; Clear objects allocated to COMRAM (6 bytes)
   104  00F90E  6A17               	clrf	(__pbssCOMRAM+5)& (0+255),c
   105  00F910  6A16               	clrf	(__pbssCOMRAM+4)& (0+255),c
   106  00F912  6A15               	clrf	(__pbssCOMRAM+3)& (0+255),c
   107  00F914  6A14               	clrf	(__pbssCOMRAM+2)& (0+255),c
   108  00F916  6A13               	clrf	(__pbssCOMRAM+1)& (0+255),c
   109  00F918  6A12               	clrf	__pbssCOMRAM& (0+255),c
   110  00F91A                     end_of_initialization:
   111                           	callstack 0
   112  00F91A                     __end_of__initialization:
   113                           	callstack 0
   114  00F91A  0100               	movlb	0
   115  00F91C  EF77  F07E         	goto	_main	;jump to C main() function
   116                           
   117                           	psect	bssCOMRAM
   118  000012                     __pbssCOMRAM:
   119                           	callstack 0
   120  000012                     _added:
   121                           	callstack 0
   122  000012                     	ds	2
   123  000014                     _sum:
   124                           	callstack 0
   125  000014                     	ds	2
   126  000016                     _bcd:
   127                           	callstack 0
   128  000016                     	ds	1
   129  000017                     _grey:
   130                           	callstack 0
   131  000017                     	ds	1
   132                           
   133                           	psect	dataCOMRAM
   134  000018                     __pdataCOMRAM:
   135                           	callstack 0
   136  000018                     _direction:
   137                           	callstack 0
   138  000018                     	ds	2
   139                           
   140                           	psect	cstackCOMRAM
   141  000001                     __pcstackCOMRAM:
   142                           	callstack 0
   143  000001                     ?_setTask:
   144                           	callstack 0
   145  000001                     ?___awdiv:
   146                           	callstack 0
   147  000001                     ?___awmod:
   148                           	callstack 0
   149  000001                     bin_up@display:
   150                           	callstack 0
   151  000001                     bin_down@display:
   152                           	callstack 0
   153  000001                     grey_up@display:
   154                           	callstack 0
   155  000001                     grey_down@display:
   156                           	callstack 0
   157  000001                     snake@display:
   158                           	callstack 0
   159  000001                     delay@ms:
   160                           	callstack 0
   161  000001                     setTask@task:
   162                           	callstack 0
   163  000001                     setDisplay@task:
   164                           	callstack 0
   165  000001                     ___awdiv@dividend:
   166                           	callstack 0
   167  000001                     ___awmod@dividend:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  000001                     	ds	2
   172  000003                     delay@i:
   173                           	callstack 0
   174  000003                     setTask@change:
   175                           	callstack 0
   176  000003                     ___awdiv@divisor:
   177                           	callstack 0
   178  000003                     ___awmod@divisor:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x2
   182  000003                     	ds	2
   183  000005                     delay@j:
   184                           	callstack 0
   185  000005                     ___awdiv@counter:
   186                           	callstack 0
   187  000005                     ___awmod@counter:
   188                           	callstack 0
   189                           
   190                           ; 1 bytes @ 0x4
   191  000005                     	ds	1
   192  000006                     ___awdiv@sign:
   193                           	callstack 0
   194  000006                     ___awmod@sign:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x5
   198  000006                     	ds	1
   199  000007                     ___awdiv@quotient:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x6
   203  000007                     	ds	2
   204  000009                     ??_bcd_up:
   205  000009                     ??_bcd_down:
   206                           
   207                           ; 1 bytes @ 0x8
   208  000009                     	ds	2
   209  00000B                     bcd_up@display:
   210                           	callstack 0
   211  00000B                     bcd_down@display:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0xA
   215  00000B                     	ds	2
   216  00000D                     main@i:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0xC
   220  00000D                     	ds	2
   221  00000F                     main@display:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0xE
   225  00000F                     	ds	1
   226  000010                     main@task:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0xF
   230  000010                     	ds	2
   231                           
   232 ;;
   233 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   234 ;;
   235 ;; *************** function _main *****************
   236 ;; Defined at:
   237 ;;		line 168 in file "main.c"
   238 ;; Parameters:    Size  Location     Type
   239 ;;		None
   240 ;; Auto vars:     Size  Location     Type
   241 ;;  i               2   12[COMRAM] unsigned int 
   242 ;;  task            2   15[COMRAM] int 
   243 ;;  display         1   14[COMRAM] unsigned char 
   244 ;; Return value:  Size  Location     Type
   245 ;;                  1    wreg      void 
   246 ;; Registers used:
   247 ;;		wreg, status,2, status,0, cstack
   248 ;; Tracked objects:
   249 ;;		On entry : 0/0
   250 ;;		On exit  : 0/0
   251 ;;		Unchanged: 0/0
   252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   254 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   256 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   257 ;;Total ram usage:        5 bytes
   258 ;; Hardware stack levels required when called: 2
   259 ;; This function calls:
   260 ;;		_bcd_down
   261 ;;		_bcd_up
   262 ;;		_bin_down
   263 ;;		_bin_up
   264 ;;		_delay
   265 ;;		_grey_down
   266 ;;		_grey_up
   267 ;;		_setDisplay
   268 ;;		_setTask
   269 ;;		_snake
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text0
   276  00FCEE                     __ptext0:
   277                           	callstack 0
   278  00FCEE                     _main:
   279                           	callstack 29
   280  00FCEE                     
   281                           ;main.c: 169:     ADCON1=0x0F;
   282  00FCEE  0E0F               	movlw	15
   283  00FCF0  6EC1               	movwf	193,c	;volatile
   284                           
   285                           ;main.c: 171:     TRISA=0xC3;
   286  00FCF2  0EC3               	movlw	195
   287  00FCF4  6E92               	movwf	146,c	;volatile
   288                           
   289                           ;main.c: 172:     TRISB=0x3F;
   290  00FCF6  0E3F               	movlw	63
   291  00FCF8  6E93               	movwf	147,c	;volatile
   292                           
   293                           ;main.c: 173:     TRISC=0x01;
   294  00FCFA  0E01               	movlw	1
   295  00FCFC  6E94               	movwf	148,c	;volatile
   296                           
   297                           ;main.c: 174:     TRISD=0x00;
   298  00FCFE  0E00               	movlw	0
   299  00FD00  6E95               	movwf	149,c	;volatile
   300                           
   301                           ;main.c: 175:     TRISE=0x00;
   302  00FD02  0E00               	movlw	0
   303  00FD04  6E96               	movwf	150,c	;volatile
   304                           
   305                           ;main.c: 177:     PORTB = 0;
   306  00FD06  0E00               	movlw	0
   307  00FD08  6E81               	movwf	129,c	;volatile
   308                           
   309                           ;main.c: 179:     unsigned char display = 0;
   310  00FD0A  0E00               	movlw	0
   311  00FD0C  6E0F               	movwf	main@display^0,c
   312                           
   313                           ;main.c: 180:     int task = 1;
   314  00FD0E  0E00               	movlw	0
   315  00FD10  6E11               	movwf	(main@task+1)^0,c
   316  00FD12  0E01               	movlw	1
   317  00FD14  6E10               	movwf	main@task^0,c
   318  00FD16                     l1283:
   319                           
   320                           ;main.c: 183:         PORTD = display;
   321  00FD16  C00F  FF83         	movff	main@display,3971	;volatile
   322  00FD1A                     
   323                           ;main.c: 184:         delay(100);
   324  00FD1A  0E00               	movlw	0
   325  00FD1C  6E02               	movwf	(delay@ms+1)^0,c
   326  00FD1E  0E64               	movlw	100
   327  00FD20  6E01               	movwf	delay@ms^0,c
   328  00FD22  EC90  F07C         	call	_delay	;wreg free
   329  00FD26                     
   330                           ;main.c: 187:         unsigned int i = 6000;
   331  00FD26  0E17               	movlw	23
   332  00FD28  6E0E               	movwf	(main@i+1)^0,c
   333  00FD2A  0E70               	movlw	112
   334  00FD2C  6E0D               	movwf	main@i^0,c
   335                           
   336                           ;main.c: 188:         while (PORTBbits.RB4 && PORTBbits.RB3 && i > 0) {
   337  00FD2E  EF9C  F07E         	goto	l1291
   338  00FD32                     l1289:
   339                           
   340                           ;main.c: 189:             i--;
   341  00FD32  060D               	decf	main@i^0,f,c
   342  00FD34  A0D8               	btfss	status,0,c
   343  00FD36  060E               	decf	(main@i+1)^0,f,c
   344  00FD38                     l1291:
   345                           
   346                           ;main.c: 188:         while (PORTBbits.RB4 && PORTBbits.RB3 && i > 0) {
   347  00FD38  A881               	btfss	129,4,c	;volatile
   348  00FD3A  EFA1  F07E         	goto	u751
   349  00FD3E  EFA3  F07E         	goto	u750
   350  00FD42                     u751:
   351  00FD42  EFB3  F07E         	goto	l97
   352  00FD46                     u750:
   353  00FD46  A681               	btfss	129,3,c	;volatile
   354  00FD48  EFA8  F07E         	goto	u761
   355  00FD4C  EFAA  F07E         	goto	u760
   356  00FD50                     u761:
   357  00FD50  EFB3  F07E         	goto	l97
   358  00FD54                     u760:
   359  00FD54  500D               	movf	main@i^0,w,c
   360  00FD56  100E               	iorwf	(main@i+1)^0,w,c
   361  00FD58  A4D8               	btfss	status,2,c
   362  00FD5A  EFB1  F07E         	goto	u771
   363  00FD5E  EFB3  F07E         	goto	u770
   364  00FD62                     u771:
   365  00FD62  EF99  F07E         	goto	l1289
   366  00FD66                     u770:
   367  00FD66                     l97:
   368                           
   369                           ;main.c: 191:         if (PORTBbits.RB3 == 0) {
   370  00FD66  B681               	btfsc	129,3,c	;volatile
   371  00FD68  EFB8  F07E         	goto	u781
   372  00FD6C  EFBA  F07E         	goto	u780
   373  00FD70                     u781:
   374  00FD70  EF2C  F07F         	goto	l98
   375  00FD74                     u780:
   376  00FD74                     
   377                           ;main.c: 192:             task = setTask(task, 1);
   378  00FD74  C010  F001         	movff	main@task,setTask@task
   379  00FD78  C011  F002         	movff	main@task+1,setTask@task+1
   380  00FD7C  0E00               	movlw	0
   381  00FD7E  6E04               	movwf	(setTask@change+1)^0,c
   382  00FD80  0E01               	movlw	1
   383  00FD82  6E03               	movwf	setTask@change^0,c
   384  00FD84  ECB4  F07C         	call	_setTask	;wreg free
   385  00FD88  C001  F010         	movff	?_setTask,main@task
   386  00FD8C  C002  F011         	movff	?_setTask+1,main@task+1
   387                           
   388                           ;main.c: 193:             display = setDisplay(task);
   389  00FD90  C010  F001         	movff	main@task,setDisplay@task
   390  00FD94  C011  F002         	movff	main@task+1,setDisplay@task+1
   391  00FD98  EC46  F07D         	call	_setDisplay	;wreg free
   392  00FD9C  6E0F               	movwf	main@display^0,c
   393  00FD9E                     
   394                           ;main.c: 194:             if (task == 3) {
   395  00FD9E  0E03               	movlw	3
   396  00FDA0  1810               	xorwf	main@task^0,w,c
   397  00FDA2  1011               	iorwf	(main@task+1)^0,w,c
   398  00FDA4  A4D8               	btfss	status,2,c
   399  00FDA6  EFD7  F07E         	goto	u791
   400  00FDAA  EFD9  F07E         	goto	u790
   401  00FDAE                     u791:
   402  00FDAE  EFDD  F07E         	goto	l1303
   403  00FDB2                     u790:
   404  00FDB2                     l1301:
   405                           
   406                           ;main.c: 195:                 grey = 1;
   407  00FDB2  0E01               	movlw	1
   408  00FDB4  6E17               	movwf	_grey^0,c
   409                           
   410                           ;main.c: 196:             } else if (task == 4) {
   411  00FDB6  EF8F  F07F         	goto	l1349
   412  00FDBA                     l1303:
   413  00FDBA  0E04               	movlw	4
   414  00FDBC  1810               	xorwf	main@task^0,w,c
   415  00FDBE  1011               	iorwf	(main@task+1)^0,w,c
   416  00FDC0  A4D8               	btfss	status,2,c
   417  00FDC2  EFE5  F07E         	goto	u801
   418  00FDC6  EFE7  F07E         	goto	u800
   419  00FDCA                     u801:
   420  00FDCA  EFEA  F07E         	goto	l1307
   421  00FDCE                     u800:
   422  00FDCE                     l1305:
   423                           
   424                           ;main.c: 197:                 grey = 255;
   425  00FDCE  6817               	setf	_grey^0,c
   426                           
   427                           ;main.c: 198:             } else if (task == 5) {
   428  00FDD0  EF8F  F07F         	goto	l1349
   429  00FDD4                     l1307:
   430  00FDD4  0E05               	movlw	5
   431  00FDD6  1810               	xorwf	main@task^0,w,c
   432  00FDD8  1011               	iorwf	(main@task+1)^0,w,c
   433  00FDDA  A4D8               	btfss	status,2,c
   434  00FDDC  EFF2  F07E         	goto	u811
   435  00FDE0  EFF4  F07E         	goto	u810
   436  00FDE4                     u811:
   437  00FDE4  EFF8  F07E         	goto	l1311
   438  00FDE8                     u810:
   439  00FDE8                     l1309:
   440                           
   441                           ;main.c: 199:                 bcd = 0;
   442  00FDE8  0E00               	movlw	0
   443  00FDEA  6E16               	movwf	_bcd^0,c
   444                           
   445                           ;main.c: 200:             } else if (task == 6) {
   446  00FDEC  EF8F  F07F         	goto	l1349
   447  00FDF0                     l1311:
   448  00FDF0  0E06               	movlw	6
   449  00FDF2  1810               	xorwf	main@task^0,w,c
   450  00FDF4  1011               	iorwf	(main@task+1)^0,w,c
   451  00FDF6  A4D8               	btfss	status,2,c
   452  00FDF8  EF00  F07F         	goto	u821
   453  00FDFC  EF02  F07F         	goto	u820
   454  00FE00                     u821:
   455  00FE00  EF06  F07F         	goto	l1315
   456  00FE04                     u820:
   457  00FE04                     l1313:
   458                           
   459                           ;main.c: 201:                 bcd = 99;
   460  00FE04  0E63               	movlw	99
   461  00FE06  6E16               	movwf	_bcd^0,c
   462                           
   463                           ;main.c: 202:             } else if (task == 7) {
   464  00FE08  EF8F  F07F         	goto	l1349
   465  00FE0C                     l1315:
   466  00FE0C  0E07               	movlw	7
   467  00FE0E  1810               	xorwf	main@task^0,w,c
   468  00FE10  1011               	iorwf	(main@task+1)^0,w,c
   469  00FE12  A4D8               	btfss	status,2,c
   470  00FE14  EF0E  F07F         	goto	u831
   471  00FE18  EF10  F07F         	goto	u830
   472  00FE1C                     u831:
   473  00FE1C  EF16  F07F         	goto	l1319
   474  00FE20                     u830:
   475  00FE20                     l1317:
   476                           
   477                           ;main.c: 203:                 direction = 1;
   478  00FE20  0E00               	movlw	0
   479  00FE22  6E19               	movwf	(_direction+1)^0,c
   480  00FE24  0E01               	movlw	1
   481  00FE26  6E18               	movwf	_direction^0,c
   482                           
   483                           ;main.c: 204:             } else if (task == 8) {
   484  00FE28  EF8F  F07F         	goto	l1349
   485  00FE2C                     l1319:
   486  00FE2C  0E08               	movlw	8
   487  00FE2E  1810               	xorwf	main@task^0,w,c
   488  00FE30  1011               	iorwf	(main@task+1)^0,w,c
   489  00FE32  A4D8               	btfss	status,2,c
   490  00FE34  EF1E  F07F         	goto	u841
   491  00FE38  EF20  F07F         	goto	u840
   492  00FE3C                     u841:
   493  00FE3C  EF2A  F07F         	goto	l104
   494  00FE40                     u840:
   495  00FE40                     l1321:
   496                           
   497                           ;main.c: 205:                 sum = 0;
   498  00FE40  0E00               	movlw	0
   499  00FE42  6E15               	movwf	(_sum+1)^0,c
   500  00FE44  0E00               	movlw	0
   501  00FE46  6E14               	movwf	_sum^0,c
   502                           
   503                           ;main.c: 206:                 added = 0;
   504  00FE48  0E00               	movlw	0
   505  00FE4A  6E13               	movwf	(_added+1)^0,c
   506  00FE4C  0E00               	movlw	0
   507  00FE4E  6E12               	movwf	_added^0,c
   508  00FE50  EF8F  F07F         	goto	l1349
   509  00FE54                     l104:
   510  00FE54  EF8F  F07F         	goto	l1349
   511  00FE58                     l98:
   512  00FE58  B881               	btfsc	129,4,c	;volatile
   513  00FE5A  EF31  F07F         	goto	u851
   514  00FE5E  EF33  F07F         	goto	u850
   515  00FE62                     u851:
   516  00FE62  EF8F  F07F         	goto	l1349
   517  00FE66                     u850:
   518  00FE66                     
   519                           ;main.c: 209:             task = setTask(task, -1);
   520  00FE66  C010  F001         	movff	main@task,setTask@task
   521  00FE6A  C011  F002         	movff	main@task+1,setTask@task+1
   522  00FE6E  0EFF               	movlw	255
   523  00FE70  6E04               	movwf	(setTask@change+1)^0,c
   524  00FE72  6803               	setf	setTask@change^0,c
   525  00FE74  ECB4  F07C         	call	_setTask	;wreg free
   526  00FE78  C001  F010         	movff	?_setTask,main@task
   527  00FE7C  C002  F011         	movff	?_setTask+1,main@task+1
   528                           
   529                           ;main.c: 210:             display = setDisplay(task);
   530  00FE80  C010  F001         	movff	main@task,setDisplay@task
   531  00FE84  C011  F002         	movff	main@task+1,setDisplay@task+1
   532  00FE88  EC46  F07D         	call	_setDisplay	;wreg free
   533  00FE8C  6E0F               	movwf	main@display^0,c
   534  00FE8E                     
   535                           ;main.c: 211:             if (task == 3) {
   536  00FE8E  0E03               	movlw	3
   537  00FE90  1810               	xorwf	main@task^0,w,c
   538  00FE92  1011               	iorwf	(main@task+1)^0,w,c
   539  00FE94  A4D8               	btfss	status,2,c
   540  00FE96  EF4F  F07F         	goto	u861
   541  00FE9A  EF51  F07F         	goto	u860
   542  00FE9E                     u861:
   543  00FE9E  EF53  F07F         	goto	l1329
   544  00FEA2                     u860:
   545  00FEA2  EFD9  F07E         	goto	l1301
   546  00FEA6                     l1329:
   547  00FEA6  0E04               	movlw	4
   548  00FEA8  1810               	xorwf	main@task^0,w,c
   549  00FEAA  1011               	iorwf	(main@task+1)^0,w,c
   550  00FEAC  A4D8               	btfss	status,2,c
   551  00FEAE  EF5B  F07F         	goto	u871
   552  00FEB2  EF5D  F07F         	goto	u870
   553  00FEB6                     u871:
   554  00FEB6  EF5F  F07F         	goto	l1333
   555  00FEBA                     u870:
   556  00FEBA  EFE7  F07E         	goto	l1305
   557  00FEBE                     l1333:
   558  00FEBE  0E05               	movlw	5
   559  00FEC0  1810               	xorwf	main@task^0,w,c
   560  00FEC2  1011               	iorwf	(main@task+1)^0,w,c
   561  00FEC4  A4D8               	btfss	status,2,c
   562  00FEC6  EF67  F07F         	goto	u881
   563  00FECA  EF69  F07F         	goto	u880
   564  00FECE                     u881:
   565  00FECE  EF6B  F07F         	goto	l1337
   566  00FED2                     u880:
   567  00FED2  EFF4  F07E         	goto	l1309
   568  00FED6                     l1337:
   569  00FED6  0E06               	movlw	6
   570  00FED8  1810               	xorwf	main@task^0,w,c
   571  00FEDA  1011               	iorwf	(main@task+1)^0,w,c
   572  00FEDC  A4D8               	btfss	status,2,c
   573  00FEDE  EF73  F07F         	goto	u891
   574  00FEE2  EF75  F07F         	goto	u890
   575  00FEE6                     u891:
   576  00FEE6  EF77  F07F         	goto	l1341
   577  00FEEA                     u890:
   578  00FEEA  EF02  F07F         	goto	l1313
   579  00FEEE                     l1341:
   580  00FEEE  0E07               	movlw	7
   581  00FEF0  1810               	xorwf	main@task^0,w,c
   582  00FEF2  1011               	iorwf	(main@task+1)^0,w,c
   583  00FEF4  A4D8               	btfss	status,2,c
   584  00FEF6  EF7F  F07F         	goto	u901
   585  00FEFA  EF81  F07F         	goto	u900
   586  00FEFE                     u901:
   587  00FEFE  EF83  F07F         	goto	l1345
   588  00FF02                     u900:
   589  00FF02  EF10  F07F         	goto	l1317
   590  00FF06                     l1345:
   591  00FF06  0E08               	movlw	8
   592  00FF08  1810               	xorwf	main@task^0,w,c
   593  00FF0A  1011               	iorwf	(main@task+1)^0,w,c
   594  00FF0C  A4D8               	btfss	status,2,c
   595  00FF0E  EF8B  F07F         	goto	u911
   596  00FF12  EF8D  F07F         	goto	u910
   597  00FF16                     u911:
   598  00FF16  EF2A  F07F         	goto	l104
   599  00FF1A                     u910:
   600  00FF1A  EF20  F07F         	goto	l1321
   601  00FF1E                     l1349:
   602                           
   603                           ;main.c: 227:         if (task == 1) {
   604  00FF1E  0410               	decf	main@task^0,w,c
   605  00FF20  1011               	iorwf	(main@task+1)^0,w,c
   606  00FF22  A4D8               	btfss	status,2,c
   607  00FF24  EF96  F07F         	goto	u921
   608  00FF28  EF98  F07F         	goto	u920
   609  00FF2C                     u921:
   610  00FF2C  EF9E  F07F         	goto	l1353
   611  00FF30                     u920:
   612  00FF30                     
   613                           ;main.c: 228:             display = bin_up(display);
   614  00FF30  500F               	movf	main@display^0,w,c
   615  00FF32  EC68  F07C         	call	_bin_up
   616  00FF36  6E0F               	movwf	main@display^0,c
   617                           
   618                           ;main.c: 229:         } else if (task == 2) {
   619  00FF38  EF8B  F07E         	goto	l1283
   620  00FF3C                     l1353:
   621  00FF3C  0E02               	movlw	2
   622  00FF3E  1810               	xorwf	main@task^0,w,c
   623  00FF40  1011               	iorwf	(main@task+1)^0,w,c
   624  00FF42  A4D8               	btfss	status,2,c
   625  00FF44  EFA6  F07F         	goto	u931
   626  00FF48  EFA8  F07F         	goto	u930
   627  00FF4C                     u931:
   628  00FF4C  EFAE  F07F         	goto	l1357
   629  00FF50                     u930:
   630  00FF50                     
   631                           ;main.c: 230:             display = bin_down(display);
   632  00FF50  500F               	movf	main@display^0,w,c
   633  00FF52  EC65  F07C         	call	_bin_down
   634  00FF56  6E0F               	movwf	main@display^0,c
   635                           
   636                           ;main.c: 231:         } else if (task == 3) {
   637  00FF58  EF8B  F07E         	goto	l1283
   638  00FF5C                     l1357:
   639  00FF5C  0E03               	movlw	3
   640  00FF5E  1810               	xorwf	main@task^0,w,c
   641  00FF60  1011               	iorwf	(main@task+1)^0,w,c
   642  00FF62  A4D8               	btfss	status,2,c
   643  00FF64  EFB6  F07F         	goto	u941
   644  00FF68  EFB8  F07F         	goto	u940
   645  00FF6C                     u941:
   646  00FF6C  EFBE  F07F         	goto	l1361
   647  00FF70                     u940:
   648  00FF70                     
   649                           ;main.c: 232:             display = grey_up(display);
   650  00FF70  500F               	movf	main@display^0,w,c
   651  00FF72  EC73  F07C         	call	_grey_up
   652  00FF76  6E0F               	movwf	main@display^0,c
   653                           
   654                           ;main.c: 233:         } else if (task == 4) {
   655  00FF78  EF8B  F07E         	goto	l1283
   656  00FF7C                     l1361:
   657  00FF7C  0E04               	movlw	4
   658  00FF7E  1810               	xorwf	main@task^0,w,c
   659  00FF80  1011               	iorwf	(main@task+1)^0,w,c
   660  00FF82  A4D8               	btfss	status,2,c
   661  00FF84  EFC6  F07F         	goto	u951
   662  00FF88  EFC8  F07F         	goto	u950
   663  00FF8C                     u951:
   664  00FF8C  EFCE  F07F         	goto	l1365
   665  00FF90                     u950:
   666  00FF90                     
   667                           ;main.c: 234:             display = grey_down(display);
   668  00FF90  500F               	movf	main@display^0,w,c
   669  00FF92  EC6B  F07C         	call	_grey_down
   670  00FF96  6E0F               	movwf	main@display^0,c
   671                           
   672                           ;main.c: 235:         } else if (task == 5) {
   673  00FF98  EF8B  F07E         	goto	l1283
   674  00FF9C                     l1365:
   675  00FF9C  0E05               	movlw	5
   676  00FF9E  1810               	xorwf	main@task^0,w,c
   677  00FFA0  1011               	iorwf	(main@task+1)^0,w,c
   678  00FFA2  A4D8               	btfss	status,2,c
   679  00FFA4  EFD6  F07F         	goto	u961
   680  00FFA8  EFD8  F07F         	goto	u960
   681  00FFAC                     u961:
   682  00FFAC  EFDD  F07F         	goto	l1369
   683  00FFB0                     u960:
   684  00FFB0                     
   685                           ;main.c: 236:             display = bcd_up();
   686  00FFB0  EC11  F07D         	call	_bcd_up	;wreg free
   687  00FFB4  6E0F               	movwf	main@display^0,c
   688                           
   689                           ;main.c: 237:         } else if (task == 6) {
   690  00FFB6  EF8B  F07E         	goto	l1283
   691  00FFBA                     l1369:
   692  00FFBA  0E06               	movlw	6
   693  00FFBC  1810               	xorwf	main@task^0,w,c
   694  00FFBE  1011               	iorwf	(main@task+1)^0,w,c
   695  00FFC0  A4D8               	btfss	status,2,c
   696  00FFC2  EFE5  F07F         	goto	u971
   697  00FFC6  EFE7  F07F         	goto	u970
   698  00FFCA                     u971:
   699  00FFCA  EFEC  F07F         	goto	l1373
   700  00FFCE                     u970:
   701  00FFCE                     
   702                           ;main.c: 238:             display = bcd_down();
   703  00FFCE  ECDC  F07C         	call	_bcd_down	;wreg free
   704  00FFD2  6E0F               	movwf	main@display^0,c
   705                           
   706                           ;main.c: 239:         } else if (task == 7) {
   707  00FFD4  EF8B  F07E         	goto	l1283
   708  00FFD8                     l1373:
   709  00FFD8  0E07               	movlw	7
   710  00FFDA  1810               	xorwf	main@task^0,w,c
   711  00FFDC  1011               	iorwf	(main@task+1)^0,w,c
   712  00FFDE  A4D8               	btfss	status,2,c
   713  00FFE0  EFF4  F07F         	goto	u981
   714  00FFE4  EFF6  F07F         	goto	u980
   715  00FFE8                     u981:
   716  00FFE8  EFFC  F07F         	goto	l1377
   717  00FFEC                     u980:
   718  00FFEC                     
   719                           ;main.c: 240:             display = snake(display);
   720  00FFEC  500F               	movf	main@display^0,w,c
   721  00FFEE  EC7F  F07D         	call	_snake
   722  00FFF2  6E0F               	movwf	main@display^0,c
   723                           
   724                           ;main.c: 241:         } else if (task == 8) {
   725  00FFF4  EF8B  F07E         	goto	l1283
   726  00FFF8                     l1377:
   727  00FFF8  EF8B  F07E         	goto	l1283
   728  00FFFC  EF00  F000         	goto	start
   729  010000                     __end_of_main:
   730                           	callstack 0
   731                           
   732 ;; *************** function _snake *****************
   733 ;; Defined at:
   734 ;;		line 134 in file "main.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  display         1    wreg     unsigned char 
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  display         1    0[COMRAM] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      unsigned char 
   741 ;; Registers used:
   742 ;;		wreg, status,2, status,0
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;Total ram usage:        1 bytes
   753 ;; Hardware stack levels used: 1
   754 ;; This function calls:
   755 ;;		Nothing
   756 ;; This function is called by:
   757 ;;		_main
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           	psect	text1
   762  00FAFE                     __ptext1:
   763                           	callstack 0
   764  00FAFE                     _snake:
   765                           	callstack 30
   766                           
   767                           ;incstack = 0
   768                           ;snake@display stored from wreg
   769  00FAFE  6E01               	movwf	snake@display^0,c
   770  00FB00                     
   771                           ;main.c: 135:     if (display < 7) {
   772  00FB00  0E07               	movlw	7
   773  00FB02  6001               	cpfslt	snake@display^0,c
   774  00FB04  EF86  F07D         	goto	u241
   775  00FB08  EF88  F07D         	goto	u240
   776  00FB0C                     u241:
   777  00FB0C  EF8C  F07D         	goto	l999
   778  00FB10                     u240:
   779  00FB10                     
   780                           ;main.c: 136:   display = (display << 1) ^ 1;
   781  00FB10  80D8               	bsf	status,0,c
   782  00FB12  3601               	rlcf	snake@display^0,f,c
   783                           
   784                           ;main.c: 137:  } else {
   785  00FB14  EFBB  F07D         	goto	l1017
   786  00FB18                     l999:
   787                           
   788                           ;main.c: 138:   if (direction == 1) {
   789  00FB18  0418               	decf	_direction^0,w,c
   790  00FB1A  1019               	iorwf	(_direction+1)^0,w,c
   791  00FB1C  A4D8               	btfss	status,2,c
   792  00FB1E  EF93  F07D         	goto	u251
   793  00FB22  EF95  F07D         	goto	u250
   794  00FB26                     u251:
   795  00FB26  EFAC  F07D         	goto	l1009
   796  00FB2A                     u250:
   797  00FB2A                     
   798                           ;main.c: 139:             if (display == 224) {
   799  00FB2A  0EE0               	movlw	224
   800  00FB2C  1801               	xorwf	snake@display^0,w,c
   801  00FB2E  A4D8               	btfss	status,2,c
   802  00FB30  EF9C  F07D         	goto	u261
   803  00FB34  EF9E  F07D         	goto	u260
   804  00FB38                     u261:
   805  00FB38  EFA7  F07D         	goto	l1007
   806  00FB3C                     u260:
   807  00FB3C                     
   808                           ;main.c: 140:     direction = 0;
   809  00FB3C  0E00               	movlw	0
   810  00FB3E  6E19               	movwf	(_direction+1)^0,c
   811  00FB40  0E00               	movlw	0
   812  00FB42  6E18               	movwf	_direction^0,c
   813  00FB44                     l1005:
   814                           
   815                           ;main.c: 141:     display = display >> 1;
   816  00FB44  90D8               	bcf	status,0,c
   817  00FB46  3001               	rrcf	snake@display^0,w,c
   818  00FB48  6E01               	movwf	snake@display^0,c
   819                           
   820                           ;main.c: 142:             } else {
   821  00FB4A  EFBB  F07D         	goto	l1017
   822  00FB4E                     l1007:
   823                           
   824                           ;main.c: 143:     display = display << 1;
   825  00FB4E  5001               	movf	snake@display^0,w,c
   826  00FB50  2401               	addwf	snake@display^0,w,c
   827  00FB52  6E01               	movwf	snake@display^0,c
   828  00FB54  EFBB  F07D         	goto	l1017
   829  00FB58                     l1009:
   830                           
   831                           ;main.c: 146:    if (display == 7) {
   832  00FB58  0E07               	movlw	7
   833  00FB5A  1801               	xorwf	snake@display^0,w,c
   834  00FB5C  A4D8               	btfss	status,2,c
   835  00FB5E  EFB3  F07D         	goto	u271
   836  00FB62  EFB5  F07D         	goto	u270
   837  00FB66                     u271:
   838  00FB66  EFA2  F07D         	goto	l1005
   839  00FB6A                     u270:
   840  00FB6A                     
   841                           ;main.c: 147:     direction = 1;
   842  00FB6A  0E00               	movlw	0
   843  00FB6C  6E19               	movwf	(_direction+1)^0,c
   844  00FB6E  0E01               	movlw	1
   845  00FB70  6E18               	movwf	_direction^0,c
   846  00FB72  EFA7  F07D         	goto	l1007
   847  00FB76                     l1017:
   848                           
   849                           ;main.c: 154:     return display;
   850  00FB76  5001               	movf	snake@display^0,w,c
   851  00FB78  0012               	return		;funcret
   852  00FB7A                     __end_of_snake:
   853                           	callstack 0
   854                           
   855 ;; *************** function _setTask *****************
   856 ;; Defined at:
   857 ;;		line 78 in file "main.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  task            2    0[COMRAM] int 
   860 ;;  change          2    2[COMRAM] int 
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  2    0[COMRAM] int 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   872 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   875 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;Total ram usage:        4 bytes
   877 ;; Hardware stack levels used: 1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text2
   886  00F968                     __ptext2:
   887                           	callstack 0
   888  00F968                     _setTask:
   889                           	callstack 30
   890  00F968                     
   891                           ;main.c: 79:     task = task + change;
   892  00F968  5003               	movf	setTask@change^0,w,c
   893  00F96A  2401               	addwf	setTask@task^0,w,c
   894  00F96C  6E01               	movwf	setTask@task^0,c
   895  00F96E  5004               	movf	(setTask@change+1)^0,w,c
   896  00F970  2002               	addwfc	(setTask@task+1)^0,w,c
   897  00F972  6E02               	movwf	(setTask@task+1)^0,c
   898                           
   899                           ;main.c: 80:     if (task == 10) {
   900  00F974  0E0A               	movlw	10
   901  00F976  1801               	xorwf	setTask@task^0,w,c
   902  00F978  1002               	iorwf	(setTask@task+1)^0,w,c
   903  00F97A  A4D8               	btfss	status,2,c
   904  00F97C  EFC2  F07C         	goto	u661
   905  00F980  EFC4  F07C         	goto	u660
   906  00F984                     u661:
   907  00F984  EFCA  F07C         	goto	l1223
   908  00F988                     u660:
   909  00F988                     
   910                           ;main.c: 81:         task = 1;
   911  00F988  0E00               	movlw	0
   912  00F98A  6E02               	movwf	(setTask@task+1)^0,c
   913  00F98C  0E01               	movlw	1
   914  00F98E  6E01               	movwf	setTask@task^0,c
   915                           
   916                           ;main.c: 82:     } else if (task == 0) {
   917  00F990  EFD7  F07C         	goto	l1227
   918  00F994                     l1223:
   919  00F994  5001               	movf	setTask@task^0,w,c
   920  00F996  1002               	iorwf	(setTask@task+1)^0,w,c
   921  00F998  A4D8               	btfss	status,2,c
   922  00F99A  EFD1  F07C         	goto	u671
   923  00F99E  EFD3  F07C         	goto	u670
   924  00F9A2                     u671:
   925  00F9A2  EFD7  F07C         	goto	l1227
   926  00F9A6                     u670:
   927  00F9A6                     
   928                           ;main.c: 83:         task = 9;
   929  00F9A6  0E00               	movlw	0
   930  00F9A8  6E02               	movwf	(setTask@task+1)^0,c
   931  00F9AA  0E09               	movlw	9
   932  00F9AC  6E01               	movwf	setTask@task^0,c
   933  00F9AE                     l1227:
   934                           
   935                           ;main.c: 85:     return task;
   936  00F9AE  C001  F001         	movff	setTask@task,?_setTask
   937  00F9B2  C002  F002         	movff	setTask@task+1,?_setTask+1
   938  00F9B6  0012               	return		;funcret
   939  00F9B8                     __end_of_setTask:
   940                           	callstack 0
   941                           
   942 ;; *************** function _setDisplay *****************
   943 ;; Defined at:
   944 ;;		line 88 in file "main.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  task            2    0[COMRAM] int 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;		None
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      unsigned char 
   951 ;; Registers used:
   952 ;;		wreg, status,2, status,0
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;Total ram usage:        2 bytes
   963 ;; Hardware stack levels used: 1
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text3
   972  00FA8C                     __ptext3:
   973                           	callstack 0
   974  00FA8C                     _setDisplay:
   975                           	callstack 30
   976  00FA8C                     
   977                           ;main.c: 89:     if (task == 2) {
   978  00FA8C  0E02               	movlw	2
   979  00FA8E  1801               	xorwf	setDisplay@task^0,w,c
   980  00FA90  1002               	iorwf	(setDisplay@task+1)^0,w,c
   981  00FA92  A4D8               	btfss	status,2,c
   982  00FA94  EF4E  F07D         	goto	u681
   983  00FA98  EF50  F07D         	goto	u680
   984  00FA9C                     u681:
   985  00FA9C  EF53  F07D         	goto	l1239
   986  00FAA0                     u680:
   987  00FAA0                     
   988                           ;main.c: 90:         return 255;
   989  00FAA0  0EFF               	movlw	255
   990  00FAA2  EF7E  F07D         	goto	l48
   991  00FAA6                     l1239:
   992  00FAA6  0E09               	movlw	9
   993  00FAA8  1801               	xorwf	setDisplay@task^0,w,c
   994  00FAAA  1002               	iorwf	(setDisplay@task+1)^0,w,c
   995  00FAAC  A4D8               	btfss	status,2,c
   996  00FAAE  EF5B  F07D         	goto	u691
   997  00FAB2  EF5D  F07D         	goto	u690
   998  00FAB6                     u691:
   999  00FAB6  EF60  F07D         	goto	l1247
  1000  00FABA                     u690:
  1001  00FABA                     
  1002                           ;main.c: 92:         return 1;
  1003  00FABA  0E01               	movlw	1
  1004  00FABC  EF7E  F07D         	goto	l48
  1005  00FAC0                     l1247:
  1006  00FAC0  0401               	decf	setDisplay@task^0,w,c
  1007  00FAC2  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1008  00FAC4  B4D8               	btfsc	status,2,c
  1009  00FAC6  EF67  F07D         	goto	u701
  1010  00FACA  EF69  F07D         	goto	u700
  1011  00FACE                     u701:
  1012  00FACE  EF7D  F07D         	goto	l1253
  1013  00FAD2                     u700:
  1014  00FAD2  0E03               	movlw	3
  1015  00FAD4  1801               	xorwf	setDisplay@task^0,w,c
  1016  00FAD6  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1017  00FAD8  B4D8               	btfsc	status,2,c
  1018  00FADA  EF71  F07D         	goto	u711
  1019  00FADE  EF73  F07D         	goto	u710
  1020  00FAE2                     u711:
  1021  00FAE2  EF7D  F07D         	goto	l1253
  1022  00FAE6                     u710:
  1023  00FAE6  0E07               	movlw	7
  1024  00FAE8  1801               	xorwf	setDisplay@task^0,w,c
  1025  00FAEA  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1026  00FAEC  A4D8               	btfss	status,2,c
  1027  00FAEE  EF7B  F07D         	goto	u721
  1028  00FAF2  EF7D  F07D         	goto	u720
  1029  00FAF6                     u721:
  1030  00FAF6  EF7E  F07D         	goto	l48
  1031  00FAFA                     u720:
  1032  00FAFA                     l1253:
  1033                           
  1034                           ;main.c: 94:         return 0;
  1035  00FAFA  0E00               	movlw	0
  1036  00FAFC                     l48:
  1037  00FAFC  0012               	return		;funcret
  1038  00FAFE                     __end_of_setDisplay:
  1039                           	callstack 0
  1040                           
  1041 ;; *************** function _grey_up *****************
  1042 ;; Defined at:
  1043 ;;		line 104 in file "main.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  display         1    wreg     unsigned char 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;  display         1    0[COMRAM] unsigned char 
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      unsigned char 
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, status,0
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;Total ram usage:        1 bytes
  1062 ;; Hardware stack levels used: 1
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text4
  1071  00F8E6                     __ptext4:
  1072                           	callstack 0
  1073  00F8E6                     _grey_up:
  1074                           	callstack 30
  1075  00F8E6                     
  1076                           ;main.c: 105:     display = (grey >>1) ^ grey;
  1077  00F8E6  90D8               	bcf	status,0,c
  1078  00F8E8  3017               	rrcf	_grey^0,w,c
  1079  00F8EA  1817               	xorwf	_grey^0,w,c
  1080  00F8EC  6E01               	movwf	grey_up@display^0,c
  1081                           
  1082                           ;main.c: 106:     grey = grey + 1;
  1083  00F8EE  2817               	incf	_grey^0,w,c
  1084  00F8F0  6E17               	movwf	_grey^0,c
  1085  00F8F2                     
  1086                           ;main.c: 107:     return display;
  1087  00F8F2  5001               	movf	grey_up@display^0,w,c
  1088  00F8F4  0012               	return		;funcret
  1089  00F8F6                     __end_of_grey_up:
  1090                           	callstack 0
  1091                           
  1092 ;; *************** function _grey_down *****************
  1093 ;; Defined at:
  1094 ;;		line 109 in file "main.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  display         1    wreg     unsigned char 
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  display         1    0[COMRAM] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      unsigned char 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;Total ram usage:        1 bytes
  1113 ;; Hardware stack levels used: 1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	text5
  1122  00F8D6                     __ptext5:
  1123                           	callstack 0
  1124  00F8D6                     _grey_down:
  1125                           	callstack 30
  1126  00F8D6                     
  1127                           ;main.c: 110:     display = (grey >>1) ^ grey;
  1128  00F8D6  90D8               	bcf	status,0,c
  1129  00F8D8  3017               	rrcf	_grey^0,w,c
  1130  00F8DA  1817               	xorwf	_grey^0,w,c
  1131  00F8DC  6E01               	movwf	grey_down@display^0,c
  1132                           
  1133                           ;main.c: 111:     grey = grey - 1;
  1134  00F8DE  0417               	decf	_grey^0,w,c
  1135  00F8E0  6E17               	movwf	_grey^0,c
  1136  00F8E2                     
  1137                           ;main.c: 112:     return display;
  1138  00F8E2  5001               	movf	grey_down@display^0,w,c
  1139  00F8E4  0012               	return		;funcret
  1140  00F8E6                     __end_of_grey_down:
  1141                           	callstack 0
  1142                           
  1143 ;; *************** function _delay *****************
  1144 ;; Defined at:
  1145 ;;		line 64 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  ms              2    0[COMRAM] unsigned int 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  i               2    2[COMRAM] unsigned int 
  1150 ;;  j               1    4[COMRAM] unsigned char 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1160 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1163 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;Total ram usage:        5 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text6
  1174  00F920                     __ptext6:
  1175                           	callstack 0
  1176  00F920                     _delay:
  1177                           	callstack 30
  1178  00F920                     
  1179                           ;main.c: 65:     unsigned int i;;main.c: 66:     unsigned char j;;main.c: 67:     for (i
      +                           =0; i< ms; i++){
  1180  00F920  0E00               	movlw	0
  1181  00F922  6E04               	movwf	(delay@i+1)^0,c
  1182  00F924  0E00               	movlw	0
  1183  00F926  6E03               	movwf	delay@i^0,c
  1184  00F928  EFA8  F07C         	goto	l1217
  1185  00F92C                     l1205:
  1186                           
  1187                           ;main.c: 68:         for (j =0 ; j < 200; j++){
  1188  00F92C  0E00               	movlw	0
  1189  00F92E  6E05               	movwf	delay@j^0,c
  1190  00F930                     l35:
  1191                           
  1192                           ;main.c: 69:             __nop();
  1193  00F930  F000               	nop	
  1194                           
  1195                           ;main.c: 70:             __nop();
  1196  00F932  F000               	nop	
  1197                           
  1198                           ;main.c: 71:             __nop();
  1199  00F934  F000               	nop	
  1200                           
  1201                           ;main.c: 72:             __nop();
  1202  00F936  F000               	nop	
  1203                           
  1204                           ;main.c: 73:             __nop();
  1205  00F938  F000               	nop	
  1206  00F93A                     
  1207                           ;main.c: 74:         }
  1208  00F93A  2A05               	incf	delay@j^0,f,c
  1209  00F93C  0EC7               	movlw	199
  1210  00F93E  6405               	cpfsgt	delay@j^0,c
  1211  00F940  EFA4  F07C         	goto	u641
  1212  00F944  EFA6  F07C         	goto	u640
  1213  00F948                     u641:
  1214  00F948  EF98  F07C         	goto	l35
  1215  00F94C                     u640:
  1216  00F94C                     
  1217                           ;main.c: 75:     }
  1218  00F94C  4A03               	infsnz	delay@i^0,f,c
  1219  00F94E  2A04               	incf	(delay@i+1)^0,f,c
  1220  00F950                     l1217:
  1221  00F950  5001               	movf	delay@ms^0,w,c
  1222  00F952  5C03               	subwf	delay@i^0,w,c
  1223  00F954  5002               	movf	(delay@ms+1)^0,w,c
  1224  00F956  5804               	subwfb	(delay@i+1)^0,w,c
  1225  00F958  A0D8               	btfss	status,0,c
  1226  00F95A  EFB1  F07C         	goto	u651
  1227  00F95E  EFB3  F07C         	goto	u650
  1228  00F962                     u651:
  1229  00F962  EF96  F07C         	goto	l1205
  1230  00F966                     u650:
  1231  00F966  0012               	return		;funcret
  1232  00F968                     __end_of_delay:
  1233                           	callstack 0
  1234                           
  1235 ;; *************** function _bin_up *****************
  1236 ;; Defined at:
  1237 ;;		line 98 in file "main.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  display         1    wreg     unsigned char 
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  display         1    0[COMRAM] unsigned char 
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  1    wreg      unsigned char 
  1244 ;; Registers used:
  1245 ;;		wreg, status,2, status,0
  1246 ;; Tracked objects:
  1247 ;;		On entry : 0/0
  1248 ;;		On exit  : 0/0
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;Total ram usage:        1 bytes
  1256 ;; Hardware stack levels used: 1
  1257 ;; This function calls:
  1258 ;;		Nothing
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text7
  1265  00F8D0                     __ptext7:
  1266                           	callstack 0
  1267  00F8D0                     _bin_up:
  1268                           	callstack 30
  1269                           
  1270                           ;incstack = 0
  1271                           ;bin_up@display stored from wreg
  1272  00F8D0  6E01               	movwf	bin_up@display^0,c
  1273  00F8D2                     
  1274                           ;main.c: 99:     return (display + 1);
  1275  00F8D2  2801               	incf	bin_up@display^0,w,c
  1276  00F8D4  0012               	return		;funcret
  1277  00F8D6                     __end_of_bin_up:
  1278                           	callstack 0
  1279                           
  1280 ;; *************** function _bin_down *****************
  1281 ;; Defined at:
  1282 ;;		line 101 in file "main.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  display         1    wreg     unsigned char 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  display         1    0[COMRAM] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      unsigned char 
  1289 ;; Registers used:
  1290 ;;		wreg, status,2, status,0
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1300 ;;Total ram usage:        1 bytes
  1301 ;; Hardware stack levels used: 1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_main
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text8
  1310  00F8CA                     __ptext8:
  1311                           	callstack 0
  1312  00F8CA                     _bin_down:
  1313                           	callstack 30
  1314                           
  1315                           ;incstack = 0
  1316                           ;bin_down@display stored from wreg
  1317  00F8CA  6E01               	movwf	bin_down@display^0,c
  1318  00F8CC                     
  1319                           ;main.c: 102:     return (display - 1);
  1320  00F8CC  0401               	decf	bin_down@display^0,w,c
  1321  00F8CE  0012               	return		;funcret
  1322  00F8D0                     __end_of_bin_down:
  1323                           	callstack 0
  1324                           
  1325 ;; *************** function _bcd_up *****************
  1326 ;; Defined at:
  1327 ;;		line 114 in file "main.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;		None
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  display         2   10[COMRAM] unsigned int 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      unsigned char 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;Total ram usage:        4 bytes
  1346 ;; Hardware stack levels used: 1
  1347 ;; Hardware stack levels required when called: 1
  1348 ;; This function calls:
  1349 ;;		___awdiv
  1350 ;;		___awmod
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text9
  1357  00FA22                     __ptext9:
  1358                           	callstack 0
  1359  00FA22                     _bcd_up:
  1360                           	callstack 29
  1361  00FA22                     
  1362                           ;main.c: 115:     unsigned int display;;main.c: 116:     if (bcd > 99) {
  1363  00FA22  0E63               	movlw	99
  1364  00FA24  6416               	cpfsgt	_bcd^0,c
  1365  00FA26  EF17  F07D         	goto	u731
  1366  00FA2A  EF19  F07D         	goto	u730
  1367  00FA2E                     u731:
  1368  00FA2E  EF1D  F07D         	goto	l1261
  1369  00FA32                     u730:
  1370  00FA32                     
  1371                           ;main.c: 117:         bcd = 1;
  1372  00FA32  0E01               	movlw	1
  1373  00FA34  6E16               	movwf	_bcd^0,c
  1374                           
  1375                           ;main.c: 118:     } else {
  1376  00FA36  EF44  F07D         	goto	l1265
  1377  00FA3A                     l1261:
  1378                           
  1379                           ;main.c: 119:         display = ((bcd / 10) << 4) | (bcd % 10);
  1380  00FA3A  C016  F001         	movff	_bcd,___awdiv@dividend
  1381  00FA3E  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1382  00FA40  0E00               	movlw	0
  1383  00FA42  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1384  00FA44  0E0A               	movlw	10
  1385  00FA46  6E03               	movwf	___awdiv@divisor^0,c
  1386  00FA48  EC15  F07E         	call	___awdiv	;wreg free
  1387  00FA4C  C001  F009         	movff	?___awdiv,??_bcd_up
  1388  00FA50  C002  F00A         	movff	?___awdiv+1,??_bcd_up+1
  1389  00FA54  3A09               	swapf	??_bcd_up^0,f,c
  1390  00FA56  3A0A               	swapf	(??_bcd_up+1)^0,f,c
  1391  00FA58  0EF0               	movlw	240
  1392  00FA5A  160A               	andwf	(??_bcd_up+1)^0,f,c
  1393  00FA5C  5009               	movf	??_bcd_up^0,w,c
  1394  00FA5E  0B0F               	andlw	15
  1395  00FA60  120A               	iorwf	(??_bcd_up+1)^0,f,c
  1396  00FA62  0EF0               	movlw	240
  1397  00FA64  1609               	andwf	??_bcd_up^0,f,c
  1398  00FA66  C016  F001         	movff	_bcd,___awmod@dividend
  1399  00FA6A  6A02               	clrf	(___awmod@dividend+1)^0,c
  1400  00FA6C  0E00               	movlw	0
  1401  00FA6E  6E04               	movwf	(___awmod@divisor+1)^0,c
  1402  00FA70  0E0A               	movlw	10
  1403  00FA72  6E03               	movwf	___awmod@divisor^0,c
  1404  00FA74  ECBD  F07D         	call	___awmod	;wreg free
  1405  00FA78  5001               	movf	?___awmod^0,w,c
  1406  00FA7A  1009               	iorwf	??_bcd_up^0,w,c
  1407  00FA7C  6E0B               	movwf	bcd_up@display^0,c
  1408  00FA7E  5002               	movf	(?___awmod+1)^0,w,c
  1409  00FA80  100A               	iorwf	(??_bcd_up+1)^0,w,c
  1410  00FA82  6E0C               	movwf	(bcd_up@display+1)^0,c
  1411  00FA84                     
  1412                           ;main.c: 120:         bcd = bcd + 1;
  1413  00FA84  2816               	incf	_bcd^0,w,c
  1414  00FA86  6E16               	movwf	_bcd^0,c
  1415  00FA88                     l1265:
  1416                           
  1417                           ;main.c: 122:     return display;
  1418  00FA88  500B               	movf	bcd_up@display^0,w,c
  1419  00FA8A  0012               	return		;funcret
  1420  00FA8C                     __end_of_bcd_up:
  1421                           	callstack 0
  1422                           
  1423 ;; *************** function _bcd_down *****************
  1424 ;; Defined at:
  1425 ;;		line 124 in file "main.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  display         2   10[COMRAM] unsigned int 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      unsigned char 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;Total ram usage:        4 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 1
  1446 ;; This function calls:
  1447 ;;		___awdiv
  1448 ;;		___awmod
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text10
  1455  00F9B8                     __ptext10:
  1456                           	callstack 0
  1457  00F9B8                     _bcd_down:
  1458                           	callstack 29
  1459  00F9B8                     
  1460                           ;main.c: 125:     unsigned int display;;main.c: 126:     if (bcd == 0) {
  1461  00F9B8  5016               	movf	_bcd^0,w,c
  1462  00F9BA  A4D8               	btfss	status,2,c
  1463  00F9BC  EFE2  F07C         	goto	u741
  1464  00F9C0  EFE4  F07C         	goto	u740
  1465  00F9C4                     u741:
  1466  00F9C4  EFE8  F07C         	goto	l1273
  1467  00F9C8                     u740:
  1468  00F9C8                     
  1469                           ;main.c: 127:         bcd = 99;
  1470  00F9C8  0E63               	movlw	99
  1471  00F9CA  6E16               	movwf	_bcd^0,c
  1472                           
  1473                           ;main.c: 128:     } else {
  1474  00F9CC  EF0F  F07D         	goto	l1277
  1475  00F9D0                     l1273:
  1476                           
  1477                           ;main.c: 129:         display = ((bcd / 10) << 4) | (bcd % 10);
  1478  00F9D0  C016  F001         	movff	_bcd,___awdiv@dividend
  1479  00F9D4  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1480  00F9D6  0E00               	movlw	0
  1481  00F9D8  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1482  00F9DA  0E0A               	movlw	10
  1483  00F9DC  6E03               	movwf	___awdiv@divisor^0,c
  1484  00F9DE  EC15  F07E         	call	___awdiv	;wreg free
  1485  00F9E2  C001  F009         	movff	?___awdiv,??_bcd_down
  1486  00F9E6  C002  F00A         	movff	?___awdiv+1,??_bcd_down+1
  1487  00F9EA  3A09               	swapf	??_bcd_down^0,f,c
  1488  00F9EC  3A0A               	swapf	(??_bcd_down+1)^0,f,c
  1489  00F9EE  0EF0               	movlw	240
  1490  00F9F0  160A               	andwf	(??_bcd_down+1)^0,f,c
  1491  00F9F2  5009               	movf	??_bcd_down^0,w,c
  1492  00F9F4  0B0F               	andlw	15
  1493  00F9F6  120A               	iorwf	(??_bcd_down+1)^0,f,c
  1494  00F9F8  0EF0               	movlw	240
  1495  00F9FA  1609               	andwf	??_bcd_down^0,f,c
  1496  00F9FC  C016  F001         	movff	_bcd,___awmod@dividend
  1497  00FA00  6A02               	clrf	(___awmod@dividend+1)^0,c
  1498  00FA02  0E00               	movlw	0
  1499  00FA04  6E04               	movwf	(___awmod@divisor+1)^0,c
  1500  00FA06  0E0A               	movlw	10
  1501  00FA08  6E03               	movwf	___awmod@divisor^0,c
  1502  00FA0A  ECBD  F07D         	call	___awmod	;wreg free
  1503  00FA0E  5001               	movf	?___awmod^0,w,c
  1504  00FA10  1009               	iorwf	??_bcd_down^0,w,c
  1505  00FA12  6E0B               	movwf	bcd_down@display^0,c
  1506  00FA14  5002               	movf	(?___awmod+1)^0,w,c
  1507  00FA16  100A               	iorwf	(??_bcd_down+1)^0,w,c
  1508  00FA18  6E0C               	movwf	(bcd_down@display+1)^0,c
  1509  00FA1A                     
  1510                           ;main.c: 130:         bcd = bcd - 1;
  1511  00FA1A  0416               	decf	_bcd^0,w,c
  1512  00FA1C  6E16               	movwf	_bcd^0,c
  1513  00FA1E                     l1277:
  1514                           
  1515                           ;main.c: 132:     return display;
  1516  00FA1E  500B               	movf	bcd_down@display^0,w,c
  1517  00FA20  0012               	return		;funcret
  1518  00FA22                     __end_of_bcd_down:
  1519                           	callstack 0
  1520                           
  1521 ;; *************** function ___awmod *****************
  1522 ;; Defined at:
  1523 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  dividend        2    0[COMRAM] int 
  1526 ;;  divisor         2    2[COMRAM] int 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  sign            1    5[COMRAM] unsigned char 
  1529 ;;  counter         1    4[COMRAM] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  2    0[COMRAM] int 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1539 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;Total ram usage:        6 bytes
  1544 ;; Hardware stack levels used: 1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_bcd_up
  1549 ;;		_bcd_down
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text11
  1554  00FB7A                     __ptext11:
  1555                           	callstack 0
  1556  00FB7A                     ___awmod:
  1557                           	callstack 29
  1558  00FB7A  0E00               	movlw	0
  1559  00FB7C  6E06               	movwf	___awmod@sign^0,c
  1560  00FB7E  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1561  00FB80  EFC6  F07D         	goto	u580
  1562  00FB84  EFC4  F07D         	goto	u581
  1563  00FB88                     u581:
  1564  00FB88  EFCC  F07D         	goto	l1175
  1565  00FB8C                     u580:
  1566  00FB8C  6C01               	negf	___awmod@dividend^0,c
  1567  00FB8E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1568  00FB90  B0D8               	btfsc	status,0,c
  1569  00FB92  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1570  00FB94  0E01               	movlw	1
  1571  00FB96  6E06               	movwf	___awmod@sign^0,c
  1572  00FB98                     l1175:
  1573  00FB98  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1574  00FB9A  EFD3  F07D         	goto	u590
  1575  00FB9E  EFD1  F07D         	goto	u591
  1576  00FBA2                     u591:
  1577  00FBA2  EFD7  F07D         	goto	l1179
  1578  00FBA6                     u590:
  1579  00FBA6  6C03               	negf	___awmod@divisor^0,c
  1580  00FBA8  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1581  00FBAA  B0D8               	btfsc	status,0,c
  1582  00FBAC  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1583  00FBAE                     l1179:
  1584  00FBAE  5003               	movf	___awmod@divisor^0,w,c
  1585  00FBB0  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1586  00FBB2  B4D8               	btfsc	status,2,c
  1587  00FBB4  EFDE  F07D         	goto	u601
  1588  00FBB8  EFE0  F07D         	goto	u600
  1589  00FBBC                     u601:
  1590  00FBBC  EF04  F07E         	goto	l1195
  1591  00FBC0                     u600:
  1592  00FBC0  0E01               	movlw	1
  1593  00FBC2  6E05               	movwf	___awmod@counter^0,c
  1594  00FBC4  EFE8  F07D         	goto	l1185
  1595  00FBC8                     l1183:
  1596  00FBC8  90D8               	bcf	status,0,c
  1597  00FBCA  3603               	rlcf	___awmod@divisor^0,f,c
  1598  00FBCC  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1599  00FBCE  2A05               	incf	___awmod@counter^0,f,c
  1600  00FBD0                     l1185:
  1601  00FBD0  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1602  00FBD2  EFED  F07D         	goto	u611
  1603  00FBD6  EFEF  F07D         	goto	u610
  1604  00FBDA                     u611:
  1605  00FBDA  EFE4  F07D         	goto	l1183
  1606  00FBDE                     u610:
  1607  00FBDE                     l1187:
  1608  00FBDE  5003               	movf	___awmod@divisor^0,w,c
  1609  00FBE0  5C01               	subwf	___awmod@dividend^0,w,c
  1610  00FBE2  5004               	movf	(___awmod@divisor+1)^0,w,c
  1611  00FBE4  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1612  00FBE6  A0D8               	btfss	status,0,c
  1613  00FBE8  EFF8  F07D         	goto	u621
  1614  00FBEC  EFFA  F07D         	goto	u620
  1615  00FBF0                     u621:
  1616  00FBF0  EFFE  F07D         	goto	l1191
  1617  00FBF4                     u620:
  1618  00FBF4  5003               	movf	___awmod@divisor^0,w,c
  1619  00FBF6  5E01               	subwf	___awmod@dividend^0,f,c
  1620  00FBF8  5004               	movf	(___awmod@divisor+1)^0,w,c
  1621  00FBFA  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1622  00FBFC                     l1191:
  1623  00FBFC  90D8               	bcf	status,0,c
  1624  00FBFE  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1625  00FC00  3203               	rrcf	___awmod@divisor^0,f,c
  1626  00FC02  2E05               	decfsz	___awmod@counter^0,f,c
  1627  00FC04  EFEF  F07D         	goto	l1187
  1628  00FC08                     l1195:
  1629  00FC08  5006               	movf	___awmod@sign^0,w,c
  1630  00FC0A  B4D8               	btfsc	status,2,c
  1631  00FC0C  EF0A  F07E         	goto	u631
  1632  00FC10  EF0C  F07E         	goto	u630
  1633  00FC14                     u631:
  1634  00FC14  EF10  F07E         	goto	l1199
  1635  00FC18                     u630:
  1636  00FC18  6C01               	negf	___awmod@dividend^0,c
  1637  00FC1A  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1638  00FC1C  B0D8               	btfsc	status,0,c
  1639  00FC1E  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1640  00FC20                     l1199:
  1641  00FC20  C001  F001         	movff	___awmod@dividend,?___awmod
  1642  00FC24  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1643  00FC28  0012               	return		;funcret
  1644  00FC2A                     __end_of___awmod:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function ___awdiv *****************
  1648 ;; Defined at:
  1649 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  dividend        2    0[COMRAM] int 
  1652 ;;  divisor         2    2[COMRAM] int 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  quotient        2    6[COMRAM] int 
  1655 ;;  sign            1    5[COMRAM] unsigned char 
  1656 ;;  counter         1    4[COMRAM] unsigned char 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  2    0[COMRAM] int 
  1659 ;; Registers used:
  1660 ;;		wreg, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;Total ram usage:        8 bytes
  1671 ;; Hardware stack levels used: 1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_bcd_up
  1676 ;;		_bcd_down
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text12
  1681  00FC2A                     __ptext12:
  1682                           	callstack 0
  1683  00FC2A                     ___awdiv:
  1684                           	callstack 29
  1685  00FC2A  0E00               	movlw	0
  1686  00FC2C  6E06               	movwf	___awdiv@sign^0,c
  1687  00FC2E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1688  00FC30  EF1E  F07E         	goto	u520
  1689  00FC34  EF1C  F07E         	goto	u521
  1690  00FC38                     u521:
  1691  00FC38  EF24  F07E         	goto	l1131
  1692  00FC3C                     u520:
  1693  00FC3C  6C03               	negf	___awdiv@divisor^0,c
  1694  00FC3E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1695  00FC40  B0D8               	btfsc	status,0,c
  1696  00FC42  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1697  00FC44  0E01               	movlw	1
  1698  00FC46  6E06               	movwf	___awdiv@sign^0,c
  1699  00FC48                     l1131:
  1700  00FC48  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1701  00FC4A  EF2B  F07E         	goto	u530
  1702  00FC4E  EF29  F07E         	goto	u531
  1703  00FC52                     u531:
  1704  00FC52  EF31  F07E         	goto	l1137
  1705  00FC56                     u530:
  1706  00FC56  6C01               	negf	___awdiv@dividend^0,c
  1707  00FC58  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1708  00FC5A  B0D8               	btfsc	status,0,c
  1709  00FC5C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1710  00FC5E  0E01               	movlw	1
  1711  00FC60  1A06               	xorwf	___awdiv@sign^0,f,c
  1712  00FC62                     l1137:
  1713  00FC62  0E00               	movlw	0
  1714  00FC64  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1715  00FC66  0E00               	movlw	0
  1716  00FC68  6E07               	movwf	___awdiv@quotient^0,c
  1717  00FC6A  5003               	movf	___awdiv@divisor^0,w,c
  1718  00FC6C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1719  00FC6E  B4D8               	btfsc	status,2,c
  1720  00FC70  EF3C  F07E         	goto	u541
  1721  00FC74  EF3E  F07E         	goto	u540
  1722  00FC78                     u541:
  1723  00FC78  EF66  F07E         	goto	l1159
  1724  00FC7C                     u540:
  1725  00FC7C  0E01               	movlw	1
  1726  00FC7E  6E05               	movwf	___awdiv@counter^0,c
  1727  00FC80  EF46  F07E         	goto	l1145
  1728  00FC84                     l1143:
  1729  00FC84  90D8               	bcf	status,0,c
  1730  00FC86  3603               	rlcf	___awdiv@divisor^0,f,c
  1731  00FC88  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1732  00FC8A  2A05               	incf	___awdiv@counter^0,f,c
  1733  00FC8C                     l1145:
  1734  00FC8C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1735  00FC8E  EF4B  F07E         	goto	u551
  1736  00FC92  EF4D  F07E         	goto	u550
  1737  00FC96                     u551:
  1738  00FC96  EF42  F07E         	goto	l1143
  1739  00FC9A                     u550:
  1740  00FC9A                     l1147:
  1741  00FC9A  90D8               	bcf	status,0,c
  1742  00FC9C  3607               	rlcf	___awdiv@quotient^0,f,c
  1743  00FC9E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1744  00FCA0  5003               	movf	___awdiv@divisor^0,w,c
  1745  00FCA2  5C01               	subwf	___awdiv@dividend^0,w,c
  1746  00FCA4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1747  00FCA6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1748  00FCA8  A0D8               	btfss	status,0,c
  1749  00FCAA  EF59  F07E         	goto	u561
  1750  00FCAE  EF5B  F07E         	goto	u560
  1751  00FCB2                     u561:
  1752  00FCB2  EF60  F07E         	goto	l1155
  1753  00FCB6                     u560:
  1754  00FCB6  5003               	movf	___awdiv@divisor^0,w,c
  1755  00FCB8  5E01               	subwf	___awdiv@dividend^0,f,c
  1756  00FCBA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1757  00FCBC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1758  00FCBE  8007               	bsf	___awdiv@quotient^0,0,c
  1759  00FCC0                     l1155:
  1760  00FCC0  90D8               	bcf	status,0,c
  1761  00FCC2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1762  00FCC4  3203               	rrcf	___awdiv@divisor^0,f,c
  1763  00FCC6  2E05               	decfsz	___awdiv@counter^0,f,c
  1764  00FCC8  EF4D  F07E         	goto	l1147
  1765  00FCCC                     l1159:
  1766  00FCCC  5006               	movf	___awdiv@sign^0,w,c
  1767  00FCCE  B4D8               	btfsc	status,2,c
  1768  00FCD0  EF6C  F07E         	goto	u571
  1769  00FCD4  EF6E  F07E         	goto	u570
  1770  00FCD8                     u571:
  1771  00FCD8  EF72  F07E         	goto	l1163
  1772  00FCDC                     u570:
  1773  00FCDC  6C07               	negf	___awdiv@quotient^0,c
  1774  00FCDE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1775  00FCE0  B0D8               	btfsc	status,0,c
  1776  00FCE2  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1777  00FCE4                     l1163:
  1778  00FCE4  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1779  00FCE8  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1780  00FCEC  0012               	return		;funcret
  1781  00FCEE                     __end_of___awdiv:
  1782                           	callstack 0
  1783  0000                     
  1784                           	psect	rparam
  1785  0000                     
  1786                           	psect	idloc
  1787                           
  1788                           ;Config register IDLOC0 @ 0x200000
  1789                           ;	unspecified, using default values
  1790  200000                     	org	2097152
  1791  200000  FF                 	db	255
  1792                           
  1793                           ;Config register IDLOC1 @ 0x200001
  1794                           ;	unspecified, using default values
  1795  200001                     	org	2097153
  1796  200001  FF                 	db	255
  1797                           
  1798                           ;Config register IDLOC2 @ 0x200002
  1799                           ;	unspecified, using default values
  1800  200002                     	org	2097154
  1801  200002  FF                 	db	255
  1802                           
  1803                           ;Config register IDLOC3 @ 0x200003
  1804                           ;	unspecified, using default values
  1805  200003                     	org	2097155
  1806  200003  FF                 	db	255
  1807                           
  1808                           ;Config register IDLOC4 @ 0x200004
  1809                           ;	unspecified, using default values
  1810  200004                     	org	2097156
  1811  200004  FF                 	db	255
  1812                           
  1813                           ;Config register IDLOC5 @ 0x200005
  1814                           ;	unspecified, using default values
  1815  200005                     	org	2097157
  1816  200005  FF                 	db	255
  1817                           
  1818                           ;Config register IDLOC6 @ 0x200006
  1819                           ;	unspecified, using default values
  1820  200006                     	org	2097158
  1821  200006  FF                 	db	255
  1822                           
  1823                           ;Config register IDLOC7 @ 0x200007
  1824                           ;	unspecified, using default values
  1825  200007                     	org	2097159
  1826  200007  FF                 	db	255
  1827                           
  1828                           	psect	config
  1829                           
  1830                           ; Padding undefined space
  1831  300000                     	org	3145728
  1832  300000  FF                 	db	255
  1833                           
  1834                           ;Config register CONFIG1H @ 0x300001
  1835                           ;	Oscillator Selection bits
  1836                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  1837                           ;	Fail-Safe Clock Monitor Enable bit
  1838                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1839                           ;	Internal/External Oscillator Switchover bit
  1840                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1841  300001                     	org	3145729
  1842  300001  06                 	db	6
  1843                           
  1844                           ;Config register CONFIG2L @ 0x300002
  1845                           ;	Power-up Timer Enable bit
  1846                           ;	PWRT = ON, PWRT enabled
  1847                           ;	Brown-out Reset Enable bits
  1848                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1849                           ;	Brown Out Reset Voltage bits
  1850                           ;	BORV = 3, Minimum setting
  1851  300002                     	org	3145730
  1852  300002  18                 	db	24
  1853                           
  1854                           ;Config register CONFIG2H @ 0x300003
  1855                           ;	Watchdog Timer Enable bit
  1856                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1857                           ;	Watchdog Timer Postscale Select bits
  1858                           ;	WDTPS = 32768, 1:32768
  1859  300003                     	org	3145731
  1860  300003  1E                 	db	30
  1861                           
  1862                           ; Padding undefined space
  1863  300004                     	org	3145732
  1864  300004  FF                 	db	255
  1865                           
  1866                           ;Config register CONFIG3H @ 0x300005
  1867                           ;	CCP2 MUX bit
  1868                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1869                           ;	PORTB A/D Enable bit
  1870                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1871                           ;	Low-Power Timer1 Oscillator Enable bit
  1872                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1873                           ;	MCLR Pin Enable bit
  1874                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1875  300005                     	org	3145733
  1876  300005  81                 	db	129
  1877                           
  1878                           ;Config register CONFIG4L @ 0x300006
  1879                           ;	Stack Full/Underflow Reset Enable bit
  1880                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1881                           ;	Single-Supply ICSP Enable bit
  1882                           ;	LVP = OFF, Single-Supply ICSP disabled
  1883                           ;	Extended Instruction Set Enable bit
  1884                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1885                           ;	Background Debugger Enable bit
  1886                           ;	DEBUG = 0x1, unprogrammed default
  1887  300006                     	org	3145734
  1888  300006  80                 	db	128
  1889                           
  1890                           ; Padding undefined space
  1891  300007                     	org	3145735
  1892  300007  FF                 	db	255
  1893                           
  1894                           ;Config register CONFIG5L @ 0x300008
  1895                           ;	Code Protection bit
  1896                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1897                           ;	Code Protection bit
  1898                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1899                           ;	Code Protection bit
  1900                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1901                           ;	Code Protection bit
  1902                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1903  300008                     	org	3145736
  1904  300008  0F                 	db	15
  1905                           
  1906                           ;Config register CONFIG5H @ 0x300009
  1907                           ;	Boot Block Code Protection bit
  1908                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1909                           ;	Data EEPROM Code Protection bit
  1910                           ;	CPD = OFF, Data EEPROM not code-protected
  1911  300009                     	org	3145737
  1912  300009  C0                 	db	192
  1913                           
  1914                           ;Config register CONFIG6L @ 0x30000A
  1915                           ;	Write Protection bit
  1916                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1917                           ;	Write Protection bit
  1918                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1919                           ;	Write Protection bit
  1920                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1921                           ;	Write Protection bit
  1922                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1923  30000A                     	org	3145738
  1924  30000A  0F                 	db	15
  1925                           
  1926                           ;Config register CONFIG6H @ 0x30000B
  1927                           ;	Configuration Register Write Protection bit
  1928                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1929                           ;	Boot Block Write Protection bit
  1930                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1931                           ;	Data EEPROM Write Protection bit
  1932                           ;	WRTD = OFF, Data EEPROM not write-protected
  1933  30000B                     	org	3145739
  1934  30000B  E0                 	db	224
  1935                           
  1936                           ;Config register CONFIG7L @ 0x30000C
  1937                           ;	Table Read Protection bit
  1938                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1939                           ;	Table Read Protection bit
  1940                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1941                           ;	Table Read Protection bit
  1942                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1943                           ;	Table Read Protection bit
  1944                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1945  30000C                     	org	3145740
  1946  30000C  0F                 	db	15
  1947                           
  1948                           ;Config register CONFIG7H @ 0x30000D
  1949                           ;	Boot Block Table Read Protection bit
  1950                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1951  30000D                     	org	3145741
  1952  30000D  40                 	db	64
  1953                           tosu	equ	0xFFF
  1954                           tosh	equ	0xFFE
  1955                           tosl	equ	0xFFD
  1956                           stkptr	equ	0xFFC
  1957                           pclatu	equ	0xFFB
  1958                           pclath	equ	0xFFA
  1959                           pcl	equ	0xFF9
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           indf0	equ	0xFEF
  1967                           postinc0	equ	0xFEE
  1968                           postdec0	equ	0xFED
  1969                           preinc0	equ	0xFEC
  1970                           plusw0	equ	0xFEB
  1971                           fsr0h	equ	0xFEA
  1972                           fsr0l	equ	0xFE9
  1973                           wreg	equ	0xFE8
  1974                           indf1	equ	0xFE7
  1975                           postinc1	equ	0xFE6
  1976                           postdec1	equ	0xFE5
  1977                           preinc1	equ	0xFE4
  1978                           plusw1	equ	0xFE3
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           bsr	equ	0xFE0
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           preinc2	equ	0xFDC
  1986                           plusw2	equ	0xFDB
  1987                           fsr2h	equ	0xFDA
  1988                           fsr2l	equ	0xFD9
  1989                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     17      25
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_bcd_down
    _main->_bcd_up
    _bcd_up->___awdiv
    _bcd_down->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4193
                                             12 COMRAM     5     5      0
                           _bcd_down
                             _bcd_up
                           _bin_down
                             _bin_up
                              _delay
                          _grey_down
                            _grey_up
                         _setDisplay
                            _setTask
                              _snake
 ---------------------------------------------------------------------------------
 (1) _snake                                                1     1      0     135
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setTask                                              4     0      4     417
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _setDisplay                                           2     0      2     262
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _grey_up                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _grey_down                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2     168
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _bin_up                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bin_down                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcd_up                                               4     4      0    1227
                                              8 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _bcd_down                                             4     4      0    1227
                                              8 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bcd_down
     ___awdiv
     ___awmod
   _bcd_up
     ___awdiv
     ___awmod
   _bin_down
   _bin_up
   _delay
   _grey_down
   _grey_up
   _setDisplay
   _setTask
   _snake

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     11      19       1       19.7%
BITBIGSFRh          3E      0       0      36        0.0%
BITBIGSFRlh         2A      0       0      37        0.0%
BITBIGSFRllhh        E      0       0      38        0.0%
BITBIGSFRllhl        1      0       0      39        0.0%
BITBIGSFRlll         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      41        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Apr 11 17:16:53 2022

                     l35 F930                       l60 F8CE                       l44 F9B6  
                     l38 F966                       l71 FA8A                       l63 F8F4  
                     l48 FAFC                       l57 F8D4                       l66 F8E4  
                     l76 FA20                       l87 FB78                       l97 FD66  
                     l98 FE58             ___awdiv@sign 0006                      l104 FE54  
                    l375 FCEC                      l388 FC28                      l951 F8D2  
                    l961 F8F2                      l955 F8CC                      l965 F8D6  
                    l967 F8E2                      l959 F8E6                      l995 FB00  
                    l997 FB10                      l999 FB18                      u240 FB10  
                    u241 FB0C                      u250 FB2A                      u251 FB26  
                    u260 FB3C                      u261 FB38                      u270 FB6A  
                    u271 FB66                      u520 FC3C                      u600 FBC0  
                    u521 FC38                      u601 FBBC                      u530 FC56  
                    u610 FBDE                      u531 FC52                      u611 FBDA  
                    u540 FC7C                      u620 FBF4                      u700 FAD2  
                    u541 FC78                      u621 FBF0                      u701 FACE  
                    u550 FC9A                      u630 FC18                      u710 FAE6  
                    u551 FC96                      u631 FC14                      u711 FAE2  
                    u560 FCB6                      u640 F94C                      u720 FAFA  
                    u800 FDCE                      u561 FCB2                      u641 F948  
                    u721 FAF6                      u801 FDCA                      u570 FCDC  
                    u730 FA32                      u650 F966                      u810 FDE8  
                    u571 FCD8                      u731 FA2E                      u651 F962  
                    u811 FDE4                      u580 FB8C                      u740 F9C8  
                    u660 F988                      u900 FF02                      u820 FE04  
                    u581 FB88                      u741 F9C4                      u661 F984  
                    u901 FEFE                      u821 FE00                      u590 FBA6  
                    u670 F9A6                      u910 FF1A                      u830 FE20  
                    u750 FD46                      u591 FBA2                      u671 F9A2  
                    u911 FF16                      u831 FE1C                      u751 FD42  
                    u680 FAA0                      u920 FF30                      u840 FE40  
                    u760 FD54                      u681 FA9C                      u921 FF2C  
                    u841 FE3C                      u761 FD50                      u690 FABA  
                    u930 FF50                      u850 FE66                      u770 FD66  
                    u691 FAB6                      u931 FF4C                      u851 FE62  
                    u771 FD62                      u940 FF70                      u860 FEA2  
                    u780 FD74                      u941 FF6C                      u861 FE9E  
                    u781 FD70                      u950 FF90                      u870 FEBA  
                    u790 FDB2                      u951 FF8C                      u871 FEB6  
                    u791 FDAE                      u960 FFB0                      u880 FED2  
                    u961 FFAC                      u881 FECE                      u970 FFCE  
                    u890 FEEA                      u971 FFCA                      u891 FEE6  
                    u980 FFEC                      u981 FFE8                      _bcd 0016  
                    _sum 0014             ___awmod@sign 0006                     l1001 FB2A  
                   l1011 FB6A                     l1003 FB3C                     l1005 FB44  
                   l1007 FB4E              main@display 000F                     l1009 FB58  
                   l1017 FB76                     l1131 FC48                     l1123 FC2A  
                   l1211 F93A                     l1203 F920                     l1141 FC7C  
                   l1133 FC56                     l1125 FC2E                     l1213 F93C  
                   l1205 F92C                     l1221 F988                     l1301 FDB2  
                   l1151 FCB6                     l1143 FC84                     l1135 FC5E  
                   l1127 FC3C                     l1215 F94C                     l1231 FA8C  
                   l1223 F994                     l1311 FDF0                     l1303 FDBA  
                   l1161 FCDC                     l1153 FCBE                     l1145 FC8C  
                   l1137 FC62                     l1129 FC44                     l1217 F950  
                   l1241 FABA                     l1233 FAA0                     l1225 F9A6  
                   l1321 FE40                     l1313 FE04                     l1305 FDCE  
                   l1163 FCE4                     l1155 FCC0                     l1147 FC9A  
                   l1139 FC6A                     l1171 FB8C                     l1251 FAE6  
                   l1227 F9AE                     l1219 F968                     l1323 FE66  
                   l1315 FE0C                     l1307 FDD4                     l1157 FCC6  
                   l1149 FCA0                     l1181 FBC0                     l1173 FB94  
                   l1261 FA3A                     l1253 FAFA                     l1341 FEEE  
                   l1333 FEBE                     l1325 FE8E                     l1317 FE20  
                   l1309 FDE8                     l1159 FCCC                     l1191 FBFC  
                   l1183 FBC8                     l1175 FB98                     l1167 FB7A  
                   l1271 F9C8                     l1263 FA84                     l1247 FAC0  
                   l1239 FAA6                     l1351 FF30                     l1319 FE2C  
                   l1193 FC02                     l1185 FBD0                     l1177 FBA6  
                   l1169 FB7E                     l1273 F9D0                     l1265 FA88  
                   l1257 FA22                     l1249 FAD2                     l1361 FF7C  
                   l1353 FF3C                     l1345 FF06                     l1337 FED6  
                   l1329 FEA6                     l1281 FCEE                     l1187 FBDE  
                   l1195 FC08                     l1179 FBAE                     l1275 FA1A  
                   l1259 FA32                     l1371 FFCE                     l1363 FF90  
                   l1355 FF50                     l1291 FD38                     l1283 FD16  
                   l1197 FC18                     l1189 FBF4                     l1277 FA1E  
                   l1269 F9B8                     l1373 FFD8                     l1365 FF9C  
                   l1357 FF5C                     l1349 FF1E                     l1293 FD46  
                   l1285 FD1A                     l1199 FC20                     l1375 FFEC  
                   l1367 FFB0                     l1359 FF70                     l1295 FD54  
                   l1287 FD26                     l1377 FFF8                     l1369 FFBA  
                   l1297 FD74                     l1289 FD32                     l1299 FD9E  
                   _main FCEE                     _grey 0017                     start 0000  
           ___param_bank 000000                    ?_main 0001          __end_of___awdiv FCEE  
        __end_of___awmod FC2A          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _PORTB 000F81                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96                    _added 0012                    _delay F920  
        __end_of_grey_up F8F6                    _snake FAFE                    main@i 000D  
        __end_of_setTask F9B8                    tablat 000FF5                    status 000FD8  
        __initialization F8F6             __end_of_main 0000                   ??_main 000D  
          __activetblptr 000000                   ?_delay 0001                   _ADCON1 000FC1  
       ___awdiv@dividend 0001                   ?_snake 0001         __end_of_bcd_down FA22  
       __end_of_bin_down F8D0                   _bcd_up FA22                ??___awdiv 0005  
              ??___awmod 0005                   _bin_up F8D0                   delay@i 0003  
                 delay@j 0005         ___awdiv@quotient 0007          ___awmod@divisor 0003  
                 isa$std 000001          ___awmod@counter 0005                ??_grey_up 0001  
           __pdataCOMRAM 0018                ??_setTask 0005                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization F91A            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_delay F968            __end_of_snake FB7A                  ??_delay 0003  
                ??_snake 0001                  ?_bcd_up 0001                  ?_bin_up 0001  
              ?_bcd_down 0001                ?_bin_down 0001              setTask@task 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv FC2A  
                ___awmod FB7A                  __pcinit F8F6                  __ramtop 1000  
                __ptext0 FCEE                  __ptext1 FAFE                  __ptext2 F968  
                __ptext3 FA8C                  __ptext4 F8E6                  __ptext5 F8D6  
                __ptext6 F920                  __ptext7 F8D0                  __ptext8 F8CA  
                __ptext9 FA22               ??_bcd_down 0009        __end_of_grey_down F8E6  
                _grey_up F8E6                  delay@ms 0001         ___awmod@dividend 0001  
             ??_bin_down 0001                  _setTask F968               _setDisplay FA8C  
   end_of_initialization F91A            setTask@change 0003                _PORTBbits 000F81  
          bin_up@display 0001           __end_of_bcd_up FA8C           __end_of_bin_up F8D6  
          __pidataCOMRAM F8C8      start_initialization F8F6              ?_setDisplay 0001  
       grey_down@display 0001                 ??_bcd_up 0009                 ??_bin_up 0001  
            __pbssCOMRAM 0012           setDisplay@task 0001                 ?___awdiv 0001  
               ?___awmod 0001                _direction 0018                 ?_grey_up 0001  
               ?_setTask 0001           grey_up@display 0001                _grey_down F8D6  
             ?_grey_down 0001            bcd_up@display 000B                 __Hrparam 0000  
               __Lrparam 0000                 _bcd_down F9B8                 _bin_down F8CA  
               __ptext10 F9B8                 __ptext11 FB7A                 __ptext12 FC2A  
           ??_setDisplay 0003             snake@display 0001                 isa$xinst 000000  
               main@task 0010       __end_of_setDisplay FAFE              ??_grey_down 0001  
        bin_down@display 0001          bcd_down@display 000B  
