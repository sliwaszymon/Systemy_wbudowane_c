

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Apr 11 17:32:54 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    28  0000                     
    29                           ; Version 2.40
    30                           ; Generated 17/11/2021 GMT
    31                           ; 
    32                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4620 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  00F842                     __pidataCOMRAM:
    67                           	callstack 0
    68                           
    69                           ;initializer for _direction
    70  00F842  0001               	dw	1
    71  0000                     _PORTBbits	set	3969
    72  0000                     _PORTB	set	3969
    73  0000                     _TRISA	set	3986
    74  0000                     _ADCON1	set	4033
    75  0000                     _TRISE	set	3990
    76  0000                     _TRISD	set	3989
    77  0000                     _TRISC	set	3988
    78  0000                     _TRISB	set	3987
    79  0000                     _PORTD	set	3971
    80                           
    81                           ; #config settings
    82                           
    83                           	psect	cinit
    84  00F870                     __pcinit:
    85                           	callstack 0
    86  00F870                     start_initialization:
    87                           	callstack 0
    88  00F870                     __initialization:
    89                           	callstack 0
    90                           
    91                           ; Initialize objects allocated to COMRAM (2 bytes)
    92                           ; load TBLPTR registers with __pidataCOMRAM
    93  00F870  0E42               	movlw	low __pidataCOMRAM
    94  00F872  6EF6               	movwf	tblptrl,c
    95  00F874  0EF8               	movlw	high __pidataCOMRAM
    96  00F876  6EF7               	movwf	tblptrh,c
    97  00F878  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    98  00F87A  6EF8               	movwf	tblptru,c
    99  00F87C  0009               	tblrd		*+	;fetch initializer
   100  00F87E  CFF5 F018          	movff	tablat,__pdataCOMRAM
   101  00F882  0009               	tblrd		*+	;fetch initializer
   102  00F884  CFF5 F019          	movff	tablat,__pdataCOMRAM+1
   103                           
   104                           ; Clear objects allocated to COMRAM (6 bytes)
   105  00F888  6A17               	clrf	(__pbssCOMRAM+5)& (0+255),c
   106  00F88A  6A16               	clrf	(__pbssCOMRAM+4)& (0+255),c
   107  00F88C  6A15               	clrf	(__pbssCOMRAM+3)& (0+255),c
   108  00F88E  6A14               	clrf	(__pbssCOMRAM+2)& (0+255),c
   109  00F890  6A13               	clrf	(__pbssCOMRAM+1)& (0+255),c
   110  00F892  6A12               	clrf	__pbssCOMRAM& (0+255),c
   111  00F894                     end_of_initialization:
   112                           	callstack 0
   113  00F894                     __end_of__initialization:
   114                           	callstack 0
   115  00F894  0100               	movlb	0
   116  00F896  EF69  F07E         	goto	_main	;jump to C main() function
   117                           
   118                           	psect	bssCOMRAM
   119  000012                     __pbssCOMRAM:
   120                           	callstack 0
   121  000012                     _added:
   122                           	callstack 0
   123  000012                     	ds	2
   124  000014                     _sum:
   125                           	callstack 0
   126  000014                     	ds	2
   127  000016                     _bcd:
   128                           	callstack 0
   129  000016                     	ds	1
   130  000017                     _grey:
   131                           	callstack 0
   132  000017                     	ds	1
   133                           
   134                           	psect	dataCOMRAM
   135  000018                     __pdataCOMRAM:
   136                           	callstack 0
   137  000018                     _direction:
   138                           	callstack 0
   139  000018                     	ds	2
   140                           
   141                           	psect	cstackCOMRAM
   142  000001                     __pcstackCOMRAM:
   143                           	callstack 0
   144  000001                     ??_prng:
   145  000001                     ?_setTask:
   146                           	callstack 0
   147  000001                     ?___awdiv:
   148                           	callstack 0
   149  000001                     ?___awmod:
   150                           	callstack 0
   151  000001                     bin_up@display:
   152                           	callstack 0
   153  000001                     bin_down@display:
   154                           	callstack 0
   155  000001                     grey_up@display:
   156                           	callstack 0
   157  000001                     grey_down@display:
   158                           	callstack 0
   159  000001                     snake@display:
   160                           	callstack 0
   161  000001                     delay@ms:
   162                           	callstack 0
   163  000001                     setTask@task:
   164                           	callstack 0
   165  000001                     setDisplay@task:
   166                           	callstack 0
   167  000001                     ___awdiv@dividend:
   168                           	callstack 0
   169  000001                     ___awmod@dividend:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x0
   173  000001                     	ds	2
   174  000003                     delay@i:
   175                           	callstack 0
   176  000003                     setTask@change:
   177                           	callstack 0
   178  000003                     ___awdiv@divisor:
   179                           	callstack 0
   180  000003                     ___awmod@divisor:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x2
   184  000003                     	ds	2
   185  000005                     delay@j:
   186                           	callstack 0
   187  000005                     ___awdiv@counter:
   188                           	callstack 0
   189  000005                     ___awmod@counter:
   190                           	callstack 0
   191                           
   192                           ; 1 bytes @ 0x4
   193  000005                     	ds	1
   194  000006                     ___awdiv@sign:
   195                           	callstack 0
   196  000006                     ___awmod@sign:
   197                           	callstack 0
   198  000006                     prng@ans:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x5
   202  000006                     	ds	1
   203  000007                     ___awdiv@quotient:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x6
   207  000007                     	ds	1
   208  000008                     prng@xored:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x7
   212  000008                     	ds	1
   213  000009                     ??_bcd_up:
   214  000009                     ??_bcd_down:
   215                           
   216                           ; 1 bytes @ 0x8
   217  000009                     	ds	1
   218  00000A                     prng@display:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x9
   222  00000A                     	ds	1
   223  00000B                     bcd_up@display:
   224                           	callstack 0
   225  00000B                     bcd_down@display:
   226                           	callstack 0
   227                           
   228                           ; 2 bytes @ 0xA
   229  00000B                     	ds	2
   230  00000D                     main@i:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0xC
   234  00000D                     	ds	2
   235  00000F                     main@display:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0xE
   239  00000F                     	ds	1
   240  000010                     main@task:
   241                           	callstack 0
   242                           
   243                           ; 2 bytes @ 0xF
   244  000010                     	ds	2
   245                           
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 173 in file "main.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;  i               2   12[COMRAM] unsigned int 
   256 ;;  task            2   15[COMRAM] int 
   257 ;;  display         1   14[COMRAM] unsigned char 
   258 ;; Return value:  Size  Location     Type
   259 ;;                  1    wreg      void 
   260 ;; Registers used:
   261 ;;		wreg, status,2, status,0, cstack
   262 ;; Tracked objects:
   263 ;;		On entry : 0/0
   264 ;;		On exit  : 0/0
   265 ;;		Unchanged: 0/0
   266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   268 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   270 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   271 ;;Total ram usage:        5 bytes
   272 ;; Hardware stack levels required when called: 2
   273 ;; This function calls:
   274 ;;		_bcd_down
   275 ;;		_bcd_up
   276 ;;		_bin_down
   277 ;;		_bin_up
   278 ;;		_delay
   279 ;;		_grey_down
   280 ;;		_grey_up
   281 ;;		_prng
   282 ;;		_setDisplay
   283 ;;		_setTask
   284 ;;		_snake
   285 ;; This function is called by:
   286 ;;		Startup code after reset
   287 ;; This function uses a non-reentrant model
   288 ;;
   289                           
   290                           	psect	text0
   291  00FCD2                     __ptext0:
   292                           	callstack 0
   293  00FCD2                     _main:
   294                           	callstack 29
   295  00FCD2                     
   296                           ;main.c: 174:     ADCON1=0x0F;
   297  00FCD2  0E0F               	movlw	15
   298  00FCD4  6EC1               	movwf	193,c	;volatile
   299                           
   300                           ;main.c: 176:     TRISA=0xC3;
   301  00FCD6  0EC3               	movlw	195
   302  00FCD8  6E92               	movwf	146,c	;volatile
   303                           
   304                           ;main.c: 177:     TRISB=0x3F;
   305  00FCDA  0E3F               	movlw	63
   306  00FCDC  6E93               	movwf	147,c	;volatile
   307                           
   308                           ;main.c: 178:     TRISC=0x01;
   309  00FCDE  0E01               	movlw	1
   310  00FCE0  6E94               	movwf	148,c	;volatile
   311                           
   312                           ;main.c: 179:     TRISD=0x00;
   313  00FCE2  0E00               	movlw	0
   314  00FCE4  6E95               	movwf	149,c	;volatile
   315                           
   316                           ;main.c: 180:     TRISE=0x00;
   317  00FCE6  0E00               	movlw	0
   318  00FCE8  6E96               	movwf	150,c	;volatile
   319                           
   320                           ;main.c: 182:     PORTB = 0;
   321  00FCEA  0E00               	movlw	0
   322  00FCEC  6E81               	movwf	129,c	;volatile
   323                           
   324                           ;main.c: 184:     unsigned char display = 0;
   325  00FCEE  0E00               	movlw	0
   326  00FCF0  6E0F               	movwf	main@display^0,c
   327                           
   328                           ;main.c: 185:     int task = 1;
   329  00FCF2  0E00               	movlw	0
   330  00FCF4  6E11               	movwf	(main@task+1)^0,c
   331  00FCF6  0E01               	movlw	1
   332  00FCF8  6E10               	movwf	main@task^0,c
   333  00FCFA                     l1290:
   334                           
   335                           ;main.c: 188:         PORTD = display;
   336  00FCFA  C00F  FF83         	movff	main@display,3971	;volatile
   337  00FCFE                     
   338                           ;main.c: 189:         delay(100);
   339  00FCFE  0E00               	movlw	0
   340  00FD00  6E02               	movwf	(delay@ms+1)^0,c
   341  00FD02  0E64               	movlw	100
   342  00FD04  6E01               	movwf	delay@ms^0,c
   343  00FD06  EC4D  F07C         	call	_delay	;wreg free
   344  00FD0A                     
   345                           ;main.c: 192:         unsigned int i = 6000;
   346  00FD0A  0E17               	movlw	23
   347  00FD0C  6E0E               	movwf	(main@i+1)^0,c
   348  00FD0E  0E70               	movlw	112
   349  00FD10  6E0D               	movwf	main@i^0,c
   350                           
   351                           ;main.c: 193:         while (PORTBbits.RB4 && PORTBbits.RB3 && i > 0) {
   352  00FD12  EF8E  F07E         	goto	l1298
   353  00FD16                     l1296:
   354                           
   355                           ;main.c: 194:             i--;
   356  00FD16  060D               	decf	main@i^0,f,c
   357  00FD18  A0D8               	btfss	status,0,c
   358  00FD1A  060E               	decf	(main@i+1)^0,f,c
   359  00FD1C                     l1298:
   360                           
   361                           ;main.c: 193:         while (PORTBbits.RB4 && PORTBbits.RB3 && i > 0) {
   362  00FD1C  A881               	btfss	129,4,c	;volatile
   363  00FD1E  EF93  F07E         	goto	u781
   364  00FD22  EF95  F07E         	goto	u780
   365  00FD26                     u781:
   366  00FD26  EFA5  F07E         	goto	l100
   367  00FD2A                     u780:
   368  00FD2A  A681               	btfss	129,3,c	;volatile
   369  00FD2C  EF9A  F07E         	goto	u791
   370  00FD30  EF9C  F07E         	goto	u790
   371  00FD34                     u791:
   372  00FD34  EFA5  F07E         	goto	l100
   373  00FD38                     u790:
   374  00FD38  500D               	movf	main@i^0,w,c
   375  00FD3A  100E               	iorwf	(main@i+1)^0,w,c
   376  00FD3C  A4D8               	btfss	status,2,c
   377  00FD3E  EFA3  F07E         	goto	u801
   378  00FD42  EFA5  F07E         	goto	u800
   379  00FD46                     u801:
   380  00FD46  EF8B  F07E         	goto	l1296
   381  00FD4A                     u800:
   382  00FD4A                     l100:
   383                           
   384                           ;main.c: 196:         if (PORTBbits.RB3 == 0) {
   385  00FD4A  B681               	btfsc	129,3,c	;volatile
   386  00FD4C  EFAA  F07E         	goto	u811
   387  00FD50  EFAC  F07E         	goto	u810
   388  00FD54                     u811:
   389  00FD54  EF1E  F07F         	goto	l101
   390  00FD58                     u810:
   391  00FD58                     
   392                           ;main.c: 197:             task = setTask(task, 1);
   393  00FD58  C010  F001         	movff	main@task,setTask@task
   394  00FD5C  C011  F002         	movff	main@task+1,setTask@task+1
   395  00FD60  0E00               	movlw	0
   396  00FD62  6E04               	movwf	(setTask@change+1)^0,c
   397  00FD64  0E01               	movlw	1
   398  00FD66  6E03               	movwf	setTask@change^0,c
   399  00FD68  EC71  F07C         	call	_setTask	;wreg free
   400  00FD6C  C001  F010         	movff	?_setTask,main@task
   401  00FD70  C002  F011         	movff	?_setTask+1,main@task+1
   402                           
   403                           ;main.c: 198:             display = setDisplay(task);
   404  00FD74  C010  F001         	movff	main@task,setDisplay@task
   405  00FD78  C011  F002         	movff	main@task+1,setDisplay@task+1
   406  00FD7C  EC38  F07D         	call	_setDisplay	;wreg free
   407  00FD80  6E0F               	movwf	main@display^0,c
   408  00FD82                     
   409                           ;main.c: 199:             if (task == 3) {
   410  00FD82  0E03               	movlw	3
   411  00FD84  1810               	xorwf	main@task^0,w,c
   412  00FD86  1011               	iorwf	(main@task+1)^0,w,c
   413  00FD88  A4D8               	btfss	status,2,c
   414  00FD8A  EFC9  F07E         	goto	u821
   415  00FD8E  EFCB  F07E         	goto	u820
   416  00FD92                     u821:
   417  00FD92  EFCF  F07E         	goto	l1310
   418  00FD96                     u820:
   419  00FD96                     l1308:
   420                           
   421                           ;main.c: 200:                 grey = 1;
   422  00FD96  0E01               	movlw	1
   423  00FD98  6E17               	movwf	_grey^0,c
   424                           
   425                           ;main.c: 201:             } else if (task == 4) {
   426  00FD9A  EF81  F07F         	goto	l1356
   427  00FD9E                     l1310:
   428  00FD9E  0E04               	movlw	4
   429  00FDA0  1810               	xorwf	main@task^0,w,c
   430  00FDA2  1011               	iorwf	(main@task+1)^0,w,c
   431  00FDA4  A4D8               	btfss	status,2,c
   432  00FDA6  EFD7  F07E         	goto	u831
   433  00FDAA  EFD9  F07E         	goto	u830
   434  00FDAE                     u831:
   435  00FDAE  EFDC  F07E         	goto	l1314
   436  00FDB2                     u830:
   437  00FDB2                     l1312:
   438                           
   439                           ;main.c: 202:                 grey = 255;
   440  00FDB2  6817               	setf	_grey^0,c
   441                           
   442                           ;main.c: 203:             } else if (task == 5) {
   443  00FDB4  EF81  F07F         	goto	l1356
   444  00FDB8                     l1314:
   445  00FDB8  0E05               	movlw	5
   446  00FDBA  1810               	xorwf	main@task^0,w,c
   447  00FDBC  1011               	iorwf	(main@task+1)^0,w,c
   448  00FDBE  A4D8               	btfss	status,2,c
   449  00FDC0  EFE4  F07E         	goto	u841
   450  00FDC4  EFE6  F07E         	goto	u840
   451  00FDC8                     u841:
   452  00FDC8  EFEA  F07E         	goto	l1318
   453  00FDCC                     u840:
   454  00FDCC                     l1316:
   455                           
   456                           ;main.c: 204:                 bcd = 0;
   457  00FDCC  0E00               	movlw	0
   458  00FDCE  6E16               	movwf	_bcd^0,c
   459                           
   460                           ;main.c: 205:             } else if (task == 6) {
   461  00FDD0  EF81  F07F         	goto	l1356
   462  00FDD4                     l1318:
   463  00FDD4  0E06               	movlw	6
   464  00FDD6  1810               	xorwf	main@task^0,w,c
   465  00FDD8  1011               	iorwf	(main@task+1)^0,w,c
   466  00FDDA  A4D8               	btfss	status,2,c
   467  00FDDC  EFF2  F07E         	goto	u851
   468  00FDE0  EFF4  F07E         	goto	u850
   469  00FDE4                     u851:
   470  00FDE4  EFF8  F07E         	goto	l1322
   471  00FDE8                     u850:
   472  00FDE8                     l1320:
   473                           
   474                           ;main.c: 206:                 bcd = 99;
   475  00FDE8  0E63               	movlw	99
   476  00FDEA  6E16               	movwf	_bcd^0,c
   477                           
   478                           ;main.c: 207:             } else if (task == 7) {
   479  00FDEC  EF81  F07F         	goto	l1356
   480  00FDF0                     l1322:
   481  00FDF0  0E07               	movlw	7
   482  00FDF2  1810               	xorwf	main@task^0,w,c
   483  00FDF4  1011               	iorwf	(main@task+1)^0,w,c
   484  00FDF6  A4D8               	btfss	status,2,c
   485  00FDF8  EF00  F07F         	goto	u861
   486  00FDFC  EF02  F07F         	goto	u860
   487  00FE00                     u861:
   488  00FE00  EF08  F07F         	goto	l1326
   489  00FE04                     u860:
   490  00FE04                     l1324:
   491                           
   492                           ;main.c: 208:                 direction = 1;
   493  00FE04  0E00               	movlw	0
   494  00FE06  6E19               	movwf	(_direction+1)^0,c
   495  00FE08  0E01               	movlw	1
   496  00FE0A  6E18               	movwf	_direction^0,c
   497                           
   498                           ;main.c: 209:             } else if (task == 8) {
   499  00FE0C  EF81  F07F         	goto	l1356
   500  00FE10                     l1326:
   501  00FE10  0E08               	movlw	8
   502  00FE12  1810               	xorwf	main@task^0,w,c
   503  00FE14  1011               	iorwf	(main@task+1)^0,w,c
   504  00FE16  A4D8               	btfss	status,2,c
   505  00FE18  EF10  F07F         	goto	u871
   506  00FE1C  EF12  F07F         	goto	u870
   507  00FE20                     u871:
   508  00FE20  EF1C  F07F         	goto	l107
   509  00FE24                     u870:
   510  00FE24                     l1328:
   511                           
   512                           ;main.c: 210:                 sum = 0;
   513  00FE24  0E00               	movlw	0
   514  00FE26  6E15               	movwf	(_sum+1)^0,c
   515  00FE28  0E00               	movlw	0
   516  00FE2A  6E14               	movwf	_sum^0,c
   517                           
   518                           ;main.c: 211:                 added = 0;
   519  00FE2C  0E00               	movlw	0
   520  00FE2E  6E13               	movwf	(_added+1)^0,c
   521  00FE30  0E00               	movlw	0
   522  00FE32  6E12               	movwf	_added^0,c
   523  00FE34  EF81  F07F         	goto	l1356
   524  00FE38                     l107:
   525  00FE38  EF81  F07F         	goto	l1356
   526  00FE3C                     l101:
   527  00FE3C  B881               	btfsc	129,4,c	;volatile
   528  00FE3E  EF23  F07F         	goto	u881
   529  00FE42  EF25  F07F         	goto	u880
   530  00FE46                     u881:
   531  00FE46  EF81  F07F         	goto	l1356
   532  00FE4A                     u880:
   533  00FE4A                     
   534                           ;main.c: 214:             task = setTask(task, -1);
   535  00FE4A  C010  F001         	movff	main@task,setTask@task
   536  00FE4E  C011  F002         	movff	main@task+1,setTask@task+1
   537  00FE52  0EFF               	movlw	255
   538  00FE54  6E04               	movwf	(setTask@change+1)^0,c
   539  00FE56  6803               	setf	setTask@change^0,c
   540  00FE58  EC71  F07C         	call	_setTask	;wreg free
   541  00FE5C  C001  F010         	movff	?_setTask,main@task
   542  00FE60  C002  F011         	movff	?_setTask+1,main@task+1
   543                           
   544                           ;main.c: 215:             display = setDisplay(task);
   545  00FE64  C010  F001         	movff	main@task,setDisplay@task
   546  00FE68  C011  F002         	movff	main@task+1,setDisplay@task+1
   547  00FE6C  EC38  F07D         	call	_setDisplay	;wreg free
   548  00FE70  6E0F               	movwf	main@display^0,c
   549  00FE72                     
   550                           ;main.c: 216:             if (task == 3) {
   551  00FE72  0E03               	movlw	3
   552  00FE74  1810               	xorwf	main@task^0,w,c
   553  00FE76  1011               	iorwf	(main@task+1)^0,w,c
   554  00FE78  A4D8               	btfss	status,2,c
   555  00FE7A  EF41  F07F         	goto	u891
   556  00FE7E  EF43  F07F         	goto	u890
   557  00FE82                     u891:
   558  00FE82  EF45  F07F         	goto	l1336
   559  00FE86                     u890:
   560  00FE86  EFCB  F07E         	goto	l1308
   561  00FE8A                     l1336:
   562  00FE8A  0E04               	movlw	4
   563  00FE8C  1810               	xorwf	main@task^0,w,c
   564  00FE8E  1011               	iorwf	(main@task+1)^0,w,c
   565  00FE90  A4D8               	btfss	status,2,c
   566  00FE92  EF4D  F07F         	goto	u901
   567  00FE96  EF4F  F07F         	goto	u900
   568  00FE9A                     u901:
   569  00FE9A  EF51  F07F         	goto	l1340
   570  00FE9E                     u900:
   571  00FE9E  EFD9  F07E         	goto	l1312
   572  00FEA2                     l1340:
   573  00FEA2  0E05               	movlw	5
   574  00FEA4  1810               	xorwf	main@task^0,w,c
   575  00FEA6  1011               	iorwf	(main@task+1)^0,w,c
   576  00FEA8  A4D8               	btfss	status,2,c
   577  00FEAA  EF59  F07F         	goto	u911
   578  00FEAE  EF5B  F07F         	goto	u910
   579  00FEB2                     u911:
   580  00FEB2  EF5D  F07F         	goto	l1344
   581  00FEB6                     u910:
   582  00FEB6  EFE6  F07E         	goto	l1316
   583  00FEBA                     l1344:
   584  00FEBA  0E06               	movlw	6
   585  00FEBC  1810               	xorwf	main@task^0,w,c
   586  00FEBE  1011               	iorwf	(main@task+1)^0,w,c
   587  00FEC0  A4D8               	btfss	status,2,c
   588  00FEC2  EF65  F07F         	goto	u921
   589  00FEC6  EF67  F07F         	goto	u920
   590  00FECA                     u921:
   591  00FECA  EF69  F07F         	goto	l1348
   592  00FECE                     u920:
   593  00FECE  EFF4  F07E         	goto	l1320
   594  00FED2                     l1348:
   595  00FED2  0E07               	movlw	7
   596  00FED4  1810               	xorwf	main@task^0,w,c
   597  00FED6  1011               	iorwf	(main@task+1)^0,w,c
   598  00FED8  A4D8               	btfss	status,2,c
   599  00FEDA  EF71  F07F         	goto	u931
   600  00FEDE  EF73  F07F         	goto	u930
   601  00FEE2                     u931:
   602  00FEE2  EF75  F07F         	goto	l1352
   603  00FEE6                     u930:
   604  00FEE6  EF02  F07F         	goto	l1324
   605  00FEEA                     l1352:
   606  00FEEA  0E08               	movlw	8
   607  00FEEC  1810               	xorwf	main@task^0,w,c
   608  00FEEE  1011               	iorwf	(main@task+1)^0,w,c
   609  00FEF0  A4D8               	btfss	status,2,c
   610  00FEF2  EF7D  F07F         	goto	u941
   611  00FEF6  EF7F  F07F         	goto	u940
   612  00FEFA                     u941:
   613  00FEFA  EF1C  F07F         	goto	l107
   614  00FEFE                     u940:
   615  00FEFE  EF12  F07F         	goto	l1328
   616  00FF02                     l1356:
   617                           
   618                           ;main.c: 232:         if (task == 1) {
   619  00FF02  0410               	decf	main@task^0,w,c
   620  00FF04  1011               	iorwf	(main@task+1)^0,w,c
   621  00FF06  A4D8               	btfss	status,2,c
   622  00FF08  EF88  F07F         	goto	u951
   623  00FF0C  EF8A  F07F         	goto	u950
   624  00FF10                     u951:
   625  00FF10  EF90  F07F         	goto	l1360
   626  00FF14                     u950:
   627  00FF14                     
   628                           ;main.c: 233:             display = bin_up(display);
   629  00FF14  500F               	movf	main@display^0,w,c
   630  00FF16  EC25  F07C         	call	_bin_up
   631  00FF1A  6E0F               	movwf	main@display^0,c
   632                           
   633                           ;main.c: 234:         } else if (task == 2) {
   634  00FF1C  EF7D  F07E         	goto	l1290
   635  00FF20                     l1360:
   636  00FF20  0E02               	movlw	2
   637  00FF22  1810               	xorwf	main@task^0,w,c
   638  00FF24  1011               	iorwf	(main@task+1)^0,w,c
   639  00FF26  A4D8               	btfss	status,2,c
   640  00FF28  EF98  F07F         	goto	u961
   641  00FF2C  EF9A  F07F         	goto	u960
   642  00FF30                     u961:
   643  00FF30  EFA0  F07F         	goto	l1364
   644  00FF34                     u960:
   645  00FF34                     
   646                           ;main.c: 235:             display = bin_down(display);
   647  00FF34  500F               	movf	main@display^0,w,c
   648  00FF36  EC22  F07C         	call	_bin_down
   649  00FF3A  6E0F               	movwf	main@display^0,c
   650                           
   651                           ;main.c: 236:         } else if (task == 3) {
   652  00FF3C  EF7D  F07E         	goto	l1290
   653  00FF40                     l1364:
   654  00FF40  0E03               	movlw	3
   655  00FF42  1810               	xorwf	main@task^0,w,c
   656  00FF44  1011               	iorwf	(main@task+1)^0,w,c
   657  00FF46  A4D8               	btfss	status,2,c
   658  00FF48  EFA8  F07F         	goto	u971
   659  00FF4C  EFAA  F07F         	goto	u970
   660  00FF50                     u971:
   661  00FF50  EFB0  F07F         	goto	l1368
   662  00FF54                     u970:
   663  00FF54                     
   664                           ;main.c: 237:             display = grey_up(display);
   665  00FF54  500F               	movf	main@display^0,w,c
   666  00FF56  EC30  F07C         	call	_grey_up
   667  00FF5A  6E0F               	movwf	main@display^0,c
   668                           
   669                           ;main.c: 238:         } else if (task == 4) {
   670  00FF5C  EF7D  F07E         	goto	l1290
   671  00FF60                     l1368:
   672  00FF60  0E04               	movlw	4
   673  00FF62  1810               	xorwf	main@task^0,w,c
   674  00FF64  1011               	iorwf	(main@task+1)^0,w,c
   675  00FF66  A4D8               	btfss	status,2,c
   676  00FF68  EFB8  F07F         	goto	u981
   677  00FF6C  EFBA  F07F         	goto	u980
   678  00FF70                     u981:
   679  00FF70  EFC0  F07F         	goto	l1372
   680  00FF74                     u980:
   681  00FF74                     
   682                           ;main.c: 239:             display = grey_down(display);
   683  00FF74  500F               	movf	main@display^0,w,c
   684  00FF76  EC28  F07C         	call	_grey_down
   685  00FF7A  6E0F               	movwf	main@display^0,c
   686                           
   687                           ;main.c: 240:         } else if (task == 5) {
   688  00FF7C  EF7D  F07E         	goto	l1290
   689  00FF80                     l1372:
   690  00FF80  0E05               	movlw	5
   691  00FF82  1810               	xorwf	main@task^0,w,c
   692  00FF84  1011               	iorwf	(main@task+1)^0,w,c
   693  00FF86  A4D8               	btfss	status,2,c
   694  00FF88  EFC8  F07F         	goto	u991
   695  00FF8C  EFCA  F07F         	goto	u990
   696  00FF90                     u991:
   697  00FF90  EFCF  F07F         	goto	l1376
   698  00FF94                     u990:
   699  00FF94                     
   700                           ;main.c: 241:             display = bcd_up();
   701  00FF94  ECCE  F07C         	call	_bcd_up	;wreg free
   702  00FF98  6E0F               	movwf	main@display^0,c
   703                           
   704                           ;main.c: 242:         } else if (task == 6) {
   705  00FF9A  EF7D  F07E         	goto	l1290
   706  00FF9E                     l1376:
   707  00FF9E  0E06               	movlw	6
   708  00FFA0  1810               	xorwf	main@task^0,w,c
   709  00FFA2  1011               	iorwf	(main@task+1)^0,w,c
   710  00FFA4  A4D8               	btfss	status,2,c
   711  00FFA6  EFD7  F07F         	goto	u1001
   712  00FFAA  EFD9  F07F         	goto	u1000
   713  00FFAE                     u1001:
   714  00FFAE  EFDE  F07F         	goto	l1380
   715  00FFB2                     u1000:
   716  00FFB2                     
   717                           ;main.c: 243:             display = bcd_down();
   718  00FFB2  EC99  F07C         	call	_bcd_down	;wreg free
   719  00FFB6  6E0F               	movwf	main@display^0,c
   720                           
   721                           ;main.c: 244:         } else if (task == 7) {
   722  00FFB8  EF7D  F07E         	goto	l1290
   723  00FFBC                     l1380:
   724  00FFBC  0E07               	movlw	7
   725  00FFBE  1810               	xorwf	main@task^0,w,c
   726  00FFC0  1011               	iorwf	(main@task+1)^0,w,c
   727  00FFC2  A4D8               	btfss	status,2,c
   728  00FFC4  EFE6  F07F         	goto	u1011
   729  00FFC8  EFE8  F07F         	goto	u1010
   730  00FFCC                     u1011:
   731  00FFCC  EFEE  F07F         	goto	l1384
   732  00FFD0                     u1010:
   733  00FFD0                     
   734                           ;main.c: 245:             display = snake(display);
   735  00FFD0  500F               	movf	main@display^0,w,c
   736  00FFD2  EC71  F07D         	call	_snake
   737  00FFD6  6E0F               	movwf	main@display^0,c
   738                           
   739                           ;main.c: 246:         } else if (task == 8) {
   740  00FFD8  EF7D  F07E         	goto	l1290
   741  00FFDC                     l1384:
   742  00FFDC  0E08               	movlw	8
   743  00FFDE  1810               	xorwf	main@task^0,w,c
   744  00FFE0  1011               	iorwf	(main@task+1)^0,w,c
   745  00FFE2  A4D8               	btfss	status,2,c
   746  00FFE4  EFF6  F07F         	goto	u1021
   747  00FFE8  EFF8  F07F         	goto	u1020
   748  00FFEC                     u1021:
   749  00FFEC  EF7D  F07E         	goto	l1290
   750  00FFF0                     u1020:
   751  00FFF0                     
   752                           ;main.c: 247:             display = prng(display);
   753  00FFF0  500F               	movf	main@display^0,w,c
   754  00FFF2  EC03  F07D         	call	_prng
   755  00FFF6  6E0F               	movwf	main@display^0,c
   756                           
   757                           ;main.c: 248:         } else {
   758  00FFF8  EF7D  F07E         	goto	l1290
   759  00FFFC  EF00  F000         	goto	start
   760  010000                     __end_of_main:
   761                           	callstack 0
   762                           
   763 ;; *************** function _snake *****************
   764 ;; Defined at:
   765 ;;		line 134 in file "main.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  display         1    wreg     unsigned char 
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  display         1    0[COMRAM] unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      unsigned char 
   772 ;; Registers used:
   773 ;;		wreg, status,2, status,0
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   783 ;;Total ram usage:        1 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text1
   793  00FAE2                     __ptext1:
   794                           	callstack 0
   795  00FAE2                     _snake:
   796                           	callstack 30
   797                           
   798                           ;incstack = 0
   799                           ;snake@display stored from wreg
   800  00FAE2  6E01               	movwf	snake@display^0,c
   801  00FAE4                     
   802                           ;main.c: 135:     if (display < 7) {
   803  00FAE4  0E07               	movlw	7
   804  00FAE6  6001               	cpfslt	snake@display^0,c
   805  00FAE8  EF78  F07D         	goto	u241
   806  00FAEC  EF7A  F07D         	goto	u240
   807  00FAF0                     u241:
   808  00FAF0  EF7E  F07D         	goto	l1002
   809  00FAF4                     u240:
   810  00FAF4                     
   811                           ;main.c: 136:   display = (display << 1) ^ 1;
   812  00FAF4  80D8               	bsf	status,0,c
   813  00FAF6  3601               	rlcf	snake@display^0,f,c
   814                           
   815                           ;main.c: 137:  } else {
   816  00FAF8  EFAD  F07D         	goto	l1020
   817  00FAFC                     l1002:
   818                           
   819                           ;main.c: 138:   if (direction == 1) {
   820  00FAFC  0418               	decf	_direction^0,w,c
   821  00FAFE  1019               	iorwf	(_direction+1)^0,w,c
   822  00FB00  A4D8               	btfss	status,2,c
   823  00FB02  EF85  F07D         	goto	u251
   824  00FB06  EF87  F07D         	goto	u250
   825  00FB0A                     u251:
   826  00FB0A  EF9E  F07D         	goto	l1012
   827  00FB0E                     u250:
   828  00FB0E                     
   829                           ;main.c: 139:             if (display == 224) {
   830  00FB0E  0EE0               	movlw	224
   831  00FB10  1801               	xorwf	snake@display^0,w,c
   832  00FB12  A4D8               	btfss	status,2,c
   833  00FB14  EF8E  F07D         	goto	u261
   834  00FB18  EF90  F07D         	goto	u260
   835  00FB1C                     u261:
   836  00FB1C  EF99  F07D         	goto	l1010
   837  00FB20                     u260:
   838  00FB20                     
   839                           ;main.c: 140:     direction = 0;
   840  00FB20  0E00               	movlw	0
   841  00FB22  6E19               	movwf	(_direction+1)^0,c
   842  00FB24  0E00               	movlw	0
   843  00FB26  6E18               	movwf	_direction^0,c
   844  00FB28                     l1008:
   845                           
   846                           ;main.c: 141:     display = display >> 1;
   847  00FB28  90D8               	bcf	status,0,c
   848  00FB2A  3001               	rrcf	snake@display^0,w,c
   849  00FB2C  6E01               	movwf	snake@display^0,c
   850                           
   851                           ;main.c: 142:             } else {
   852  00FB2E  EFAD  F07D         	goto	l1020
   853  00FB32                     l1010:
   854                           
   855                           ;main.c: 143:     display = display << 1;
   856  00FB32  5001               	movf	snake@display^0,w,c
   857  00FB34  2401               	addwf	snake@display^0,w,c
   858  00FB36  6E01               	movwf	snake@display^0,c
   859  00FB38  EFAD  F07D         	goto	l1020
   860  00FB3C                     l1012:
   861                           
   862                           ;main.c: 146:    if (display == 7) {
   863  00FB3C  0E07               	movlw	7
   864  00FB3E  1801               	xorwf	snake@display^0,w,c
   865  00FB40  A4D8               	btfss	status,2,c
   866  00FB42  EFA5  F07D         	goto	u271
   867  00FB46  EFA7  F07D         	goto	u270
   868  00FB4A                     u271:
   869  00FB4A  EF94  F07D         	goto	l1008
   870  00FB4E                     u270:
   871  00FB4E                     
   872                           ;main.c: 147:     direction = 1;
   873  00FB4E  0E00               	movlw	0
   874  00FB50  6E19               	movwf	(_direction+1)^0,c
   875  00FB52  0E01               	movlw	1
   876  00FB54  6E18               	movwf	_direction^0,c
   877  00FB56  EF99  F07D         	goto	l1010
   878  00FB5A                     l1020:
   879                           
   880                           ;main.c: 154:     return display;
   881  00FB5A  5001               	movf	snake@display^0,w,c
   882  00FB5C  0012               	return		;funcret
   883  00FB5E                     __end_of_snake:
   884                           	callstack 0
   885                           
   886 ;; *************** function _setTask *****************
   887 ;; Defined at:
   888 ;;		line 78 in file "main.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  task            2    0[COMRAM] int 
   891 ;;  change          2    2[COMRAM] int 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;                  2    0[COMRAM] int 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;Total ram usage:        4 bytes
   908 ;; Hardware stack levels used: 1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text2
   917  00F8E2                     __ptext2:
   918                           	callstack 0
   919  00F8E2                     _setTask:
   920                           	callstack 30
   921  00F8E2                     
   922                           ;main.c: 79:     task = task + change;
   923  00F8E2  5003               	movf	setTask@change^0,w,c
   924  00F8E4  2401               	addwf	setTask@task^0,w,c
   925  00F8E6  6E01               	movwf	setTask@task^0,c
   926  00F8E8  5004               	movf	(setTask@change+1)^0,w,c
   927  00F8EA  2002               	addwfc	(setTask@task+1)^0,w,c
   928  00F8EC  6E02               	movwf	(setTask@task+1)^0,c
   929                           
   930                           ;main.c: 80:     if (task == 10) {
   931  00F8EE  0E0A               	movlw	10
   932  00F8F0  1801               	xorwf	setTask@task^0,w,c
   933  00F8F2  1002               	iorwf	(setTask@task+1)^0,w,c
   934  00F8F4  A4D8               	btfss	status,2,c
   935  00F8F6  EF7F  F07C         	goto	u691
   936  00F8FA  EF81  F07C         	goto	u690
   937  00F8FE                     u691:
   938  00F8FE  EF87  F07C         	goto	l1230
   939  00F902                     u690:
   940  00F902                     
   941                           ;main.c: 81:         task = 1;
   942  00F902  0E00               	movlw	0
   943  00F904  6E02               	movwf	(setTask@task+1)^0,c
   944  00F906  0E01               	movlw	1
   945  00F908  6E01               	movwf	setTask@task^0,c
   946                           
   947                           ;main.c: 82:     } else if (task == 0) {
   948  00F90A  EF94  F07C         	goto	l1234
   949  00F90E                     l1230:
   950  00F90E  5001               	movf	setTask@task^0,w,c
   951  00F910  1002               	iorwf	(setTask@task+1)^0,w,c
   952  00F912  A4D8               	btfss	status,2,c
   953  00F914  EF8E  F07C         	goto	u701
   954  00F918  EF90  F07C         	goto	u700
   955  00F91C                     u701:
   956  00F91C  EF94  F07C         	goto	l1234
   957  00F920                     u700:
   958  00F920                     
   959                           ;main.c: 83:         task = 9;
   960  00F920  0E00               	movlw	0
   961  00F922  6E02               	movwf	(setTask@task+1)^0,c
   962  00F924  0E09               	movlw	9
   963  00F926  6E01               	movwf	setTask@task^0,c
   964  00F928                     l1234:
   965                           
   966                           ;main.c: 85:     return task;
   967  00F928  C001  F001         	movff	setTask@task,?_setTask
   968  00F92C  C002  F002         	movff	setTask@task+1,?_setTask+1
   969  00F930  0012               	return		;funcret
   970  00F932                     __end_of_setTask:
   971                           	callstack 0
   972                           
   973 ;; *************** function _setDisplay *****************
   974 ;; Defined at:
   975 ;;		line 88 in file "main.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  task            2    0[COMRAM] int 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      unsigned char 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   989 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;Total ram usage:        2 bytes
   994 ;; Hardware stack levels used: 1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text3
  1003  00FA70                     __ptext3:
  1004                           	callstack 0
  1005  00FA70                     _setDisplay:
  1006                           	callstack 30
  1007  00FA70                     
  1008                           ;main.c: 89:     if (task == 2) {
  1009  00FA70  0E02               	movlw	2
  1010  00FA72  1801               	xorwf	setDisplay@task^0,w,c
  1011  00FA74  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1012  00FA76  A4D8               	btfss	status,2,c
  1013  00FA78  EF40  F07D         	goto	u711
  1014  00FA7C  EF42  F07D         	goto	u710
  1015  00FA80                     u711:
  1016  00FA80  EF45  F07D         	goto	l1246
  1017  00FA84                     u710:
  1018  00FA84                     
  1019                           ;main.c: 90:         return 255;
  1020  00FA84  0EFF               	movlw	255
  1021  00FA86  EF70  F07D         	goto	l48
  1022  00FA8A                     l1246:
  1023  00FA8A  0E09               	movlw	9
  1024  00FA8C  1801               	xorwf	setDisplay@task^0,w,c
  1025  00FA8E  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1026  00FA90  A4D8               	btfss	status,2,c
  1027  00FA92  EF4D  F07D         	goto	u721
  1028  00FA96  EF4F  F07D         	goto	u720
  1029  00FA9A                     u721:
  1030  00FA9A  EF52  F07D         	goto	l1254
  1031  00FA9E                     u720:
  1032  00FA9E                     
  1033                           ;main.c: 92:         return 1;
  1034  00FA9E  0E01               	movlw	1
  1035  00FAA0  EF70  F07D         	goto	l48
  1036  00FAA4                     l1254:
  1037  00FAA4  0401               	decf	setDisplay@task^0,w,c
  1038  00FAA6  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1039  00FAA8  B4D8               	btfsc	status,2,c
  1040  00FAAA  EF59  F07D         	goto	u731
  1041  00FAAE  EF5B  F07D         	goto	u730
  1042  00FAB2                     u731:
  1043  00FAB2  EF6F  F07D         	goto	l1260
  1044  00FAB6                     u730:
  1045  00FAB6  0E03               	movlw	3
  1046  00FAB8  1801               	xorwf	setDisplay@task^0,w,c
  1047  00FABA  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1048  00FABC  B4D8               	btfsc	status,2,c
  1049  00FABE  EF63  F07D         	goto	u741
  1050  00FAC2  EF65  F07D         	goto	u740
  1051  00FAC6                     u741:
  1052  00FAC6  EF6F  F07D         	goto	l1260
  1053  00FACA                     u740:
  1054  00FACA  0E07               	movlw	7
  1055  00FACC  1801               	xorwf	setDisplay@task^0,w,c
  1056  00FACE  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1057  00FAD0  A4D8               	btfss	status,2,c
  1058  00FAD2  EF6D  F07D         	goto	u751
  1059  00FAD6  EF6F  F07D         	goto	u750
  1060  00FADA                     u751:
  1061  00FADA  EF70  F07D         	goto	l48
  1062  00FADE                     u750:
  1063  00FADE                     l1260:
  1064                           
  1065                           ;main.c: 94:         return 0;
  1066  00FADE  0E00               	movlw	0
  1067  00FAE0                     l48:
  1068  00FAE0  0012               	return		;funcret
  1069  00FAE2                     __end_of_setDisplay:
  1070                           	callstack 0
  1071                           
  1072 ;; *************** function _prng *****************
  1073 ;; Defined at:
  1074 ;;		line 156 in file "main.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  display         1    wreg     unsigned char 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  display         1    9[COMRAM] unsigned char 
  1079 ;;  xored           2    7[COMRAM] int 
  1080 ;;  ans             2    5[COMRAM] int 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      unsigned char 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;Total ram usage:       10 bytes
  1095 ;; Hardware stack levels used: 1
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text4
  1104  00FA06                     __ptext4:
  1105                           	callstack 0
  1106  00FA06                     _prng:
  1107                           	callstack 30
  1108                           
  1109                           ;incstack = 0
  1110                           ;prng@display stored from wreg
  1111  00FA06  6E0A               	movwf	prng@display^0,c
  1112  00FA08                     
  1113                           ;main.c: 157:     int ans, xored;;main.c: 158:  xored = (((display >> 0) & 1) ^ ((displa
      +                          y >> 1) & 1)) ^ (((display >> 4) & 1) ^ ((display >> 5) & 1));
  1114  00FA08  C00A  F001         	movff	prng@display,??_prng
  1115  00FA0C  0E05               	movlw	5
  1116  00FA0E  6E02               	movwf	(??_prng+1)^0,c
  1117  00FA10                     u285:
  1118  00FA10  90D8               	bcf	status,0,c
  1119  00FA12  3201               	rrcf	??_prng^0,f,c
  1120  00FA14  2E02               	decfsz	(??_prng+1)^0,f,c
  1121  00FA16  EF08  F07D         	goto	u285
  1122  00FA1A  0E01               	movlw	1
  1123  00FA1C  1601               	andwf	??_prng^0,f,c
  1124  00FA1E  380A               	swapf	prng@display^0,w,c
  1125  00FA20  0B0F               	andlw	15
  1126  00FA22  0B01               	andlw	1
  1127  00FA24  1801               	xorwf	??_prng^0,w,c
  1128  00FA26  6E03               	movwf	(??_prng+2)^0,c
  1129  00FA28  C00A  F004         	movff	prng@display,??_prng+3
  1130  00FA2C  90D8               	bcf	status,0,c
  1131  00FA2E  3204               	rrcf	(??_prng+3)^0,f,c
  1132  00FA30  0E01               	movlw	1
  1133  00FA32  1604               	andwf	(??_prng+3)^0,f,c
  1134  00FA34  500A               	movf	prng@display^0,w,c
  1135  00FA36  0B01               	andlw	1
  1136  00FA38  1804               	xorwf	(??_prng+3)^0,w,c
  1137  00FA3A  1803               	xorwf	(??_prng+2)^0,w,c
  1138  00FA3C  6E05               	movwf	(??_prng+4)^0,c
  1139  00FA3E  5005               	movf	(??_prng+4)^0,w,c
  1140  00FA40  6E08               	movwf	prng@xored^0,c
  1141  00FA42  6A09               	clrf	(prng@xored+1)^0,c
  1142                           
  1143                           ;main.c: 159:  ans = (xored << 5) | (display >> 1);
  1144  00FA44  C008  F001         	movff	prng@xored,??_prng
  1145  00FA48  C009  F002         	movff	prng@xored+1,??_prng+1
  1146  00FA4C  0E05               	movlw	5
  1147  00FA4E                     u295:
  1148  00FA4E  90D8               	bcf	status,0,c
  1149  00FA50  3601               	rlcf	??_prng^0,f,c
  1150  00FA52  3602               	rlcf	(??_prng+1)^0,f,c
  1151  00FA54  2EE8               	decfsz	wreg,f,c
  1152  00FA56  EF27  F07D         	goto	u295
  1153  00FA5A  C00A  F003         	movff	prng@display,??_prng+2
  1154  00FA5E  90D8               	bcf	status,0,c
  1155  00FA60  3203               	rrcf	(??_prng+2)^0,f,c
  1156  00FA62  5003               	movf	(??_prng+2)^0,w,c
  1157  00FA64  1001               	iorwf	??_prng^0,w,c
  1158  00FA66  6E06               	movwf	prng@ans^0,c
  1159  00FA68  5002               	movf	(??_prng+1)^0,w,c
  1160  00FA6A  6E07               	movwf	(prng@ans+1)^0,c
  1161  00FA6C                     
  1162                           ;main.c: 160:     return ans;
  1163  00FA6C  5006               	movf	prng@ans^0,w,c
  1164  00FA6E  0012               	return		;funcret
  1165  00FA70                     __end_of_prng:
  1166                           	callstack 0
  1167                           
  1168 ;; *************** function _grey_up *****************
  1169 ;; Defined at:
  1170 ;;		line 104 in file "main.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  display         1    wreg     unsigned char 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  display         1    0[COMRAM] unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      unsigned char 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, status,0
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;Total ram usage:        1 bytes
  1189 ;; Hardware stack levels used: 1
  1190 ;; This function calls:
  1191 ;;		Nothing
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text5
  1198  00F860                     __ptext5:
  1199                           	callstack 0
  1200  00F860                     _grey_up:
  1201                           	callstack 30
  1202  00F860                     
  1203                           ;main.c: 105:     display = (grey >>1) ^ grey;
  1204  00F860  90D8               	bcf	status,0,c
  1205  00F862  3017               	rrcf	_grey^0,w,c
  1206  00F864  1817               	xorwf	_grey^0,w,c
  1207  00F866  6E01               	movwf	grey_up@display^0,c
  1208                           
  1209                           ;main.c: 106:     grey = grey + 1;
  1210  00F868  2817               	incf	_grey^0,w,c
  1211  00F86A  6E17               	movwf	_grey^0,c
  1212  00F86C                     
  1213                           ;main.c: 107:     return display;
  1214  00F86C  5001               	movf	grey_up@display^0,w,c
  1215  00F86E  0012               	return		;funcret
  1216  00F870                     __end_of_grey_up:
  1217                           	callstack 0
  1218                           
  1219 ;; *************** function _grey_down *****************
  1220 ;; Defined at:
  1221 ;;		line 109 in file "main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  display         1    wreg     unsigned char 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  display         1    0[COMRAM] unsigned char 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      unsigned char 
  1228 ;; Registers used:
  1229 ;;		wreg, status,2, status,0
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;Total ram usage:        1 bytes
  1240 ;; Hardware stack levels used: 1
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_main
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text6
  1249  00F850                     __ptext6:
  1250                           	callstack 0
  1251  00F850                     _grey_down:
  1252                           	callstack 30
  1253  00F850                     
  1254                           ;main.c: 110:     display = (grey >>1) ^ grey;
  1255  00F850  90D8               	bcf	status,0,c
  1256  00F852  3017               	rrcf	_grey^0,w,c
  1257  00F854  1817               	xorwf	_grey^0,w,c
  1258  00F856  6E01               	movwf	grey_down@display^0,c
  1259                           
  1260                           ;main.c: 111:     grey = grey - 1;
  1261  00F858  0417               	decf	_grey^0,w,c
  1262  00F85A  6E17               	movwf	_grey^0,c
  1263  00F85C                     
  1264                           ;main.c: 112:     return display;
  1265  00F85C  5001               	movf	grey_down@display^0,w,c
  1266  00F85E  0012               	return		;funcret
  1267  00F860                     __end_of_grey_down:
  1268                           	callstack 0
  1269                           
  1270 ;; *************** function _delay *****************
  1271 ;; Defined at:
  1272 ;;		line 64 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  ms              2    0[COMRAM] unsigned int 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  i               2    2[COMRAM] unsigned int 
  1277 ;;  j               1    4[COMRAM] unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2, status,0
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;Total ram usage:        5 bytes
  1292 ;; Hardware stack levels used: 1
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text7
  1301  00F89A                     __ptext7:
  1302                           	callstack 0
  1303  00F89A                     _delay:
  1304                           	callstack 30
  1305  00F89A                     
  1306                           ;main.c: 65:     unsigned int i;;main.c: 66:     unsigned char j;;main.c: 67:     for (i
      +                           =0; i< ms; i++){
  1307  00F89A  0E00               	movlw	0
  1308  00F89C  6E04               	movwf	(delay@i+1)^0,c
  1309  00F89E  0E00               	movlw	0
  1310  00F8A0  6E03               	movwf	delay@i^0,c
  1311  00F8A2  EF65  F07C         	goto	l1224
  1312  00F8A6                     l1212:
  1313                           
  1314                           ;main.c: 68:         for (j =0 ; j < 200; j++){
  1315  00F8A6  0E00               	movlw	0
  1316  00F8A8  6E05               	movwf	delay@j^0,c
  1317  00F8AA                     l35:
  1318                           
  1319                           ;main.c: 69:             __nop();
  1320  00F8AA  F000               	nop	
  1321                           
  1322                           ;main.c: 70:             __nop();
  1323  00F8AC  F000               	nop	
  1324                           
  1325                           ;main.c: 71:             __nop();
  1326  00F8AE  F000               	nop	
  1327                           
  1328                           ;main.c: 72:             __nop();
  1329  00F8B0  F000               	nop	
  1330                           
  1331                           ;main.c: 73:             __nop();
  1332  00F8B2  F000               	nop	
  1333  00F8B4                     
  1334                           ;main.c: 74:         }
  1335  00F8B4  2A05               	incf	delay@j^0,f,c
  1336  00F8B6  0EC7               	movlw	199
  1337  00F8B8  6405               	cpfsgt	delay@j^0,c
  1338  00F8BA  EF61  F07C         	goto	u671
  1339  00F8BE  EF63  F07C         	goto	u670
  1340  00F8C2                     u671:
  1341  00F8C2  EF55  F07C         	goto	l35
  1342  00F8C6                     u670:
  1343  00F8C6                     
  1344                           ;main.c: 75:     }
  1345  00F8C6  4A03               	infsnz	delay@i^0,f,c
  1346  00F8C8  2A04               	incf	(delay@i+1)^0,f,c
  1347  00F8CA                     l1224:
  1348  00F8CA  5001               	movf	delay@ms^0,w,c
  1349  00F8CC  5C03               	subwf	delay@i^0,w,c
  1350  00F8CE  5002               	movf	(delay@ms+1)^0,w,c
  1351  00F8D0  5804               	subwfb	(delay@i+1)^0,w,c
  1352  00F8D2  A0D8               	btfss	status,0,c
  1353  00F8D4  EF6E  F07C         	goto	u681
  1354  00F8D8  EF70  F07C         	goto	u680
  1355  00F8DC                     u681:
  1356  00F8DC  EF53  F07C         	goto	l1212
  1357  00F8E0                     u680:
  1358  00F8E0  0012               	return		;funcret
  1359  00F8E2                     __end_of_delay:
  1360                           	callstack 0
  1361                           
  1362 ;; *************** function _bin_up *****************
  1363 ;; Defined at:
  1364 ;;		line 98 in file "main.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  display         1    wreg     unsigned char 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  display         1    0[COMRAM] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      unsigned char 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;Total ram usage:        1 bytes
  1383 ;; Hardware stack levels used: 1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text8
  1392  00F84A                     __ptext8:
  1393                           	callstack 0
  1394  00F84A                     _bin_up:
  1395                           	callstack 30
  1396                           
  1397                           ;incstack = 0
  1398                           ;bin_up@display stored from wreg
  1399  00F84A  6E01               	movwf	bin_up@display^0,c
  1400  00F84C                     
  1401                           ;main.c: 99:     return (display + 1);
  1402  00F84C  2801               	incf	bin_up@display^0,w,c
  1403  00F84E  0012               	return		;funcret
  1404  00F850                     __end_of_bin_up:
  1405                           	callstack 0
  1406                           
  1407 ;; *************** function _bin_down *****************
  1408 ;; Defined at:
  1409 ;;		line 101 in file "main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  display         1    wreg     unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  display         1    0[COMRAM] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      unsigned char 
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;Total ram usage:        1 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text9
  1437  00F844                     __ptext9:
  1438                           	callstack 0
  1439  00F844                     _bin_down:
  1440                           	callstack 30
  1441                           
  1442                           ;incstack = 0
  1443                           ;bin_down@display stored from wreg
  1444  00F844  6E01               	movwf	bin_down@display^0,c
  1445  00F846                     
  1446                           ;main.c: 102:     return (display - 1);
  1447  00F846  0401               	decf	bin_down@display^0,w,c
  1448  00F848  0012               	return		;funcret
  1449  00F84A                     __end_of_bin_down:
  1450                           	callstack 0
  1451                           
  1452 ;; *************** function _bcd_up *****************
  1453 ;; Defined at:
  1454 ;;		line 114 in file "main.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  display         2   10[COMRAM] unsigned int 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      unsigned char 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:        4 bytes
  1473 ;; Hardware stack levels used: 1
  1474 ;; Hardware stack levels required when called: 1
  1475 ;; This function calls:
  1476 ;;		___awdiv
  1477 ;;		___awmod
  1478 ;; This function is called by:
  1479 ;;		_main
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           	psect	text10
  1484  00F99C                     __ptext10:
  1485                           	callstack 0
  1486  00F99C                     _bcd_up:
  1487                           	callstack 29
  1488  00F99C                     
  1489                           ;main.c: 115:     unsigned int display;;main.c: 116:     if (bcd > 99) {
  1490  00F99C  0E63               	movlw	99
  1491  00F99E  6416               	cpfsgt	_bcd^0,c
  1492  00F9A0  EFD4  F07C         	goto	u761
  1493  00F9A4  EFD6  F07C         	goto	u760
  1494  00F9A8                     u761:
  1495  00F9A8  EFDA  F07C         	goto	l1268
  1496  00F9AC                     u760:
  1497  00F9AC                     
  1498                           ;main.c: 117:         bcd = 1;
  1499  00F9AC  0E01               	movlw	1
  1500  00F9AE  6E16               	movwf	_bcd^0,c
  1501                           
  1502                           ;main.c: 118:     } else {
  1503  00F9B0  EF01  F07D         	goto	l1272
  1504  00F9B4                     l1268:
  1505                           
  1506                           ;main.c: 119:         display = ((bcd / 10) << 4) | (bcd % 10);
  1507  00F9B4  C016  F001         	movff	_bcd,___awdiv@dividend
  1508  00F9B8  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1509  00F9BA  0E00               	movlw	0
  1510  00F9BC  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1511  00F9BE  0E0A               	movlw	10
  1512  00F9C0  6E03               	movwf	___awdiv@divisor^0,c
  1513  00F9C2  EC07  F07E         	call	___awdiv	;wreg free
  1514  00F9C6  C001  F009         	movff	?___awdiv,??_bcd_up
  1515  00F9CA  C002  F00A         	movff	?___awdiv+1,??_bcd_up+1
  1516  00F9CE  3A09               	swapf	??_bcd_up^0,f,c
  1517  00F9D0  3A0A               	swapf	(??_bcd_up+1)^0,f,c
  1518  00F9D2  0EF0               	movlw	240
  1519  00F9D4  160A               	andwf	(??_bcd_up+1)^0,f,c
  1520  00F9D6  5009               	movf	??_bcd_up^0,w,c
  1521  00F9D8  0B0F               	andlw	15
  1522  00F9DA  120A               	iorwf	(??_bcd_up+1)^0,f,c
  1523  00F9DC  0EF0               	movlw	240
  1524  00F9DE  1609               	andwf	??_bcd_up^0,f,c
  1525  00F9E0  C016  F001         	movff	_bcd,___awmod@dividend
  1526  00F9E4  6A02               	clrf	(___awmod@dividend+1)^0,c
  1527  00F9E6  0E00               	movlw	0
  1528  00F9E8  6E04               	movwf	(___awmod@divisor+1)^0,c
  1529  00F9EA  0E0A               	movlw	10
  1530  00F9EC  6E03               	movwf	___awmod@divisor^0,c
  1531  00F9EE  ECAF  F07D         	call	___awmod	;wreg free
  1532  00F9F2  5001               	movf	?___awmod^0,w,c
  1533  00F9F4  1009               	iorwf	??_bcd_up^0,w,c
  1534  00F9F6  6E0B               	movwf	bcd_up@display^0,c
  1535  00F9F8  5002               	movf	(?___awmod+1)^0,w,c
  1536  00F9FA  100A               	iorwf	(??_bcd_up+1)^0,w,c
  1537  00F9FC  6E0C               	movwf	(bcd_up@display+1)^0,c
  1538  00F9FE                     
  1539                           ;main.c: 120:         bcd = bcd + 1;
  1540  00F9FE  2816               	incf	_bcd^0,w,c
  1541  00FA00  6E16               	movwf	_bcd^0,c
  1542  00FA02                     l1272:
  1543                           
  1544                           ;main.c: 122:     return display;
  1545  00FA02  500B               	movf	bcd_up@display^0,w,c
  1546  00FA04  0012               	return		;funcret
  1547  00FA06                     __end_of_bcd_up:
  1548                           	callstack 0
  1549                           
  1550 ;; *************** function _bcd_down *****************
  1551 ;; Defined at:
  1552 ;;		line 124 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  display         2   10[COMRAM] unsigned int 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      unsigned char 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;Total ram usage:        4 bytes
  1571 ;; Hardware stack levels used: 1
  1572 ;; Hardware stack levels required when called: 1
  1573 ;; This function calls:
  1574 ;;		___awdiv
  1575 ;;		___awmod
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text11
  1582  00F932                     __ptext11:
  1583                           	callstack 0
  1584  00F932                     _bcd_down:
  1585                           	callstack 29
  1586  00F932                     
  1587                           ;main.c: 125:     unsigned int display;;main.c: 126:     if (bcd == 0) {
  1588  00F932  5016               	movf	_bcd^0,w,c
  1589  00F934  A4D8               	btfss	status,2,c
  1590  00F936  EF9F  F07C         	goto	u771
  1591  00F93A  EFA1  F07C         	goto	u770
  1592  00F93E                     u771:
  1593  00F93E  EFA5  F07C         	goto	l1280
  1594  00F942                     u770:
  1595  00F942                     
  1596                           ;main.c: 127:         bcd = 99;
  1597  00F942  0E63               	movlw	99
  1598  00F944  6E16               	movwf	_bcd^0,c
  1599                           
  1600                           ;main.c: 128:     } else {
  1601  00F946  EFCC  F07C         	goto	l1284
  1602  00F94A                     l1280:
  1603                           
  1604                           ;main.c: 129:         display = ((bcd / 10) << 4) | (bcd % 10);
  1605  00F94A  C016  F001         	movff	_bcd,___awdiv@dividend
  1606  00F94E  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1607  00F950  0E00               	movlw	0
  1608  00F952  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1609  00F954  0E0A               	movlw	10
  1610  00F956  6E03               	movwf	___awdiv@divisor^0,c
  1611  00F958  EC07  F07E         	call	___awdiv	;wreg free
  1612  00F95C  C001  F009         	movff	?___awdiv,??_bcd_down
  1613  00F960  C002  F00A         	movff	?___awdiv+1,??_bcd_down+1
  1614  00F964  3A09               	swapf	??_bcd_down^0,f,c
  1615  00F966  3A0A               	swapf	(??_bcd_down+1)^0,f,c
  1616  00F968  0EF0               	movlw	240
  1617  00F96A  160A               	andwf	(??_bcd_down+1)^0,f,c
  1618  00F96C  5009               	movf	??_bcd_down^0,w,c
  1619  00F96E  0B0F               	andlw	15
  1620  00F970  120A               	iorwf	(??_bcd_down+1)^0,f,c
  1621  00F972  0EF0               	movlw	240
  1622  00F974  1609               	andwf	??_bcd_down^0,f,c
  1623  00F976  C016  F001         	movff	_bcd,___awmod@dividend
  1624  00F97A  6A02               	clrf	(___awmod@dividend+1)^0,c
  1625  00F97C  0E00               	movlw	0
  1626  00F97E  6E04               	movwf	(___awmod@divisor+1)^0,c
  1627  00F980  0E0A               	movlw	10
  1628  00F982  6E03               	movwf	___awmod@divisor^0,c
  1629  00F984  ECAF  F07D         	call	___awmod	;wreg free
  1630  00F988  5001               	movf	?___awmod^0,w,c
  1631  00F98A  1009               	iorwf	??_bcd_down^0,w,c
  1632  00F98C  6E0B               	movwf	bcd_down@display^0,c
  1633  00F98E  5002               	movf	(?___awmod+1)^0,w,c
  1634  00F990  100A               	iorwf	(??_bcd_down+1)^0,w,c
  1635  00F992  6E0C               	movwf	(bcd_down@display+1)^0,c
  1636  00F994                     
  1637                           ;main.c: 130:         bcd = bcd - 1;
  1638  00F994  0416               	decf	_bcd^0,w,c
  1639  00F996  6E16               	movwf	_bcd^0,c
  1640  00F998                     l1284:
  1641                           
  1642                           ;main.c: 132:     return display;
  1643  00F998  500B               	movf	bcd_down@display^0,w,c
  1644  00F99A  0012               	return		;funcret
  1645  00F99C                     __end_of_bcd_down:
  1646                           	callstack 0
  1647                           
  1648 ;; *************** function ___awmod *****************
  1649 ;; Defined at:
  1650 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  dividend        2    0[COMRAM] int 
  1653 ;;  divisor         2    2[COMRAM] int 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  sign            1    5[COMRAM] unsigned char 
  1656 ;;  counter         1    4[COMRAM] unsigned char 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  2    0[COMRAM] int 
  1659 ;; Registers used:
  1660 ;;		wreg, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;Total ram usage:        6 bytes
  1671 ;; Hardware stack levels used: 1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_bcd_up
  1676 ;;		_bcd_down
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text12
  1681  00FB5E                     __ptext12:
  1682                           	callstack 0
  1683  00FB5E                     ___awmod:
  1684                           	callstack 29
  1685  00FB5E  0E00               	movlw	0
  1686  00FB60  6E06               	movwf	___awmod@sign^0,c
  1687  00FB62  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1688  00FB64  EFB8  F07D         	goto	u610
  1689  00FB68  EFB6  F07D         	goto	u611
  1690  00FB6C                     u611:
  1691  00FB6C  EFBE  F07D         	goto	l1182
  1692  00FB70                     u610:
  1693  00FB70  6C01               	negf	___awmod@dividend^0,c
  1694  00FB72  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1695  00FB74  B0D8               	btfsc	status,0,c
  1696  00FB76  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1697  00FB78  0E01               	movlw	1
  1698  00FB7A  6E06               	movwf	___awmod@sign^0,c
  1699  00FB7C                     l1182:
  1700  00FB7C  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1701  00FB7E  EFC5  F07D         	goto	u620
  1702  00FB82  EFC3  F07D         	goto	u621
  1703  00FB86                     u621:
  1704  00FB86  EFC9  F07D         	goto	l1186
  1705  00FB8A                     u620:
  1706  00FB8A  6C03               	negf	___awmod@divisor^0,c
  1707  00FB8C  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1708  00FB8E  B0D8               	btfsc	status,0,c
  1709  00FB90  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1710  00FB92                     l1186:
  1711  00FB92  5003               	movf	___awmod@divisor^0,w,c
  1712  00FB94  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1713  00FB96  B4D8               	btfsc	status,2,c
  1714  00FB98  EFD0  F07D         	goto	u631
  1715  00FB9C  EFD2  F07D         	goto	u630
  1716  00FBA0                     u631:
  1717  00FBA0  EFF6  F07D         	goto	l1202
  1718  00FBA4                     u630:
  1719  00FBA4  0E01               	movlw	1
  1720  00FBA6  6E05               	movwf	___awmod@counter^0,c
  1721  00FBA8  EFDA  F07D         	goto	l1192
  1722  00FBAC                     l1190:
  1723  00FBAC  90D8               	bcf	status,0,c
  1724  00FBAE  3603               	rlcf	___awmod@divisor^0,f,c
  1725  00FBB0  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1726  00FBB2  2A05               	incf	___awmod@counter^0,f,c
  1727  00FBB4                     l1192:
  1728  00FBB4  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1729  00FBB6  EFDF  F07D         	goto	u641
  1730  00FBBA  EFE1  F07D         	goto	u640
  1731  00FBBE                     u641:
  1732  00FBBE  EFD6  F07D         	goto	l1190
  1733  00FBC2                     u640:
  1734  00FBC2                     l1194:
  1735  00FBC2  5003               	movf	___awmod@divisor^0,w,c
  1736  00FBC4  5C01               	subwf	___awmod@dividend^0,w,c
  1737  00FBC6  5004               	movf	(___awmod@divisor+1)^0,w,c
  1738  00FBC8  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1739  00FBCA  A0D8               	btfss	status,0,c
  1740  00FBCC  EFEA  F07D         	goto	u651
  1741  00FBD0  EFEC  F07D         	goto	u650
  1742  00FBD4                     u651:
  1743  00FBD4  EFF0  F07D         	goto	l1198
  1744  00FBD8                     u650:
  1745  00FBD8  5003               	movf	___awmod@divisor^0,w,c
  1746  00FBDA  5E01               	subwf	___awmod@dividend^0,f,c
  1747  00FBDC  5004               	movf	(___awmod@divisor+1)^0,w,c
  1748  00FBDE  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1749  00FBE0                     l1198:
  1750  00FBE0  90D8               	bcf	status,0,c
  1751  00FBE2  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1752  00FBE4  3203               	rrcf	___awmod@divisor^0,f,c
  1753  00FBE6  2E05               	decfsz	___awmod@counter^0,f,c
  1754  00FBE8  EFE1  F07D         	goto	l1194
  1755  00FBEC                     l1202:
  1756  00FBEC  5006               	movf	___awmod@sign^0,w,c
  1757  00FBEE  B4D8               	btfsc	status,2,c
  1758  00FBF0  EFFC  F07D         	goto	u661
  1759  00FBF4  EFFE  F07D         	goto	u660
  1760  00FBF8                     u661:
  1761  00FBF8  EF02  F07E         	goto	l1206
  1762  00FBFC                     u660:
  1763  00FBFC  6C01               	negf	___awmod@dividend^0,c
  1764  00FBFE  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1765  00FC00  B0D8               	btfsc	status,0,c
  1766  00FC02  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1767  00FC04                     l1206:
  1768  00FC04  C001  F001         	movff	___awmod@dividend,?___awmod
  1769  00FC08  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1770  00FC0C  0012               	return		;funcret
  1771  00FC0E                     __end_of___awmod:
  1772                           	callstack 0
  1773                           
  1774 ;; *************** function ___awdiv *****************
  1775 ;; Defined at:
  1776 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  dividend        2    0[COMRAM] int 
  1779 ;;  divisor         2    2[COMRAM] int 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  quotient        2    6[COMRAM] int 
  1782 ;;  sign            1    5[COMRAM] unsigned char 
  1783 ;;  counter         1    4[COMRAM] unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  2    0[COMRAM] int 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:        8 bytes
  1798 ;; Hardware stack levels used: 1
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_bcd_up
  1803 ;;		_bcd_down
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text13
  1808  00FC0E                     __ptext13:
  1809                           	callstack 0
  1810  00FC0E                     ___awdiv:
  1811                           	callstack 29
  1812  00FC0E  0E00               	movlw	0
  1813  00FC10  6E06               	movwf	___awdiv@sign^0,c
  1814  00FC12  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1815  00FC14  EF10  F07E         	goto	u550
  1816  00FC18  EF0E  F07E         	goto	u551
  1817  00FC1C                     u551:
  1818  00FC1C  EF16  F07E         	goto	l1138
  1819  00FC20                     u550:
  1820  00FC20  6C03               	negf	___awdiv@divisor^0,c
  1821  00FC22  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1822  00FC24  B0D8               	btfsc	status,0,c
  1823  00FC26  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1824  00FC28  0E01               	movlw	1
  1825  00FC2A  6E06               	movwf	___awdiv@sign^0,c
  1826  00FC2C                     l1138:
  1827  00FC2C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1828  00FC2E  EF1D  F07E         	goto	u560
  1829  00FC32  EF1B  F07E         	goto	u561
  1830  00FC36                     u561:
  1831  00FC36  EF23  F07E         	goto	l1144
  1832  00FC3A                     u560:
  1833  00FC3A  6C01               	negf	___awdiv@dividend^0,c
  1834  00FC3C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1835  00FC3E  B0D8               	btfsc	status,0,c
  1836  00FC40  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1837  00FC42  0E01               	movlw	1
  1838  00FC44  1A06               	xorwf	___awdiv@sign^0,f,c
  1839  00FC46                     l1144:
  1840  00FC46  0E00               	movlw	0
  1841  00FC48  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1842  00FC4A  0E00               	movlw	0
  1843  00FC4C  6E07               	movwf	___awdiv@quotient^0,c
  1844  00FC4E  5003               	movf	___awdiv@divisor^0,w,c
  1845  00FC50  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1846  00FC52  B4D8               	btfsc	status,2,c
  1847  00FC54  EF2E  F07E         	goto	u571
  1848  00FC58  EF30  F07E         	goto	u570
  1849  00FC5C                     u571:
  1850  00FC5C  EF58  F07E         	goto	l1166
  1851  00FC60                     u570:
  1852  00FC60  0E01               	movlw	1
  1853  00FC62  6E05               	movwf	___awdiv@counter^0,c
  1854  00FC64  EF38  F07E         	goto	l1152
  1855  00FC68                     l1150:
  1856  00FC68  90D8               	bcf	status,0,c
  1857  00FC6A  3603               	rlcf	___awdiv@divisor^0,f,c
  1858  00FC6C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1859  00FC6E  2A05               	incf	___awdiv@counter^0,f,c
  1860  00FC70                     l1152:
  1861  00FC70  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1862  00FC72  EF3D  F07E         	goto	u581
  1863  00FC76  EF3F  F07E         	goto	u580
  1864  00FC7A                     u581:
  1865  00FC7A  EF34  F07E         	goto	l1150
  1866  00FC7E                     u580:
  1867  00FC7E                     l1154:
  1868  00FC7E  90D8               	bcf	status,0,c
  1869  00FC80  3607               	rlcf	___awdiv@quotient^0,f,c
  1870  00FC82  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1871  00FC84  5003               	movf	___awdiv@divisor^0,w,c
  1872  00FC86  5C01               	subwf	___awdiv@dividend^0,w,c
  1873  00FC88  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1874  00FC8A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1875  00FC8C  A0D8               	btfss	status,0,c
  1876  00FC8E  EF4B  F07E         	goto	u591
  1877  00FC92  EF4D  F07E         	goto	u590
  1878  00FC96                     u591:
  1879  00FC96  EF52  F07E         	goto	l1162
  1880  00FC9A                     u590:
  1881  00FC9A  5003               	movf	___awdiv@divisor^0,w,c
  1882  00FC9C  5E01               	subwf	___awdiv@dividend^0,f,c
  1883  00FC9E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1884  00FCA0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1885  00FCA2  8007               	bsf	___awdiv@quotient^0,0,c
  1886  00FCA4                     l1162:
  1887  00FCA4  90D8               	bcf	status,0,c
  1888  00FCA6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1889  00FCA8  3203               	rrcf	___awdiv@divisor^0,f,c
  1890  00FCAA  2E05               	decfsz	___awdiv@counter^0,f,c
  1891  00FCAC  EF3F  F07E         	goto	l1154
  1892  00FCB0                     l1166:
  1893  00FCB0  5006               	movf	___awdiv@sign^0,w,c
  1894  00FCB2  B4D8               	btfsc	status,2,c
  1895  00FCB4  EF5E  F07E         	goto	u601
  1896  00FCB8  EF60  F07E         	goto	u600
  1897  00FCBC                     u601:
  1898  00FCBC  EF64  F07E         	goto	l1170
  1899  00FCC0                     u600:
  1900  00FCC0  6C07               	negf	___awdiv@quotient^0,c
  1901  00FCC2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1902  00FCC4  B0D8               	btfsc	status,0,c
  1903  00FCC6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1904  00FCC8                     l1170:
  1905  00FCC8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1906  00FCCC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1907  00FCD0  0012               	return		;funcret
  1908  00FCD2                     __end_of___awdiv:
  1909                           	callstack 0
  1910  0000                     
  1911                           	psect	rparam
  1912  0000                     
  1913                           	psect	idloc
  1914                           
  1915                           ;Config register IDLOC0 @ 0x200000
  1916                           ;	unspecified, using default values
  1917  200000                     	org	2097152
  1918  200000  FF                 	db	255
  1919                           
  1920                           ;Config register IDLOC1 @ 0x200001
  1921                           ;	unspecified, using default values
  1922  200001                     	org	2097153
  1923  200001  FF                 	db	255
  1924                           
  1925                           ;Config register IDLOC2 @ 0x200002
  1926                           ;	unspecified, using default values
  1927  200002                     	org	2097154
  1928  200002  FF                 	db	255
  1929                           
  1930                           ;Config register IDLOC3 @ 0x200003
  1931                           ;	unspecified, using default values
  1932  200003                     	org	2097155
  1933  200003  FF                 	db	255
  1934                           
  1935                           ;Config register IDLOC4 @ 0x200004
  1936                           ;	unspecified, using default values
  1937  200004                     	org	2097156
  1938  200004  FF                 	db	255
  1939                           
  1940                           ;Config register IDLOC5 @ 0x200005
  1941                           ;	unspecified, using default values
  1942  200005                     	org	2097157
  1943  200005  FF                 	db	255
  1944                           
  1945                           ;Config register IDLOC6 @ 0x200006
  1946                           ;	unspecified, using default values
  1947  200006                     	org	2097158
  1948  200006  FF                 	db	255
  1949                           
  1950                           ;Config register IDLOC7 @ 0x200007
  1951                           ;	unspecified, using default values
  1952  200007                     	org	2097159
  1953  200007  FF                 	db	255
  1954                           
  1955                           	psect	config
  1956                           
  1957                           ; Padding undefined space
  1958  300000                     	org	3145728
  1959  300000  FF                 	db	255
  1960                           
  1961                           ;Config register CONFIG1H @ 0x300001
  1962                           ;	Oscillator Selection bits
  1963                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  1964                           ;	Fail-Safe Clock Monitor Enable bit
  1965                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1966                           ;	Internal/External Oscillator Switchover bit
  1967                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1968  300001                     	org	3145729
  1969  300001  06                 	db	6
  1970                           
  1971                           ;Config register CONFIG2L @ 0x300002
  1972                           ;	Power-up Timer Enable bit
  1973                           ;	PWRT = ON, PWRT enabled
  1974                           ;	Brown-out Reset Enable bits
  1975                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1976                           ;	Brown Out Reset Voltage bits
  1977                           ;	BORV = 3, Minimum setting
  1978  300002                     	org	3145730
  1979  300002  18                 	db	24
  1980                           
  1981                           ;Config register CONFIG2H @ 0x300003
  1982                           ;	Watchdog Timer Enable bit
  1983                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1984                           ;	Watchdog Timer Postscale Select bits
  1985                           ;	WDTPS = 32768, 1:32768
  1986  300003                     	org	3145731
  1987  300003  1E                 	db	30
  1988                           
  1989                           ; Padding undefined space
  1990  300004                     	org	3145732
  1991  300004  FF                 	db	255
  1992                           
  1993                           ;Config register CONFIG3H @ 0x300005
  1994                           ;	CCP2 MUX bit
  1995                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1996                           ;	PORTB A/D Enable bit
  1997                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1998                           ;	Low-Power Timer1 Oscillator Enable bit
  1999                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2000                           ;	MCLR Pin Enable bit
  2001                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2002  300005                     	org	3145733
  2003  300005  81                 	db	129
  2004                           
  2005                           ;Config register CONFIG4L @ 0x300006
  2006                           ;	Stack Full/Underflow Reset Enable bit
  2007                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  2008                           ;	Single-Supply ICSP Enable bit
  2009                           ;	LVP = OFF, Single-Supply ICSP disabled
  2010                           ;	Extended Instruction Set Enable bit
  2011                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2012                           ;	Background Debugger Enable bit
  2013                           ;	DEBUG = 0x1, unprogrammed default
  2014  300006                     	org	3145734
  2015  300006  80                 	db	128
  2016                           
  2017                           ; Padding undefined space
  2018  300007                     	org	3145735
  2019  300007  FF                 	db	255
  2020                           
  2021                           ;Config register CONFIG5L @ 0x300008
  2022                           ;	Code Protection bit
  2023                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2024                           ;	Code Protection bit
  2025                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2026                           ;	Code Protection bit
  2027                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2028                           ;	Code Protection bit
  2029                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2030  300008                     	org	3145736
  2031  300008  0F                 	db	15
  2032                           
  2033                           ;Config register CONFIG5H @ 0x300009
  2034                           ;	Boot Block Code Protection bit
  2035                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2036                           ;	Data EEPROM Code Protection bit
  2037                           ;	CPD = OFF, Data EEPROM not code-protected
  2038  300009                     	org	3145737
  2039  300009  C0                 	db	192
  2040                           
  2041                           ;Config register CONFIG6L @ 0x30000A
  2042                           ;	Write Protection bit
  2043                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2044                           ;	Write Protection bit
  2045                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2046                           ;	Write Protection bit
  2047                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2048                           ;	Write Protection bit
  2049                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2050  30000A                     	org	3145738
  2051  30000A  0F                 	db	15
  2052                           
  2053                           ;Config register CONFIG6H @ 0x30000B
  2054                           ;	Configuration Register Write Protection bit
  2055                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2056                           ;	Boot Block Write Protection bit
  2057                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2058                           ;	Data EEPROM Write Protection bit
  2059                           ;	WRTD = OFF, Data EEPROM not write-protected
  2060  30000B                     	org	3145739
  2061  30000B  E0                 	db	224
  2062                           
  2063                           ;Config register CONFIG7L @ 0x30000C
  2064                           ;	Table Read Protection bit
  2065                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2066                           ;	Table Read Protection bit
  2067                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2068                           ;	Table Read Protection bit
  2069                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2070                           ;	Table Read Protection bit
  2071                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2072  30000C                     	org	3145740
  2073  30000C  0F                 	db	15
  2074                           
  2075                           ;Config register CONFIG7H @ 0x30000D
  2076                           ;	Boot Block Table Read Protection bit
  2077                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2078  30000D                     	org	3145741
  2079  30000D  40                 	db	64
  2080                           tosu	equ	0xFFF
  2081                           tosh	equ	0xFFE
  2082                           tosl	equ	0xFFD
  2083                           stkptr	equ	0xFFC
  2084                           pclatu	equ	0xFFB
  2085                           pclath	equ	0xFFA
  2086                           pcl	equ	0xFF9
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           prodh	equ	0xFF4
  2092                           prodl	equ	0xFF3
  2093                           indf0	equ	0xFEF
  2094                           postinc0	equ	0xFEE
  2095                           postdec0	equ	0xFED
  2096                           preinc0	equ	0xFEC
  2097                           plusw0	equ	0xFEB
  2098                           fsr0h	equ	0xFEA
  2099                           fsr0l	equ	0xFE9
  2100                           wreg	equ	0xFE8
  2101                           indf1	equ	0xFE7
  2102                           postinc1	equ	0xFE6
  2103                           postdec1	equ	0xFE5
  2104                           preinc1	equ	0xFE4
  2105                           plusw1	equ	0xFE3
  2106                           fsr1h	equ	0xFE2
  2107                           fsr1l	equ	0xFE1
  2108                           bsr	equ	0xFE0
  2109                           indf2	equ	0xFDF
  2110                           postinc2	equ	0xFDE
  2111                           postdec2	equ	0xFDD
  2112                           preinc2	equ	0xFDC
  2113                           plusw2	equ	0xFDB
  2114                           fsr2h	equ	0xFDA
  2115                           fsr2l	equ	0xFD9
  2116                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     17      25
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_bcd_down
    _main->_bcd_up
    _bcd_up->___awdiv
    _bcd_down->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4321
                                             12 COMRAM     5     5      0
                           _bcd_down
                             _bcd_up
                           _bin_down
                             _bin_up
                              _delay
                          _grey_down
                            _grey_up
                               _prng
                         _setDisplay
                            _setTask
                              _snake
 ---------------------------------------------------------------------------------
 (1) _snake                                                1     1      0     135
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setTask                                              4     0      4     417
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _setDisplay                                           2     0      2     262
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _prng                                                10    10      0     105
                                              0 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _grey_up                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _grey_down                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2     168
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _bin_up                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bin_down                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcd_up                                               4     4      0    1227
                                              8 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _bcd_down                                             4     4      0    1227
                                              8 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bcd_down
     ___awdiv
     ___awmod
   _bcd_up
     ___awdiv
     ___awmod
   _bin_down
   _bin_up
   _delay
   _grey_down
   _grey_up
   _prng
   _setDisplay
   _setTask
   _snake

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     11      19       1       19.7%
BITBIGSFRh          3E      0       0      36        0.0%
BITBIGSFRlh         2A      0       0      37        0.0%
BITBIGSFRllhh        E      0       0      38        0.0%
BITBIGSFRllhl        1      0       0      39        0.0%
BITBIGSFRlll         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      41        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Apr 11 17:32:54 2022

                     l35 F8AA                       l60 F848                       l44 F930  
                     l38 F8E0                       l71 FA04                       l63 F86E  
                     l48 FAE0                       l57 F84E                       l66 F85E  
                     l90 FA6E                       l76 F99A                       l87 FB5C  
           ___awdiv@sign 0006                      l100 FD4A                      l101 FE3C  
                    l107 FE38                      l391 FC0C                      l378 FCD0  
                    l954 F84C                      l970 F85C                      l962 F860  
                    l964 F86C                      l958 F846                      l968 F850  
                    l998 FAE4                      u240 FAF4                      u241 FAF0  
                    u250 FB0E                      u251 FB0A                      u260 FB20  
                    u261 FB1C                      u270 FB4E                      u271 FB4A  
                    u600 FCC0                      u601 FCBC                      u610 FB70  
                    u611 FB6C                      u620 FB8A                      u700 F920  
                    u621 FB86                      u285 FA10                      u701 F91C  
                    u550 FC20                      u630 FBA4                      u710 FA84  
                    u551 FC1C                      u631 FBA0                      u295 FA4E  
                    u711 FA80                      u560 FC3A                      u640 FBC2  
                    u720 FA9E                      u800 FD4A                      u561 FC36  
                    u641 FBBE                      u721 FA9A                      u801 FD46  
                    u570 FC60                      u650 FBD8                      u730 FAB6  
                    u810 FD58                      u571 FC5C                      u651 FBD4  
                    u731 FAB2                      u811 FD54                      u580 FC7E  
                    u660 FBFC                      u740 FACA                      u900 FE9E  
                    u820 FD96                      u581 FC7A                      u661 FBF8  
                    u741 FAC6                      u901 FE9A                      u821 FD92  
                    u590 FC9A                      u670 F8C6                      u750 FADE  
                    u910 FEB6                      u830 FDB2                      u591 FC96  
                    u671 F8C2                      u751 FADA                      u911 FEB2  
                    u831 FDAE                      u760 F9AC                      u680 F8E0  
                    u920 FECE                      u840 FDCC                      u761 F9A8  
                    u681 F8DC                      u921 FECA                      u841 FDC8  
                    u770 F942                      u690 F902                      u930 FEE6  
                    u850 FDE8                      u771 F93E                      u691 F8FE  
                    u931 FEE2                      u851 FDE4                      u940 FEFE  
                    u860 FE04                      u780 FD2A                      u941 FEFA  
                    u861 FE00                      u781 FD26                      u950 FF14  
                    u870 FE24                      u790 FD38                      u951 FF10  
                    u871 FE20                      u791 FD34                      u960 FF34  
                    u880 FE4A                      u961 FF30                      u881 FE46  
                    u970 FF54                      u890 FE86                      u971 FF50  
                    u891 FE82                      u980 FF74                      u981 FF70  
                    u990 FF94                      u991 FF90                      _bcd 0016  
                    _sum 0014             ___awmod@sign 0006                      wreg 000FE8  
                   l1000 FAF4                     l1010 FB32                     l1002 FAFC  
                   l1004 FB0E                     l1012 FB3C                     l1020 FB5A  
                   l1014 FB4E                     l1006 FB20                     l1200 FBE6  
                   l1024 FA08                     l1008 FB28              main@display 000F  
                   l1130 FC0E                     l1202 FBEC                     l1210 F89A  
                   l1026 FA6C                     l1140 FC3A                     l1132 FC12  
                   l1204 FBFC                     l1220 F8B6                     l1212 F8A6  
                   l1300 FD2A                     l1150 FC68                     l1142 FC42  
                   l1134 FC20                     l1206 FC04                     l1222 F8C6  
                   l1230 F90E                     l1310 FD9E                     l1302 FD38  
                   l1160 FCA2                     l1152 FC70                     l1144 FC46  
                   l1136 FC28                     l1224 F8CA                     l1240 FA84  
                   l1232 F920                     l1320 FDE8                     l1312 FDB2  
                   l1304 FD58                     l1170 FCC8                     l1162 FCA4  
                   l1154 FC7E                     l1146 FC4E                     l1138 FC2C  
                   l1218 F8B4                     l1234 F928                     l1226 F8E2  
                   l1330 FE4A                     l1322 FDF0                     l1314 FDB8  
                   l1306 FD82                     l1164 FCAA                     l1156 FC84  
                   l1148 FC60                     l1180 FB78                     l1260 FADE  
                   l1228 F902                     l1340 FEA2                     l1332 FE72  
                   l1324 FE04                     l1316 FDCC                     l1308 FD96  
                   l1158 FC9A                     l1166 FCB0                     l1190 FBAC  
                   l1182 FB7C                     l1174 FB5E                     l1270 F9FE  
                   l1254 FAA4                     l1246 FA8A                     l1238 FA70  
                   l1326 FE10                     l1318 FDD4                     l1168 FCC0  
                   l1192 FBB4                     l1184 FB8A                     l1176 FB62  
                   l1280 F94A                     l1272 FA02                     l1264 F99C  
                   l1256 FAB6                     l1248 FA9E                     l1360 FF20  
                   l1352 FEEA                     l1344 FEBA                     l1336 FE8A  
                   l1328 FE24                     l1194 FBC2                     l1186 FB92  
                   l1178 FB70                     l1282 F994                     l1266 F9AC  
                   l1258 FACA                     l1370 FF74                     l1362 FF34  
                   l1290 FCFA                     l1196 FBD8                     l1188 FBA4  
                   l1284 F998                     l1276 F932                     l1268 F9B4  
                   l1380 FFBC                     l1372 FF80                     l1364 FF40  
                   l1348 FED2                     l1356 FF02                     l1292 FCFE  
                   l1198 FBE0                     l1278 F942                     l1382 FFD0  
                   l1374 FF94                     l1366 FF54                     l1358 FF14  
                   l1294 FD0A                     l1384 FFDC                     l1376 FF9E  
                   l1368 FF60                     l1296 FD16                     l1288 FCD2  
                   l1386 FFF0                     l1378 FFB2                     l1298 FD1C  
                   u1000 FFB2                     u1001 FFAE                     u1010 FFD0  
                   u1011 FFCC                     u1020 FFF0                     u1021 FFEC  
                   _main FCD2                     _grey 0017                     _prng FA06  
                   start 0000             ___param_bank 000000                    ?_main 0001  
        __end_of___awdiv FCD2          __end_of___awmod FC0E                    ?_prng 0001  
        ___awdiv@divisor 0003          ___awdiv@counter 0005                    _PORTB 000F81  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
                  _added 0012                    _delay F89A          __end_of_grey_up F870  
                  _snake FAE2                    main@i 000D          __end_of_setTask F932  
                  tablat 000FF5                    status 000FD8          __initialization F870  
           __end_of_main 0000             __end_of_prng FA70                   ??_main 000D  
                 ??_prng 0001            __activetblptr 000000                   ?_delay 0001  
                 _ADCON1 000FC1         ___awdiv@dividend 0001                   ?_snake 0001  
       __end_of_bcd_down F99C         __end_of_bin_down F84A                   _bcd_up F99C  
              ??___awdiv 0005                ??___awmod 0005                   _bin_up F84A  
                 delay@i 0003                   delay@j 0005         ___awdiv@quotient 0007  
        ___awmod@divisor 0003                   isa$std 000001          ___awmod@counter 0005  
              ??_grey_up 0001             __pdataCOMRAM 0018                ??_setTask 0005  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization F894            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_delay F8E2            __end_of_snake FB5E  
                ??_delay 0003                  ??_snake 0001                  ?_bcd_up 0001  
                ?_bin_up 0001                ?_bcd_down 0001                ?_bin_down 0001  
            setTask@task 0001                  __Hparam 0000                  __Lparam 0000  
                ___awdiv FC0E                  ___awmod FB5E                  __pcinit F870  
                __ramtop 1000                  __ptext0 FCD2                  __ptext1 FAE2  
                __ptext2 F8E2                  __ptext3 FA70                  __ptext4 FA06  
                __ptext5 F860                  __ptext6 F850                  __ptext7 F89A  
                __ptext8 F84A                  __ptext9 F844               ??_bcd_down 0009  
      __end_of_grey_down F860                  _grey_up F860                  delay@ms 0001  
       ___awmod@dividend 0001               ??_bin_down 0001                  _setTask F8E2  
             _setDisplay FA70     end_of_initialization F894              prng@display 000A  
                prng@ans 0006            setTask@change 0003                _PORTBbits 000F81  
          bin_up@display 0001           __end_of_bcd_up FA06           __end_of_bin_up F850  
          __pidataCOMRAM F842      start_initialization F870              ?_setDisplay 0001  
       grey_down@display 0001                 ??_bcd_up 0009                 ??_bin_up 0001  
            __pbssCOMRAM 0012           setDisplay@task 0001                 ?___awdiv 0001  
               ?___awmod 0001                _direction 0018                 ?_grey_up 0001  
               ?_setTask 0001           grey_up@display 0001                _grey_down F850  
             ?_grey_down 0001            bcd_up@display 000B                 __Hrparam 0000  
               __Lrparam 0000                 _bcd_down F932                 _bin_down F844  
               __ptext10 F99C                 __ptext11 F932                 __ptext12 FB5E  
               __ptext13 FC0E             ??_setDisplay 0003             snake@display 0001  
              prng@xored 0008                 isa$xinst 000000                 main@task 0010  
     __end_of_setDisplay FAE2              ??_grey_down 0001          bin_down@display 0001  
        bcd_down@display 000B  
