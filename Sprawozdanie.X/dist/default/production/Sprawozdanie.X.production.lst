

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Apr 12 10:35:02 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.40
    31                           ; Generated 17/11/2021 GMT
    32                           ; 
    33                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  00F74A                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for _direction
    71  00F74A  0001               	dw	1
    72  0000                     _PORTBbits	set	3969
    73  0000                     _PORTB	set	3969
    74  0000                     _TRISA	set	3986
    75  0000                     _ADCON1	set	4033
    76  0000                     _TRISE	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISB	set	3987
    80  0000                     _PORTD	set	3971
    81                           
    82                           ; #config settings
    83                           
    84                           	psect	cinit
    85  00F778                     __pcinit:
    86                           	callstack 0
    87  00F778                     start_initialization:
    88                           	callstack 0
    89  00F778                     __initialization:
    90                           	callstack 0
    91                           
    92                           ; Initialize objects allocated to COMRAM (2 bytes)
    93                           ; load TBLPTR registers with __pidataCOMRAM
    94  00F778  0E4A               	movlw	low __pidataCOMRAM
    95  00F77A  6EF6               	movwf	tblptrl,c
    96  00F77C  0EF7               	movlw	high __pidataCOMRAM
    97  00F77E  6EF7               	movwf	tblptrh,c
    98  00F780  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    99  00F782  6EF8               	movwf	tblptru,c
   100  00F784  0009               	tblrd		*+	;fetch initializer
   101  00F786  CFF5 F018          	movff	tablat,__pdataCOMRAM
   102  00F78A  0009               	tblrd		*+	;fetch initializer
   103  00F78C  CFF5 F019          	movff	tablat,__pdataCOMRAM+1
   104                           
   105                           ; Clear objects allocated to COMRAM (6 bytes)
   106  00F790  6A17               	clrf	(__pbssCOMRAM+5)& (0+255),c
   107  00F792  6A16               	clrf	(__pbssCOMRAM+4)& (0+255),c
   108  00F794  6A15               	clrf	(__pbssCOMRAM+3)& (0+255),c
   109  00F796  6A14               	clrf	(__pbssCOMRAM+2)& (0+255),c
   110  00F798  6A13               	clrf	(__pbssCOMRAM+1)& (0+255),c
   111  00F79A  6A12               	clrf	__pbssCOMRAM& (0+255),c
   112  00F79C                     end_of_initialization:
   113                           	callstack 0
   114  00F79C                     __end_of__initialization:
   115                           	callstack 0
   116  00F79C  0100               	movlb	0
   117  00F79E  EF64  F07E         	goto	_main	;jump to C main() function
   118                           
   119                           	psect	bssCOMRAM
   120  000012                     __pbssCOMRAM:
   121                           	callstack 0
   122  000012                     _added:
   123                           	callstack 0
   124  000012                     	ds	2
   125  000014                     _sum:
   126                           	callstack 0
   127  000014                     	ds	2
   128  000016                     _bcd:
   129                           	callstack 0
   130  000016                     	ds	1
   131  000017                     _grey:
   132                           	callstack 0
   133  000017                     	ds	1
   134                           
   135                           	psect	dataCOMRAM
   136  000018                     __pdataCOMRAM:
   137                           	callstack 0
   138  000018                     _direction:
   139                           	callstack 0
   140  000018                     	ds	2
   141                           
   142                           	psect	cstackCOMRAM
   143  000001                     __pcstackCOMRAM:
   144                           	callstack 0
   145  000001                     ??_prng:
   146  000001                     ?_setTask:
   147                           	callstack 0
   148  000001                     ?___awdiv:
   149                           	callstack 0
   150  000001                     ?___awmod:
   151                           	callstack 0
   152  000001                     bin_up@display:
   153                           	callstack 0
   154  000001                     bin_down@display:
   155                           	callstack 0
   156  000001                     grey_up@display:
   157                           	callstack 0
   158  000001                     grey_down@display:
   159                           	callstack 0
   160  000001                     snake@display:
   161                           	callstack 0
   162  000001                     delay@ms:
   163                           	callstack 0
   164  000001                     setTask@task:
   165                           	callstack 0
   166  000001                     setDisplay@task:
   167                           	callstack 0
   168  000001                     ___awdiv@dividend:
   169                           	callstack 0
   170  000001                     ___awmod@dividend:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x0
   174  000001                     	ds	2
   175  000003                     delay@i:
   176                           	callstack 0
   177  000003                     setTask@change:
   178                           	callstack 0
   179  000003                     ___awdiv@divisor:
   180                           	callstack 0
   181  000003                     ___awmod@divisor:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0x2
   185  000003                     	ds	2
   186  000005                     delay@j:
   187                           	callstack 0
   188  000005                     ___awdiv@counter:
   189                           	callstack 0
   190  000005                     ___awmod@counter:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x4
   194  000005                     	ds	1
   195  000006                     ___awdiv@sign:
   196                           	callstack 0
   197  000006                     ___awmod@sign:
   198                           	callstack 0
   199  000006                     prng@ans:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x5
   203  000006                     	ds	1
   204  000007                     ___awdiv@quotient:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x6
   208  000007                     	ds	1
   209  000008                     prng@xored:
   210                           	callstack 0
   211                           
   212                           ; 2 bytes @ 0x7
   213  000008                     	ds	1
   214  000009                     ??_bcd_up:
   215  000009                     ??_bcd_down:
   216                           
   217                           ; 1 bytes @ 0x8
   218  000009                     	ds	1
   219  00000A                     prng@display:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0x9
   223  00000A                     	ds	1
   224  00000B                     bcd_up@display:
   225                           	callstack 0
   226  00000B                     bcd_down@display:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0xA
   230  00000B                     	ds	2
   231  00000D                     main@i:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0xC
   235  00000D                     	ds	2
   236  00000F                     main@display:
   237                           	callstack 0
   238                           
   239                           ; 1 bytes @ 0xE
   240  00000F                     	ds	1
   241  000010                     main@task:
   242                           	callstack 0
   243                           
   244                           ; 2 bytes @ 0xF
   245  000010                     	ds	2
   246                           
   247 ;;
   248 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   249 ;;
   250 ;; *************** function _main *****************
   251 ;; Defined at:
   252 ;;		line 185 in file "main.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;		None
   255 ;; Auto vars:     Size  Location     Type
   256 ;;  i               2   12[COMRAM] unsigned int 
   257 ;;  task            2   15[COMRAM] int 
   258 ;;  display         1   14[COMRAM] unsigned char 
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2, status,0, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   269 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   271 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   272 ;;Total ram usage:        5 bytes
   273 ;; Hardware stack levels required when called: 2
   274 ;; This function calls:
   275 ;;		_bcd_down
   276 ;;		_bcd_up
   277 ;;		_bin_down
   278 ;;		_bin_up
   279 ;;		_delay
   280 ;;		_grey_down
   281 ;;		_grey_up
   282 ;;		_prng
   283 ;;		_queue
   284 ;;		_setDisplay
   285 ;;		_setTask
   286 ;;		_snake
   287 ;; This function is called by:
   288 ;;		Startup code after reset
   289 ;; This function uses a non-reentrant model
   290 ;;
   291                           
   292                           	psect	text0
   293  00FCC8                     __ptext0:
   294                           	callstack 0
   295  00FCC8                     _main:
   296                           	callstack 29
   297  00FCC8                     
   298                           ;main.c: 186:     ADCON1=0x0F;
   299  00FCC8  0E0F               	movlw	15
   300  00FCCA  6EC1               	movwf	193,c	;volatile
   301                           
   302                           ;main.c: 188:     TRISA=0xC3;
   303  00FCCC  0EC3               	movlw	195
   304  00FCCE  6E92               	movwf	146,c	;volatile
   305                           
   306                           ;main.c: 189:     TRISB=0x3F;
   307  00FCD0  0E3F               	movlw	63
   308  00FCD2  6E93               	movwf	147,c	;volatile
   309                           
   310                           ;main.c: 190:     TRISC=0x01;
   311  00FCD4  0E01               	movlw	1
   312  00FCD6  6E94               	movwf	148,c	;volatile
   313                           
   314                           ;main.c: 191:     TRISD=0x00;
   315  00FCD8  0E00               	movlw	0
   316  00FCDA  6E95               	movwf	149,c	;volatile
   317                           
   318                           ;main.c: 192:     TRISE=0x00;
   319  00FCDC  0E00               	movlw	0
   320  00FCDE  6E96               	movwf	150,c	;volatile
   321                           
   322                           ;main.c: 194:     PORTB = 0;
   323  00FCE0  0E00               	movlw	0
   324  00FCE2  6E81               	movwf	129,c	;volatile
   325                           
   326                           ;main.c: 196:     unsigned char display = 0;
   327  00FCE4  0E00               	movlw	0
   328  00FCE6  6E0F               	movwf	main@display^0,c
   329                           
   330                           ;main.c: 197:     int task = 1;
   331  00FCE8  0E00               	movlw	0
   332  00FCEA  6E11               	movwf	(main@task+1)^0,c
   333  00FCEC  0E01               	movlw	1
   334  00FCEE  6E10               	movwf	main@task^0,c
   335  00FCF0                     l1329:
   336                           
   337                           ;main.c: 200:         PORTD = display;
   338  00FCF0  C00F  FF83         	movff	main@display,3971	;volatile
   339  00FCF4                     
   340                           ;main.c: 201:         delay(100);
   341  00FCF4  0E00               	movlw	0
   342  00FCF6  6E02               	movwf	(delay@ms+1)^0,c
   343  00FCF8  0E64               	movlw	100
   344  00FCFA  6E01               	movwf	delay@ms^0,c
   345  00FCFC  ECD1  F07B         	call	_delay	;wreg free
   346  00FD00                     
   347                           ;main.c: 204:         unsigned int i = 6000;
   348  00FD00  0E17               	movlw	23
   349  00FD02  6E0E               	movwf	(main@i+1)^0,c
   350  00FD04  0E70               	movlw	112
   351  00FD06  6E0D               	movwf	main@i^0,c
   352                           
   353                           ;main.c: 205:         while (PORTBbits.RB4 && PORTBbits.RB3 && i > 0) {
   354  00FD08  EF89  F07E         	goto	l1337
   355  00FD0C                     l1335:
   356                           
   357                           ;main.c: 206:             i--;
   358  00FD0C  060D               	decf	main@i^0,f,c
   359  00FD0E  A0D8               	btfss	status,0,c
   360  00FD10  060E               	decf	(main@i+1)^0,f,c
   361  00FD12                     l1337:
   362                           
   363                           ;main.c: 205:         while (PORTBbits.RB4 && PORTBbits.RB3 && i > 0) {
   364  00FD12  A881               	btfss	129,4,c	;volatile
   365  00FD14  EF8E  F07E         	goto	u861
   366  00FD18  EF90  F07E         	goto	u860
   367  00FD1C                     u861:
   368  00FD1C  EFA0  F07E         	goto	l109
   369  00FD20                     u860:
   370  00FD20  A681               	btfss	129,3,c	;volatile
   371  00FD22  EF95  F07E         	goto	u871
   372  00FD26  EF97  F07E         	goto	u870
   373  00FD2A                     u871:
   374  00FD2A  EFA0  F07E         	goto	l109
   375  00FD2E                     u870:
   376  00FD2E  500D               	movf	main@i^0,w,c
   377  00FD30  100E               	iorwf	(main@i+1)^0,w,c
   378  00FD32  A4D8               	btfss	status,2,c
   379  00FD34  EF9E  F07E         	goto	u881
   380  00FD38  EFA0  F07E         	goto	u880
   381  00FD3C                     u881:
   382  00FD3C  EF86  F07E         	goto	l1335
   383  00FD40                     u880:
   384  00FD40                     l109:
   385                           
   386                           ;main.c: 208:         if (PORTBbits.RB3 == 0) {
   387  00FD40  B681               	btfsc	129,3,c	;volatile
   388  00FD42  EFA5  F07E         	goto	u891
   389  00FD46  EFA7  F07E         	goto	u890
   390  00FD4A                     u891:
   391  00FD4A  EF19  F07F         	goto	l110
   392  00FD4E                     u890:
   393  00FD4E                     
   394                           ;main.c: 209:             task = setTask(task, 1);
   395  00FD4E  C010  F001         	movff	main@task,setTask@task
   396  00FD52  C011  F002         	movff	main@task+1,setTask@task+1
   397  00FD56  0E00               	movlw	0
   398  00FD58  6E04               	movwf	(setTask@change+1)^0,c
   399  00FD5A  0E01               	movlw	1
   400  00FD5C  6E03               	movwf	setTask@change^0,c
   401  00FD5E  ECF5  F07B         	call	_setTask	;wreg free
   402  00FD62  C001  F010         	movff	?_setTask,main@task
   403  00FD66  C002  F011         	movff	?_setTask+1,main@task+1
   404                           
   405                           ;main.c: 210:             display = setDisplay(task);
   406  00FD6A  C010  F001         	movff	main@task,setDisplay@task
   407  00FD6E  C011  F002         	movff	main@task+1,setDisplay@task+1
   408  00FD72  ECBC  F07C         	call	_setDisplay	;wreg free
   409  00FD76  6E0F               	movwf	main@display^0,c
   410  00FD78                     
   411                           ;main.c: 211:             if (task == 3) {
   412  00FD78  0E03               	movlw	3
   413  00FD7A  1810               	xorwf	main@task^0,w,c
   414  00FD7C  1011               	iorwf	(main@task+1)^0,w,c
   415  00FD7E  A4D8               	btfss	status,2,c
   416  00FD80  EFC4  F07E         	goto	u901
   417  00FD84  EFC6  F07E         	goto	u900
   418  00FD88                     u901:
   419  00FD88  EFCA  F07E         	goto	l1349
   420  00FD8C                     u900:
   421  00FD8C                     l1347:
   422                           
   423                           ;main.c: 212:                 grey = 1;
   424  00FD8C  0E01               	movlw	1
   425  00FD8E  6E17               	movwf	_grey^0,c
   426                           
   427                           ;main.c: 213:             } else if (task == 4) {
   428  00FD90  EF7C  F07F         	goto	l1395
   429  00FD94                     l1349:
   430  00FD94  0E04               	movlw	4
   431  00FD96  1810               	xorwf	main@task^0,w,c
   432  00FD98  1011               	iorwf	(main@task+1)^0,w,c
   433  00FD9A  A4D8               	btfss	status,2,c
   434  00FD9C  EFD2  F07E         	goto	u911
   435  00FDA0  EFD4  F07E         	goto	u910
   436  00FDA4                     u911:
   437  00FDA4  EFD7  F07E         	goto	l1353
   438  00FDA8                     u910:
   439  00FDA8                     l1351:
   440                           
   441                           ;main.c: 214:                 grey = 255;
   442  00FDA8  6817               	setf	_grey^0,c
   443                           
   444                           ;main.c: 215:             } else if (task == 5) {
   445  00FDAA  EF7C  F07F         	goto	l1395
   446  00FDAE                     l1353:
   447  00FDAE  0E05               	movlw	5
   448  00FDB0  1810               	xorwf	main@task^0,w,c
   449  00FDB2  1011               	iorwf	(main@task+1)^0,w,c
   450  00FDB4  A4D8               	btfss	status,2,c
   451  00FDB6  EFDF  F07E         	goto	u921
   452  00FDBA  EFE1  F07E         	goto	u920
   453  00FDBE                     u921:
   454  00FDBE  EFE5  F07E         	goto	l1357
   455  00FDC2                     u920:
   456  00FDC2                     l1355:
   457                           
   458                           ;main.c: 216:                 bcd = 0;
   459  00FDC2  0E00               	movlw	0
   460  00FDC4  6E16               	movwf	_bcd^0,c
   461                           
   462                           ;main.c: 217:             } else if (task == 6) {
   463  00FDC6  EF7C  F07F         	goto	l1395
   464  00FDCA                     l1357:
   465  00FDCA  0E06               	movlw	6
   466  00FDCC  1810               	xorwf	main@task^0,w,c
   467  00FDCE  1011               	iorwf	(main@task+1)^0,w,c
   468  00FDD0  A4D8               	btfss	status,2,c
   469  00FDD2  EFED  F07E         	goto	u931
   470  00FDD6  EFEF  F07E         	goto	u930
   471  00FDDA                     u931:
   472  00FDDA  EFF3  F07E         	goto	l1361
   473  00FDDE                     u930:
   474  00FDDE                     l1359:
   475                           
   476                           ;main.c: 218:                 bcd = 99;
   477  00FDDE  0E63               	movlw	99
   478  00FDE0  6E16               	movwf	_bcd^0,c
   479                           
   480                           ;main.c: 219:             } else if (task == 7) {
   481  00FDE2  EF7C  F07F         	goto	l1395
   482  00FDE6                     l1361:
   483  00FDE6  0E07               	movlw	7
   484  00FDE8  1810               	xorwf	main@task^0,w,c
   485  00FDEA  1011               	iorwf	(main@task+1)^0,w,c
   486  00FDEC  A4D8               	btfss	status,2,c
   487  00FDEE  EFFB  F07E         	goto	u941
   488  00FDF2  EFFD  F07E         	goto	u940
   489  00FDF6                     u941:
   490  00FDF6  EF03  F07F         	goto	l1365
   491  00FDFA                     u940:
   492  00FDFA                     l1363:
   493                           
   494                           ;main.c: 220:                 direction = 1;
   495  00FDFA  0E00               	movlw	0
   496  00FDFC  6E19               	movwf	(_direction+1)^0,c
   497  00FDFE  0E01               	movlw	1
   498  00FE00  6E18               	movwf	_direction^0,c
   499                           
   500                           ;main.c: 221:             } else if (task == 8) {
   501  00FE02  EF7C  F07F         	goto	l1395
   502  00FE06                     l1365:
   503  00FE06  0E08               	movlw	8
   504  00FE08  1810               	xorwf	main@task^0,w,c
   505  00FE0A  1011               	iorwf	(main@task+1)^0,w,c
   506  00FE0C  A4D8               	btfss	status,2,c
   507  00FE0E  EF0B  F07F         	goto	u951
   508  00FE12  EF0D  F07F         	goto	u950
   509  00FE16                     u951:
   510  00FE16  EF17  F07F         	goto	l116
   511  00FE1A                     u950:
   512  00FE1A                     l1367:
   513                           
   514                           ;main.c: 222:                 sum = 1;
   515  00FE1A  0E00               	movlw	0
   516  00FE1C  6E15               	movwf	(_sum+1)^0,c
   517  00FE1E  0E01               	movlw	1
   518  00FE20  6E14               	movwf	_sum^0,c
   519                           
   520                           ;main.c: 223:                 added = 1;
   521  00FE22  0E00               	movlw	0
   522  00FE24  6E13               	movwf	(_added+1)^0,c
   523  00FE26  0E01               	movlw	1
   524  00FE28  6E12               	movwf	_added^0,c
   525  00FE2A  EF7C  F07F         	goto	l1395
   526  00FE2E                     l116:
   527  00FE2E  EF7C  F07F         	goto	l1395
   528  00FE32                     l110:
   529  00FE32  B881               	btfsc	129,4,c	;volatile
   530  00FE34  EF1E  F07F         	goto	u961
   531  00FE38  EF20  F07F         	goto	u960
   532  00FE3C                     u961:
   533  00FE3C  EF7C  F07F         	goto	l1395
   534  00FE40                     u960:
   535  00FE40                     
   536                           ;main.c: 226:             task = setTask(task, -1);
   537  00FE40  C010  F001         	movff	main@task,setTask@task
   538  00FE44  C011  F002         	movff	main@task+1,setTask@task+1
   539  00FE48  0EFF               	movlw	255
   540  00FE4A  6E04               	movwf	(setTask@change+1)^0,c
   541  00FE4C  6803               	setf	setTask@change^0,c
   542  00FE4E  ECF5  F07B         	call	_setTask	;wreg free
   543  00FE52  C001  F010         	movff	?_setTask,main@task
   544  00FE56  C002  F011         	movff	?_setTask+1,main@task+1
   545                           
   546                           ;main.c: 227:             display = setDisplay(task);
   547  00FE5A  C010  F001         	movff	main@task,setDisplay@task
   548  00FE5E  C011  F002         	movff	main@task+1,setDisplay@task+1
   549  00FE62  ECBC  F07C         	call	_setDisplay	;wreg free
   550  00FE66  6E0F               	movwf	main@display^0,c
   551  00FE68                     
   552                           ;main.c: 228:             if (task == 3) {
   553  00FE68  0E03               	movlw	3
   554  00FE6A  1810               	xorwf	main@task^0,w,c
   555  00FE6C  1011               	iorwf	(main@task+1)^0,w,c
   556  00FE6E  A4D8               	btfss	status,2,c
   557  00FE70  EF3C  F07F         	goto	u971
   558  00FE74  EF3E  F07F         	goto	u970
   559  00FE78                     u971:
   560  00FE78  EF40  F07F         	goto	l1375
   561  00FE7C                     u970:
   562  00FE7C  EFC6  F07E         	goto	l1347
   563  00FE80                     l1375:
   564  00FE80  0E04               	movlw	4
   565  00FE82  1810               	xorwf	main@task^0,w,c
   566  00FE84  1011               	iorwf	(main@task+1)^0,w,c
   567  00FE86  A4D8               	btfss	status,2,c
   568  00FE88  EF48  F07F         	goto	u981
   569  00FE8C  EF4A  F07F         	goto	u980
   570  00FE90                     u981:
   571  00FE90  EF4C  F07F         	goto	l1379
   572  00FE94                     u980:
   573  00FE94  EFD4  F07E         	goto	l1351
   574  00FE98                     l1379:
   575  00FE98  0E05               	movlw	5
   576  00FE9A  1810               	xorwf	main@task^0,w,c
   577  00FE9C  1011               	iorwf	(main@task+1)^0,w,c
   578  00FE9E  A4D8               	btfss	status,2,c
   579  00FEA0  EF54  F07F         	goto	u991
   580  00FEA4  EF56  F07F         	goto	u990
   581  00FEA8                     u991:
   582  00FEA8  EF58  F07F         	goto	l1383
   583  00FEAC                     u990:
   584  00FEAC  EFE1  F07E         	goto	l1355
   585  00FEB0                     l1383:
   586  00FEB0  0E06               	movlw	6
   587  00FEB2  1810               	xorwf	main@task^0,w,c
   588  00FEB4  1011               	iorwf	(main@task+1)^0,w,c
   589  00FEB6  A4D8               	btfss	status,2,c
   590  00FEB8  EF60  F07F         	goto	u1001
   591  00FEBC  EF62  F07F         	goto	u1000
   592  00FEC0                     u1001:
   593  00FEC0  EF64  F07F         	goto	l1387
   594  00FEC4                     u1000:
   595  00FEC4  EFEF  F07E         	goto	l1359
   596  00FEC8                     l1387:
   597  00FEC8  0E07               	movlw	7
   598  00FECA  1810               	xorwf	main@task^0,w,c
   599  00FECC  1011               	iorwf	(main@task+1)^0,w,c
   600  00FECE  A4D8               	btfss	status,2,c
   601  00FED0  EF6C  F07F         	goto	u1011
   602  00FED4  EF6E  F07F         	goto	u1010
   603  00FED8                     u1011:
   604  00FED8  EF70  F07F         	goto	l1391
   605  00FEDC                     u1010:
   606  00FEDC  EFFD  F07E         	goto	l1363
   607  00FEE0                     l1391:
   608  00FEE0  0E08               	movlw	8
   609  00FEE2  1810               	xorwf	main@task^0,w,c
   610  00FEE4  1011               	iorwf	(main@task+1)^0,w,c
   611  00FEE6  A4D8               	btfss	status,2,c
   612  00FEE8  EF78  F07F         	goto	u1021
   613  00FEEC  EF7A  F07F         	goto	u1020
   614  00FEF0                     u1021:
   615  00FEF0  EF17  F07F         	goto	l116
   616  00FEF4                     u1020:
   617  00FEF4  EF0D  F07F         	goto	l1367
   618  00FEF8                     l1395:
   619                           
   620                           ;main.c: 244:         if (task == 1) {
   621  00FEF8  0410               	decf	main@task^0,w,c
   622  00FEFA  1011               	iorwf	(main@task+1)^0,w,c
   623  00FEFC  A4D8               	btfss	status,2,c
   624  00FEFE  EF83  F07F         	goto	u1031
   625  00FF02  EF85  F07F         	goto	u1030
   626  00FF06                     u1031:
   627  00FF06  EF8B  F07F         	goto	l1399
   628  00FF0A                     u1030:
   629  00FF0A                     
   630                           ;main.c: 245:             display = bin_up(display);
   631  00FF0A  500F               	movf	main@display^0,w,c
   632  00FF0C  ECA9  F07B         	call	_bin_up
   633  00FF10  6E0F               	movwf	main@display^0,c
   634                           
   635                           ;main.c: 246:         } else if (task == 2) {
   636  00FF12  EF78  F07E         	goto	l1329
   637  00FF16                     l1399:
   638  00FF16  0E02               	movlw	2
   639  00FF18  1810               	xorwf	main@task^0,w,c
   640  00FF1A  1011               	iorwf	(main@task+1)^0,w,c
   641  00FF1C  A4D8               	btfss	status,2,c
   642  00FF1E  EF93  F07F         	goto	u1041
   643  00FF22  EF95  F07F         	goto	u1040
   644  00FF26                     u1041:
   645  00FF26  EF9B  F07F         	goto	l1403
   646  00FF2A                     u1040:
   647  00FF2A                     
   648                           ;main.c: 247:             display = bin_down(display);
   649  00FF2A  500F               	movf	main@display^0,w,c
   650  00FF2C  ECA6  F07B         	call	_bin_down
   651  00FF30  6E0F               	movwf	main@display^0,c
   652                           
   653                           ;main.c: 248:         } else if (task == 3) {
   654  00FF32  EF78  F07E         	goto	l1329
   655  00FF36                     l1403:
   656  00FF36  0E03               	movlw	3
   657  00FF38  1810               	xorwf	main@task^0,w,c
   658  00FF3A  1011               	iorwf	(main@task+1)^0,w,c
   659  00FF3C  A4D8               	btfss	status,2,c
   660  00FF3E  EFA3  F07F         	goto	u1051
   661  00FF42  EFA5  F07F         	goto	u1050
   662  00FF46                     u1051:
   663  00FF46  EFAB  F07F         	goto	l1407
   664  00FF4A                     u1050:
   665  00FF4A                     
   666                           ;main.c: 249:             display = grey_up(display);
   667  00FF4A  500F               	movf	main@display^0,w,c
   668  00FF4C  ECB4  F07B         	call	_grey_up
   669  00FF50  6E0F               	movwf	main@display^0,c
   670                           
   671                           ;main.c: 250:         } else if (task == 4) {
   672  00FF52  EF78  F07E         	goto	l1329
   673  00FF56                     l1407:
   674  00FF56  0E04               	movlw	4
   675  00FF58  1810               	xorwf	main@task^0,w,c
   676  00FF5A  1011               	iorwf	(main@task+1)^0,w,c
   677  00FF5C  A4D8               	btfss	status,2,c
   678  00FF5E  EFB3  F07F         	goto	u1061
   679  00FF62  EFB5  F07F         	goto	u1060
   680  00FF66                     u1061:
   681  00FF66  EFBB  F07F         	goto	l1411
   682  00FF6A                     u1060:
   683  00FF6A                     
   684                           ;main.c: 251:             display = grey_down(display);
   685  00FF6A  500F               	movf	main@display^0,w,c
   686  00FF6C  ECAC  F07B         	call	_grey_down
   687  00FF70  6E0F               	movwf	main@display^0,c
   688                           
   689                           ;main.c: 252:         } else if (task == 5) {
   690  00FF72  EF78  F07E         	goto	l1329
   691  00FF76                     l1411:
   692  00FF76  0E05               	movlw	5
   693  00FF78  1810               	xorwf	main@task^0,w,c
   694  00FF7A  1011               	iorwf	(main@task+1)^0,w,c
   695  00FF7C  A4D8               	btfss	status,2,c
   696  00FF7E  EFC3  F07F         	goto	u1071
   697  00FF82  EFC5  F07F         	goto	u1070
   698  00FF86                     u1071:
   699  00FF86  EFCA  F07F         	goto	l1415
   700  00FF8A                     u1070:
   701  00FF8A                     
   702                           ;main.c: 253:             display = bcd_up();
   703  00FF8A  EC52  F07C         	call	_bcd_up	;wreg free
   704  00FF8E  6E0F               	movwf	main@display^0,c
   705                           
   706                           ;main.c: 254:         } else if (task == 6) {
   707  00FF90  EF78  F07E         	goto	l1329
   708  00FF94                     l1415:
   709  00FF94  0E06               	movlw	6
   710  00FF96  1810               	xorwf	main@task^0,w,c
   711  00FF98  1011               	iorwf	(main@task+1)^0,w,c
   712  00FF9A  A4D8               	btfss	status,2,c
   713  00FF9C  EFD2  F07F         	goto	u1081
   714  00FFA0  EFD4  F07F         	goto	u1080
   715  00FFA4                     u1081:
   716  00FFA4  EFD9  F07F         	goto	l1419
   717  00FFA8                     u1080:
   718  00FFA8                     
   719                           ;main.c: 255:             display = bcd_down();
   720  00FFA8  EC1D  F07C         	call	_bcd_down	;wreg free
   721  00FFAC  6E0F               	movwf	main@display^0,c
   722                           
   723                           ;main.c: 256:         } else if (task == 7) {
   724  00FFAE  EF78  F07E         	goto	l1329
   725  00FFB2                     l1419:
   726  00FFB2  0E07               	movlw	7
   727  00FFB4  1810               	xorwf	main@task^0,w,c
   728  00FFB6  1011               	iorwf	(main@task+1)^0,w,c
   729  00FFB8  A4D8               	btfss	status,2,c
   730  00FFBA  EFE1  F07F         	goto	u1091
   731  00FFBE  EFE3  F07F         	goto	u1090
   732  00FFC2                     u1091:
   733  00FFC2  EFE9  F07F         	goto	l1423
   734  00FFC6                     u1090:
   735  00FFC6                     
   736                           ;main.c: 257:             display = snake(display);
   737  00FFC6  500F               	movf	main@display^0,w,c
   738  00FFC8  ECF5  F07C         	call	_snake
   739  00FFCC  6E0F               	movwf	main@display^0,c
   740                           
   741                           ;main.c: 258:         } else if (task == 8) {
   742  00FFCE  EF78  F07E         	goto	l1329
   743  00FFD2                     l1423:
   744  00FFD2  0E08               	movlw	8
   745  00FFD4  1810               	xorwf	main@task^0,w,c
   746  00FFD6  1011               	iorwf	(main@task+1)^0,w,c
   747  00FFD8  A4D8               	btfss	status,2,c
   748  00FFDA  EFF1  F07F         	goto	u1101
   749  00FFDE  EFF3  F07F         	goto	u1100
   750  00FFE2                     u1101:
   751  00FFE2  EFF8  F07F         	goto	l1427
   752  00FFE6                     u1100:
   753  00FFE6                     
   754                           ;main.c: 259:             display = queue();
   755  00FFE6  ECED  F07D         	call	_queue	;wreg free
   756  00FFEA  6E0F               	movwf	main@display^0,c
   757                           
   758                           ;main.c: 260:         } else {
   759  00FFEC  EF78  F07E         	goto	l1329
   760  00FFF0                     l1427:
   761                           
   762                           ;main.c: 261:             display = prng(display);
   763  00FFF0  500F               	movf	main@display^0,w,c
   764  00FFF2  EC87  F07C         	call	_prng
   765  00FFF6  6E0F               	movwf	main@display^0,c
   766  00FFF8  EF78  F07E         	goto	l1329
   767  00FFFC  EF00  F000         	goto	start
   768  010000                     __end_of_main:
   769                           	callstack 0
   770                           
   771 ;; *************** function _snake *****************
   772 ;; Defined at:
   773 ;;		line 140 in file "main.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  display         1    wreg     unsigned char 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  display         1    0[COMRAM] unsigned char 
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      unsigned char 
   780 ;; Registers used:
   781 ;;		wreg, status,2, status,0
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;Total ram usage:        1 bytes
   792 ;; Hardware stack levels used: 1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text1
   801  00F9EA                     __ptext1:
   802                           	callstack 0
   803  00F9EA                     _snake:
   804                           	callstack 30
   805                           
   806                           ;incstack = 0
   807                           ;snake@display stored from wreg
   808  00F9EA  6E01               	movwf	snake@display^0,c
   809  00F9EC                     
   810                           ;main.c: 141:     if (display < 7) {
   811  00F9EC  0E07               	movlw	7
   812  00F9EE  6001               	cpfslt	snake@display^0,c
   813  00F9F0  EFFC  F07C         	goto	u241
   814  00F9F4  EFFE  F07C         	goto	u240
   815  00F9F8                     u241:
   816  00F9F8  EF02  F07D         	goto	l1011
   817  00F9FC                     u240:
   818  00F9FC                     
   819                           ;main.c: 142:   display = (display << 1) ^ 1;
   820  00F9FC  80D8               	bsf	status,0,c
   821  00F9FE  3601               	rlcf	snake@display^0,f,c
   822                           
   823                           ;main.c: 143:  } else {
   824  00FA00  EF31  F07D         	goto	l1029
   825  00FA04                     l1011:
   826                           
   827                           ;main.c: 144:   if (direction == 1) {
   828  00FA04  0418               	decf	_direction^0,w,c
   829  00FA06  1019               	iorwf	(_direction+1)^0,w,c
   830  00FA08  A4D8               	btfss	status,2,c
   831  00FA0A  EF09  F07D         	goto	u251
   832  00FA0E  EF0B  F07D         	goto	u250
   833  00FA12                     u251:
   834  00FA12  EF22  F07D         	goto	l1021
   835  00FA16                     u250:
   836  00FA16                     
   837                           ;main.c: 145:             if (display == 224) {
   838  00FA16  0EE0               	movlw	224
   839  00FA18  1801               	xorwf	snake@display^0,w,c
   840  00FA1A  A4D8               	btfss	status,2,c
   841  00FA1C  EF12  F07D         	goto	u261
   842  00FA20  EF14  F07D         	goto	u260
   843  00FA24                     u261:
   844  00FA24  EF1D  F07D         	goto	l1019
   845  00FA28                     u260:
   846  00FA28                     
   847                           ;main.c: 146:     direction = 0;
   848  00FA28  0E00               	movlw	0
   849  00FA2A  6E19               	movwf	(_direction+1)^0,c
   850  00FA2C  0E00               	movlw	0
   851  00FA2E  6E18               	movwf	_direction^0,c
   852  00FA30                     l1017:
   853                           
   854                           ;main.c: 147:     display = display >> 1;
   855  00FA30  90D8               	bcf	status,0,c
   856  00FA32  3001               	rrcf	snake@display^0,w,c
   857  00FA34  6E01               	movwf	snake@display^0,c
   858                           
   859                           ;main.c: 148:             } else {
   860  00FA36  EF31  F07D         	goto	l1029
   861  00FA3A                     l1019:
   862                           
   863                           ;main.c: 149:     display = display << 1;
   864  00FA3A  5001               	movf	snake@display^0,w,c
   865  00FA3C  2401               	addwf	snake@display^0,w,c
   866  00FA3E  6E01               	movwf	snake@display^0,c
   867  00FA40  EF31  F07D         	goto	l1029
   868  00FA44                     l1021:
   869                           
   870                           ;main.c: 152:    if (display == 7) {
   871  00FA44  0E07               	movlw	7
   872  00FA46  1801               	xorwf	snake@display^0,w,c
   873  00FA48  A4D8               	btfss	status,2,c
   874  00FA4A  EF29  F07D         	goto	u271
   875  00FA4E  EF2B  F07D         	goto	u270
   876  00FA52                     u271:
   877  00FA52  EF18  F07D         	goto	l1017
   878  00FA56                     u270:
   879  00FA56                     
   880                           ;main.c: 153:     direction = 1;
   881  00FA56  0E00               	movlw	0
   882  00FA58  6E19               	movwf	(_direction+1)^0,c
   883  00FA5A  0E01               	movlw	1
   884  00FA5C  6E18               	movwf	_direction^0,c
   885  00FA5E  EF1D  F07D         	goto	l1019
   886  00FA62                     l1029:
   887                           
   888                           ;main.c: 160:     return display;
   889  00FA62  5001               	movf	snake@display^0,w,c
   890  00FA64  0012               	return		;funcret
   891  00FA66                     __end_of_snake:
   892                           	callstack 0
   893                           
   894 ;; *************** function _setTask *****************
   895 ;; Defined at:
   896 ;;		line 78 in file "main.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  task            2    0[COMRAM] int 
   899 ;;  change          2    2[COMRAM] int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  2    0[COMRAM] int 
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   914 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;Total ram usage:        4 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_main
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text2
   925  00F7EA                     __ptext2:
   926                           	callstack 0
   927  00F7EA                     _setTask:
   928                           	callstack 30
   929  00F7EA                     
   930                           ;main.c: 79:     task = task + change;
   931  00F7EA  5003               	movf	setTask@change^0,w,c
   932  00F7EC  2401               	addwf	setTask@task^0,w,c
   933  00F7EE  6E01               	movwf	setTask@task^0,c
   934  00F7F0  5004               	movf	(setTask@change+1)^0,w,c
   935  00F7F2  2002               	addwfc	(setTask@task+1)^0,w,c
   936  00F7F4  6E02               	movwf	(setTask@task+1)^0,c
   937                           
   938                           ;main.c: 80:     if (task == 10) {
   939  00F7F6  0E0A               	movlw	10
   940  00F7F8  1801               	xorwf	setTask@task^0,w,c
   941  00F7FA  1002               	iorwf	(setTask@task+1)^0,w,c
   942  00F7FC  A4D8               	btfss	status,2,c
   943  00F7FE  EF03  F07C         	goto	u771
   944  00F802  EF05  F07C         	goto	u770
   945  00F806                     u771:
   946  00F806  EF0B  F07C         	goto	l1269
   947  00F80A                     u770:
   948  00F80A                     
   949                           ;main.c: 81:         task = 1;
   950  00F80A  0E00               	movlw	0
   951  00F80C  6E02               	movwf	(setTask@task+1)^0,c
   952  00F80E  0E01               	movlw	1
   953  00F810  6E01               	movwf	setTask@task^0,c
   954                           
   955                           ;main.c: 82:     } else if (task == 0) {
   956  00F812  EF18  F07C         	goto	l1273
   957  00F816                     l1269:
   958  00F816  5001               	movf	setTask@task^0,w,c
   959  00F818  1002               	iorwf	(setTask@task+1)^0,w,c
   960  00F81A  A4D8               	btfss	status,2,c
   961  00F81C  EF12  F07C         	goto	u781
   962  00F820  EF14  F07C         	goto	u780
   963  00F824                     u781:
   964  00F824  EF18  F07C         	goto	l1273
   965  00F828                     u780:
   966  00F828                     
   967                           ;main.c: 83:         task = 9;
   968  00F828  0E00               	movlw	0
   969  00F82A  6E02               	movwf	(setTask@task+1)^0,c
   970  00F82C  0E09               	movlw	9
   971  00F82E  6E01               	movwf	setTask@task^0,c
   972  00F830                     l1273:
   973                           
   974                           ;main.c: 85:     return task;
   975  00F830  C001  F001         	movff	setTask@task,?_setTask
   976  00F834  C002  F002         	movff	setTask@task+1,?_setTask+1
   977  00F838  0012               	return		;funcret
   978  00F83A                     __end_of_setTask:
   979                           	callstack 0
   980                           
   981 ;; *************** function _setDisplay *****************
   982 ;; Defined at:
   983 ;;		line 88 in file "main.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  task            2    0[COMRAM] int 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      unsigned char 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   997 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;Total ram usage:        2 bytes
  1002 ;; Hardware stack levels used: 1
  1003 ;; This function calls:
  1004 ;;		Nothing
  1005 ;; This function is called by:
  1006 ;;		_main
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text3
  1011  00F978                     __ptext3:
  1012                           	callstack 0
  1013  00F978                     _setDisplay:
  1014                           	callstack 30
  1015  00F978                     
  1016                           ;main.c: 89:     if (task == 2) {
  1017  00F978  0E02               	movlw	2
  1018  00F97A  1801               	xorwf	setDisplay@task^0,w,c
  1019  00F97C  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1020  00F97E  A4D8               	btfss	status,2,c
  1021  00F980  EFC4  F07C         	goto	u791
  1022  00F984  EFC6  F07C         	goto	u790
  1023  00F988                     u791:
  1024  00F988  EFC9  F07C         	goto	l1285
  1025  00F98C                     u790:
  1026  00F98C                     
  1027                           ;main.c: 90:         return 255;
  1028  00F98C  0EFF               	movlw	255
  1029  00F98E  EFF4  F07C         	goto	l48
  1030  00F992                     l1285:
  1031  00F992  0E09               	movlw	9
  1032  00F994  1801               	xorwf	setDisplay@task^0,w,c
  1033  00F996  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1034  00F998  A4D8               	btfss	status,2,c
  1035  00F99A  EFD1  F07C         	goto	u801
  1036  00F99E  EFD3  F07C         	goto	u800
  1037  00F9A2                     u801:
  1038  00F9A2  EFD6  F07C         	goto	l1293
  1039  00F9A6                     u800:
  1040  00F9A6                     
  1041                           ;main.c: 92:         return 1;
  1042  00F9A6  0E01               	movlw	1
  1043  00F9A8  EFF4  F07C         	goto	l48
  1044  00F9AC                     l1293:
  1045  00F9AC  0401               	decf	setDisplay@task^0,w,c
  1046  00F9AE  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1047  00F9B0  B4D8               	btfsc	status,2,c
  1048  00F9B2  EFDD  F07C         	goto	u811
  1049  00F9B6  EFDF  F07C         	goto	u810
  1050  00F9BA                     u811:
  1051  00F9BA  EFF3  F07C         	goto	l1299
  1052  00F9BE                     u810:
  1053  00F9BE  0E03               	movlw	3
  1054  00F9C0  1801               	xorwf	setDisplay@task^0,w,c
  1055  00F9C2  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1056  00F9C4  B4D8               	btfsc	status,2,c
  1057  00F9C6  EFE7  F07C         	goto	u821
  1058  00F9CA  EFE9  F07C         	goto	u820
  1059  00F9CE                     u821:
  1060  00F9CE  EFF3  F07C         	goto	l1299
  1061  00F9D2                     u820:
  1062  00F9D2  0E07               	movlw	7
  1063  00F9D4  1801               	xorwf	setDisplay@task^0,w,c
  1064  00F9D6  1002               	iorwf	(setDisplay@task+1)^0,w,c
  1065  00F9D8  A4D8               	btfss	status,2,c
  1066  00F9DA  EFF1  F07C         	goto	u831
  1067  00F9DE  EFF3  F07C         	goto	u830
  1068  00F9E2                     u831:
  1069  00F9E2  EFF4  F07C         	goto	l48
  1070  00F9E6                     u830:
  1071  00F9E6                     l1299:
  1072                           
  1073                           ;main.c: 94:         return 0;
  1074  00F9E6  0E00               	movlw	0
  1075  00F9E8                     l48:
  1076  00F9E8  0012               	return		;funcret
  1077  00F9EA                     __end_of_setDisplay:
  1078                           	callstack 0
  1079                           
  1080 ;; *************** function _queue *****************
  1081 ;; Defined at:
  1082 ;;		line 163 in file "main.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      unsigned char 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used: 1
  1102 ;; This function calls:
  1103 ;;		Nothing
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text4
  1110  00FBDA                     __ptext4:
  1111                           	callstack 0
  1112  00FBDA                     _queue:
  1113                           	callstack 30
  1114  00FBDA                     
  1115                           ;main.c: 164:     if (sum == 128 || sum == 192 || sum == 224 || sum == 240 || sum == 248
      +                           || sum ==252 || sum == 254) {
  1116  00FBDA  0E80               	movlw	128
  1117  00FBDC  1814               	xorwf	_sum^0,w,c
  1118  00FBDE  1015               	iorwf	(_sum+1)^0,w,c
  1119  00FBE0  B4D8               	btfsc	status,2,c
  1120  00FBE2  EFF5  F07D         	goto	u281
  1121  00FBE6  EFF7  F07D         	goto	u280
  1122  00FBEA                     u281:
  1123  00FBEA  EF33  F07E         	goto	l1047
  1124  00FBEE                     u280:
  1125  00FBEE  0EC0               	movlw	192
  1126  00FBF0  1814               	xorwf	_sum^0,w,c
  1127  00FBF2  1015               	iorwf	(_sum+1)^0,w,c
  1128  00FBF4  B4D8               	btfsc	status,2,c
  1129  00FBF6  EFFF  F07D         	goto	u291
  1130  00FBFA  EF01  F07E         	goto	u290
  1131  00FBFE                     u291:
  1132  00FBFE  EF33  F07E         	goto	l1047
  1133  00FC02                     u290:
  1134  00FC02  0EE0               	movlw	224
  1135  00FC04  1814               	xorwf	_sum^0,w,c
  1136  00FC06  1015               	iorwf	(_sum+1)^0,w,c
  1137  00FC08  B4D8               	btfsc	status,2,c
  1138  00FC0A  EF09  F07E         	goto	u301
  1139  00FC0E  EF0B  F07E         	goto	u300
  1140  00FC12                     u301:
  1141  00FC12  EF33  F07E         	goto	l1047
  1142  00FC16                     u300:
  1143  00FC16  0EF0               	movlw	240
  1144  00FC18  1814               	xorwf	_sum^0,w,c
  1145  00FC1A  1015               	iorwf	(_sum+1)^0,w,c
  1146  00FC1C  B4D8               	btfsc	status,2,c
  1147  00FC1E  EF13  F07E         	goto	u311
  1148  00FC22  EF15  F07E         	goto	u310
  1149  00FC26                     u311:
  1150  00FC26  EF33  F07E         	goto	l1047
  1151  00FC2A                     u310:
  1152  00FC2A  0EF8               	movlw	248
  1153  00FC2C  1814               	xorwf	_sum^0,w,c
  1154  00FC2E  1015               	iorwf	(_sum+1)^0,w,c
  1155  00FC30  B4D8               	btfsc	status,2,c
  1156  00FC32  EF1D  F07E         	goto	u321
  1157  00FC36  EF1F  F07E         	goto	u320
  1158  00FC3A                     u321:
  1159  00FC3A  EF33  F07E         	goto	l1047
  1160  00FC3E                     u320:
  1161  00FC3E  0EFC               	movlw	252
  1162  00FC40  1814               	xorwf	_sum^0,w,c
  1163  00FC42  1015               	iorwf	(_sum+1)^0,w,c
  1164  00FC44  B4D8               	btfsc	status,2,c
  1165  00FC46  EF27  F07E         	goto	u331
  1166  00FC4A  EF29  F07E         	goto	u330
  1167  00FC4E                     u331:
  1168  00FC4E  EF33  F07E         	goto	l1047
  1169  00FC52                     u330:
  1170  00FC52  0EFE               	movlw	254
  1171  00FC54  1814               	xorwf	_sum^0,w,c
  1172  00FC56  1015               	iorwf	(_sum+1)^0,w,c
  1173  00FC58  A4D8               	btfss	status,2,c
  1174  00FC5A  EF31  F07E         	goto	u341
  1175  00FC5E  EF33  F07E         	goto	u340
  1176  00FC62                     u341:
  1177  00FC62  EF3E  F07E         	goto	l1051
  1178  00FC66                     u340:
  1179  00FC66                     l1047:
  1180                           
  1181                           ;main.c: 165:         added = 1;
  1182  00FC66  0E00               	movlw	0
  1183  00FC68  6E13               	movwf	(_added+1)^0,c
  1184  00FC6A  0E01               	movlw	1
  1185  00FC6C  6E12               	movwf	_added^0,c
  1186  00FC6E                     
  1187                           ;main.c: 166:         sum = sum ^ added;
  1188  00FC6E  0E01               	movlw	1
  1189  00FC70  1814               	xorwf	_sum^0,w,c
  1190  00FC72  6E14               	movwf	_sum^0,c
  1191  00FC74  5015               	movf	(_sum+1)^0,w,c
  1192  00FC76  6E15               	movwf	(_sum+1)^0,c
  1193                           
  1194                           ;main.c: 167:     } else if (sum == 255) {
  1195  00FC78  EF62  F07E         	goto	l1057
  1196  00FC7C                     l1051:
  1197  00FC7C  2814               	incf	_sum^0,w,c
  1198  00FC7E  1015               	iorwf	(_sum+1)^0,w,c
  1199  00FC80  A4D8               	btfss	status,2,c
  1200  00FC82  EF45  F07E         	goto	u351
  1201  00FC86  EF47  F07E         	goto	u350
  1202  00FC8A                     u351:
  1203  00FC8A  EF51  F07E         	goto	l1055
  1204  00FC8E                     u350:
  1205  00FC8E                     
  1206                           ;main.c: 168:         sum = 1;
  1207  00FC8E  0E00               	movlw	0
  1208  00FC90  6E15               	movwf	(_sum+1)^0,c
  1209  00FC92  0E01               	movlw	1
  1210  00FC94  6E14               	movwf	_sum^0,c
  1211                           
  1212                           ;main.c: 169:         added = 1;
  1213  00FC96  0E00               	movlw	0
  1214  00FC98  6E13               	movwf	(_added+1)^0,c
  1215  00FC9A  0E01               	movlw	1
  1216  00FC9C  6E12               	movwf	_added^0,c
  1217                           
  1218                           ;main.c: 170:     } else {
  1219  00FC9E  EF62  F07E         	goto	l1057
  1220  00FCA2                     l1055:
  1221                           
  1222                           ;main.c: 171:         sum = sum ^ added;
  1223  00FCA2  5012               	movf	_added^0,w,c
  1224  00FCA4  1814               	xorwf	_sum^0,w,c
  1225  00FCA6  6E14               	movwf	_sum^0,c
  1226  00FCA8  5013               	movf	(_added+1)^0,w,c
  1227  00FCAA  1815               	xorwf	(_sum+1)^0,w,c
  1228  00FCAC  6E15               	movwf	(_sum+1)^0,c
  1229                           
  1230                           ;main.c: 172:         added = added << 1;
  1231  00FCAE  90D8               	bcf	status,0,c
  1232  00FCB0  3412               	rlcf	_added^0,w,c
  1233  00FCB2  6E12               	movwf	_added^0,c
  1234  00FCB4  3413               	rlcf	(_added+1)^0,w,c
  1235  00FCB6  6E13               	movwf	(_added+1)^0,c
  1236                           
  1237                           ;main.c: 173:         sum = sum ^ added;
  1238  00FCB8  5012               	movf	_added^0,w,c
  1239  00FCBA  1814               	xorwf	_sum^0,w,c
  1240  00FCBC  6E14               	movwf	_sum^0,c
  1241  00FCBE  5013               	movf	(_added+1)^0,w,c
  1242  00FCC0  1815               	xorwf	(_sum+1)^0,w,c
  1243  00FCC2  6E15               	movwf	(_sum+1)^0,c
  1244  00FCC4                     l1057:
  1245                           
  1246                           ;main.c: 175:     return sum;
  1247  00FCC4  5014               	movf	_sum^0,w,c
  1248  00FCC6  0012               	return		;funcret
  1249  00FCC8                     __end_of_queue:
  1250                           	callstack 0
  1251                           
  1252 ;; *************** function _prng *****************
  1253 ;; Defined at:
  1254 ;;		line 178 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  display         1    wreg     unsigned char 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  display         1    9[COMRAM] unsigned char 
  1259 ;;  xored           2    7[COMRAM] int 
  1260 ;;  ans             2    5[COMRAM] int 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      unsigned char 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, status,0
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;Total ram usage:       10 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text5
  1284  00F90E                     __ptext5:
  1285                           	callstack 0
  1286  00F90E                     _prng:
  1287                           	callstack 30
  1288                           
  1289                           ;incstack = 0
  1290                           ;prng@display stored from wreg
  1291  00F90E  6E0A               	movwf	prng@display^0,c
  1292  00F910                     
  1293                           ;main.c: 179:     int ans, xored;;main.c: 180:  xored = (((display >> 0) & 1) ^ ((displa
      +                          y >> 1) & 1)) ^ (((display >> 4) & 1) ^ ((display >> 5) & 1));
  1294  00F910  C00A  F001         	movff	prng@display,??_prng
  1295  00F914  0E05               	movlw	5
  1296  00F916  6E02               	movwf	(??_prng+1)^0,c
  1297  00F918                     u365:
  1298  00F918  90D8               	bcf	status,0,c
  1299  00F91A  3201               	rrcf	??_prng^0,f,c
  1300  00F91C  2E02               	decfsz	(??_prng+1)^0,f,c
  1301  00F91E  EF8C  F07C         	goto	u365
  1302  00F922  0E01               	movlw	1
  1303  00F924  1601               	andwf	??_prng^0,f,c
  1304  00F926  380A               	swapf	prng@display^0,w,c
  1305  00F928  0B0F               	andlw	15
  1306  00F92A  0B01               	andlw	1
  1307  00F92C  1801               	xorwf	??_prng^0,w,c
  1308  00F92E  6E03               	movwf	(??_prng+2)^0,c
  1309  00F930  C00A  F004         	movff	prng@display,??_prng+3
  1310  00F934  90D8               	bcf	status,0,c
  1311  00F936  3204               	rrcf	(??_prng+3)^0,f,c
  1312  00F938  0E01               	movlw	1
  1313  00F93A  1604               	andwf	(??_prng+3)^0,f,c
  1314  00F93C  500A               	movf	prng@display^0,w,c
  1315  00F93E  0B01               	andlw	1
  1316  00F940  1804               	xorwf	(??_prng+3)^0,w,c
  1317  00F942  1803               	xorwf	(??_prng+2)^0,w,c
  1318  00F944  6E05               	movwf	(??_prng+4)^0,c
  1319  00F946  5005               	movf	(??_prng+4)^0,w,c
  1320  00F948  6E08               	movwf	prng@xored^0,c
  1321  00F94A  6A09               	clrf	(prng@xored+1)^0,c
  1322                           
  1323                           ;main.c: 181:  ans = (xored << 5) | (display >> 1);
  1324  00F94C  C008  F001         	movff	prng@xored,??_prng
  1325  00F950  C009  F002         	movff	prng@xored+1,??_prng+1
  1326  00F954  0E05               	movlw	5
  1327  00F956                     u375:
  1328  00F956  90D8               	bcf	status,0,c
  1329  00F958  3601               	rlcf	??_prng^0,f,c
  1330  00F95A  3602               	rlcf	(??_prng+1)^0,f,c
  1331  00F95C  2EE8               	decfsz	wreg,f,c
  1332  00F95E  EFAB  F07C         	goto	u375
  1333  00F962  C00A  F003         	movff	prng@display,??_prng+2
  1334  00F966  90D8               	bcf	status,0,c
  1335  00F968  3203               	rrcf	(??_prng+2)^0,f,c
  1336  00F96A  5003               	movf	(??_prng+2)^0,w,c
  1337  00F96C  1001               	iorwf	??_prng^0,w,c
  1338  00F96E  6E06               	movwf	prng@ans^0,c
  1339  00F970  5002               	movf	(??_prng+1)^0,w,c
  1340  00F972  6E07               	movwf	(prng@ans+1)^0,c
  1341  00F974                     
  1342                           ;main.c: 182:     return ans;
  1343  00F974  5006               	movf	prng@ans^0,w,c
  1344  00F976  0012               	return		;funcret
  1345  00F978                     __end_of_prng:
  1346                           	callstack 0
  1347                           
  1348 ;; *************** function _grey_up *****************
  1349 ;; Defined at:
  1350 ;;		line 106 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  display         1    wreg     unsigned char 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  display         1    0[COMRAM] unsigned char 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      unsigned char 
  1357 ;; Registers used:
  1358 ;;		wreg, status,2, status,0
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;Total ram usage:        1 bytes
  1369 ;; Hardware stack levels used: 1
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text6
  1378  00F768                     __ptext6:
  1379                           	callstack 0
  1380  00F768                     _grey_up:
  1381                           	callstack 30
  1382  00F768                     
  1383                           ;main.c: 107:     display = (grey >>1) ^ grey;
  1384  00F768  90D8               	bcf	status,0,c
  1385  00F76A  3017               	rrcf	_grey^0,w,c
  1386  00F76C  1817               	xorwf	_grey^0,w,c
  1387  00F76E  6E01               	movwf	grey_up@display^0,c
  1388                           
  1389                           ;main.c: 108:     grey = grey + 1;
  1390  00F770  2817               	incf	_grey^0,w,c
  1391  00F772  6E17               	movwf	_grey^0,c
  1392  00F774                     
  1393                           ;main.c: 109:     return display;
  1394  00F774  5001               	movf	grey_up@display^0,w,c
  1395  00F776  0012               	return		;funcret
  1396  00F778                     __end_of_grey_up:
  1397                           	callstack 0
  1398                           
  1399 ;; *************** function _grey_down *****************
  1400 ;; Defined at:
  1401 ;;		line 112 in file "main.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  display         1    wreg     unsigned char 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  display         1    0[COMRAM] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      unsigned char 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        1 bytes
  1420 ;; Hardware stack levels used: 1
  1421 ;; This function calls:
  1422 ;;		Nothing
  1423 ;; This function is called by:
  1424 ;;		_main
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text7
  1429  00F758                     __ptext7:
  1430                           	callstack 0
  1431  00F758                     _grey_down:
  1432                           	callstack 30
  1433  00F758                     
  1434                           ;main.c: 113:     display = (grey >>1) ^ grey;
  1435  00F758  90D8               	bcf	status,0,c
  1436  00F75A  3017               	rrcf	_grey^0,w,c
  1437  00F75C  1817               	xorwf	_grey^0,w,c
  1438  00F75E  6E01               	movwf	grey_down@display^0,c
  1439                           
  1440                           ;main.c: 114:     grey = grey - 1;
  1441  00F760  0417               	decf	_grey^0,w,c
  1442  00F762  6E17               	movwf	_grey^0,c
  1443  00F764                     
  1444                           ;main.c: 115:     return display;
  1445  00F764  5001               	movf	grey_down@display^0,w,c
  1446  00F766  0012               	return		;funcret
  1447  00F768                     __end_of_grey_down:
  1448                           	callstack 0
  1449                           
  1450 ;; *************** function _delay *****************
  1451 ;; Defined at:
  1452 ;;		line 64 in file "main.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  ms              2    0[COMRAM] unsigned int 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  i               2    2[COMRAM] unsigned int 
  1457 ;;  j               1    4[COMRAM] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;Total ram usage:        5 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; This function calls:
  1474 ;;		Nothing
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text8
  1481  00F7A2                     __ptext8:
  1482                           	callstack 0
  1483  00F7A2                     _delay:
  1484                           	callstack 30
  1485  00F7A2                     
  1486                           ;main.c: 65:     unsigned int i;;main.c: 66:     unsigned char j;;main.c: 67:     for (i
      +                           =0; i< ms; i++){
  1487  00F7A2  0E00               	movlw	0
  1488  00F7A4  6E04               	movwf	(delay@i+1)^0,c
  1489  00F7A6  0E00               	movlw	0
  1490  00F7A8  6E03               	movwf	delay@i^0,c
  1491  00F7AA  EFE9  F07B         	goto	l1263
  1492  00F7AE                     l1251:
  1493                           
  1494                           ;main.c: 68:         for (j =0 ; j < 200; j++){
  1495  00F7AE  0E00               	movlw	0
  1496  00F7B0  6E05               	movwf	delay@j^0,c
  1497  00F7B2                     l35:
  1498                           
  1499                           ;main.c: 69:             __nop();
  1500  00F7B2  F000               	nop	
  1501                           
  1502                           ;main.c: 70:             __nop();
  1503  00F7B4  F000               	nop	
  1504                           
  1505                           ;main.c: 71:             __nop();
  1506  00F7B6  F000               	nop	
  1507                           
  1508                           ;main.c: 72:             __nop();
  1509  00F7B8  F000               	nop	
  1510                           
  1511                           ;main.c: 73:             __nop();
  1512  00F7BA  F000               	nop	
  1513  00F7BC                     
  1514                           ;main.c: 74:         }
  1515  00F7BC  2A05               	incf	delay@j^0,f,c
  1516  00F7BE  0EC7               	movlw	199
  1517  00F7C0  6405               	cpfsgt	delay@j^0,c
  1518  00F7C2  EFE5  F07B         	goto	u751
  1519  00F7C6  EFE7  F07B         	goto	u750
  1520  00F7CA                     u751:
  1521  00F7CA  EFD9  F07B         	goto	l35
  1522  00F7CE                     u750:
  1523  00F7CE                     
  1524                           ;main.c: 75:     }
  1525  00F7CE  4A03               	infsnz	delay@i^0,f,c
  1526  00F7D0  2A04               	incf	(delay@i+1)^0,f,c
  1527  00F7D2                     l1263:
  1528  00F7D2  5001               	movf	delay@ms^0,w,c
  1529  00F7D4  5C03               	subwf	delay@i^0,w,c
  1530  00F7D6  5002               	movf	(delay@ms+1)^0,w,c
  1531  00F7D8  5804               	subwfb	(delay@i+1)^0,w,c
  1532  00F7DA  A0D8               	btfss	status,0,c
  1533  00F7DC  EFF2  F07B         	goto	u761
  1534  00F7E0  EFF4  F07B         	goto	u760
  1535  00F7E4                     u761:
  1536  00F7E4  EFD7  F07B         	goto	l1251
  1537  00F7E8                     u760:
  1538  00F7E8  0012               	return		;funcret
  1539  00F7EA                     __end_of_delay:
  1540                           	callstack 0
  1541                           
  1542 ;; *************** function _bin_up *****************
  1543 ;; Defined at:
  1544 ;;		line 98 in file "main.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  display         1    wreg     unsigned char 
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  display         1    0[COMRAM] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      unsigned char 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2, status,0
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;Total ram usage:        1 bytes
  1563 ;; Hardware stack levels used: 1
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text9
  1572  00F752                     __ptext9:
  1573                           	callstack 0
  1574  00F752                     _bin_up:
  1575                           	callstack 30
  1576                           
  1577                           ;incstack = 0
  1578                           ;bin_up@display stored from wreg
  1579  00F752  6E01               	movwf	bin_up@display^0,c
  1580  00F754                     
  1581                           ;main.c: 99:     return (display + 1);
  1582  00F754  2801               	incf	bin_up@display^0,w,c
  1583  00F756  0012               	return		;funcret
  1584  00F758                     __end_of_bin_up:
  1585                           	callstack 0
  1586                           
  1587 ;; *************** function _bin_down *****************
  1588 ;; Defined at:
  1589 ;;		line 102 in file "main.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  display         1    wreg     unsigned char 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  display         1    0[COMRAM] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      unsigned char 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:        1 bytes
  1608 ;; Hardware stack levels used: 1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text10
  1617  00F74C                     __ptext10:
  1618                           	callstack 0
  1619  00F74C                     _bin_down:
  1620                           	callstack 30
  1621                           
  1622                           ;incstack = 0
  1623                           ;bin_down@display stored from wreg
  1624  00F74C  6E01               	movwf	bin_down@display^0,c
  1625  00F74E                     
  1626                           ;main.c: 103:     return (display - 1);
  1627  00F74E  0401               	decf	bin_down@display^0,w,c
  1628  00F750  0012               	return		;funcret
  1629  00F752                     __end_of_bin_down:
  1630                           	callstack 0
  1631                           
  1632 ;; *************** function _bcd_up *****************
  1633 ;; Defined at:
  1634 ;;		line 118 in file "main.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  display         2   10[COMRAM] unsigned int 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      unsigned char 
  1641 ;; Registers used:
  1642 ;;		wreg, status,2, status,0, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;Total ram usage:        4 bytes
  1653 ;; Hardware stack levels used: 1
  1654 ;; Hardware stack levels required when called: 1
  1655 ;; This function calls:
  1656 ;;		___awdiv
  1657 ;;		___awmod
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text11
  1664  00F8A4                     __ptext11:
  1665                           	callstack 0
  1666  00F8A4                     _bcd_up:
  1667                           	callstack 29
  1668  00F8A4                     
  1669                           ;main.c: 119:     unsigned int display;;main.c: 120:     if (bcd > 99) {
  1670  00F8A4  0E63               	movlw	99
  1671  00F8A6  6416               	cpfsgt	_bcd^0,c
  1672  00F8A8  EF58  F07C         	goto	u841
  1673  00F8AC  EF5A  F07C         	goto	u840
  1674  00F8B0                     u841:
  1675  00F8B0  EF5E  F07C         	goto	l1307
  1676  00F8B4                     u840:
  1677  00F8B4                     
  1678                           ;main.c: 121:         bcd = 1;
  1679  00F8B4  0E01               	movlw	1
  1680  00F8B6  6E16               	movwf	_bcd^0,c
  1681                           
  1682                           ;main.c: 122:     } else {
  1683  00F8B8  EF85  F07C         	goto	l1311
  1684  00F8BC                     l1307:
  1685                           
  1686                           ;main.c: 123:         display = ((bcd / 10) << 4) | (bcd % 10);
  1687  00F8BC  C016  F001         	movff	_bcd,___awdiv@dividend
  1688  00F8C0  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1689  00F8C2  0E00               	movlw	0
  1690  00F8C4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1691  00F8C6  0E0A               	movlw	10
  1692  00F8C8  6E03               	movwf	___awdiv@divisor^0,c
  1693  00F8CA  EC8B  F07D         	call	___awdiv	;wreg free
  1694  00F8CE  C001  F009         	movff	?___awdiv,??_bcd_up
  1695  00F8D2  C002  F00A         	movff	?___awdiv+1,??_bcd_up+1
  1696  00F8D6  3A09               	swapf	??_bcd_up^0,f,c
  1697  00F8D8  3A0A               	swapf	(??_bcd_up+1)^0,f,c
  1698  00F8DA  0EF0               	movlw	240
  1699  00F8DC  160A               	andwf	(??_bcd_up+1)^0,f,c
  1700  00F8DE  5009               	movf	??_bcd_up^0,w,c
  1701  00F8E0  0B0F               	andlw	15
  1702  00F8E2  120A               	iorwf	(??_bcd_up+1)^0,f,c
  1703  00F8E4  0EF0               	movlw	240
  1704  00F8E6  1609               	andwf	??_bcd_up^0,f,c
  1705  00F8E8  C016  F001         	movff	_bcd,___awmod@dividend
  1706  00F8EC  6A02               	clrf	(___awmod@dividend+1)^0,c
  1707  00F8EE  0E00               	movlw	0
  1708  00F8F0  6E04               	movwf	(___awmod@divisor+1)^0,c
  1709  00F8F2  0E0A               	movlw	10
  1710  00F8F4  6E03               	movwf	___awmod@divisor^0,c
  1711  00F8F6  EC33  F07D         	call	___awmod	;wreg free
  1712  00F8FA  5001               	movf	?___awmod^0,w,c
  1713  00F8FC  1009               	iorwf	??_bcd_up^0,w,c
  1714  00F8FE  6E0B               	movwf	bcd_up@display^0,c
  1715  00F900  5002               	movf	(?___awmod+1)^0,w,c
  1716  00F902  100A               	iorwf	(??_bcd_up+1)^0,w,c
  1717  00F904  6E0C               	movwf	(bcd_up@display+1)^0,c
  1718  00F906                     
  1719                           ;main.c: 124:         bcd = bcd + 1;
  1720  00F906  2816               	incf	_bcd^0,w,c
  1721  00F908  6E16               	movwf	_bcd^0,c
  1722  00F90A                     l1311:
  1723                           
  1724                           ;main.c: 126:     return display;
  1725  00F90A  500B               	movf	bcd_up@display^0,w,c
  1726  00F90C  0012               	return		;funcret
  1727  00F90E                     __end_of_bcd_up:
  1728                           	callstack 0
  1729                           
  1730 ;; *************** function _bcd_down *****************
  1731 ;; Defined at:
  1732 ;;		line 129 in file "main.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;  display         2   10[COMRAM] unsigned int 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      unsigned char 
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;Total ram usage:        4 bytes
  1751 ;; Hardware stack levels used: 1
  1752 ;; Hardware stack levels required when called: 1
  1753 ;; This function calls:
  1754 ;;		___awdiv
  1755 ;;		___awmod
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text12
  1762  00F83A                     __ptext12:
  1763                           	callstack 0
  1764  00F83A                     _bcd_down:
  1765                           	callstack 29
  1766  00F83A                     
  1767                           ;main.c: 130:     unsigned int display;;main.c: 131:     if (bcd == 0) {
  1768  00F83A  5016               	movf	_bcd^0,w,c
  1769  00F83C  A4D8               	btfss	status,2,c
  1770  00F83E  EF23  F07C         	goto	u851
  1771  00F842  EF25  F07C         	goto	u850
  1772  00F846                     u851:
  1773  00F846  EF29  F07C         	goto	l1319
  1774  00F84A                     u850:
  1775  00F84A                     
  1776                           ;main.c: 132:         bcd = 99;
  1777  00F84A  0E63               	movlw	99
  1778  00F84C  6E16               	movwf	_bcd^0,c
  1779                           
  1780                           ;main.c: 133:     } else {
  1781  00F84E  EF50  F07C         	goto	l1323
  1782  00F852                     l1319:
  1783                           
  1784                           ;main.c: 134:         display = ((bcd / 10) << 4) | (bcd % 10);
  1785  00F852  C016  F001         	movff	_bcd,___awdiv@dividend
  1786  00F856  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1787  00F858  0E00               	movlw	0
  1788  00F85A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1789  00F85C  0E0A               	movlw	10
  1790  00F85E  6E03               	movwf	___awdiv@divisor^0,c
  1791  00F860  EC8B  F07D         	call	___awdiv	;wreg free
  1792  00F864  C001  F009         	movff	?___awdiv,??_bcd_down
  1793  00F868  C002  F00A         	movff	?___awdiv+1,??_bcd_down+1
  1794  00F86C  3A09               	swapf	??_bcd_down^0,f,c
  1795  00F86E  3A0A               	swapf	(??_bcd_down+1)^0,f,c
  1796  00F870  0EF0               	movlw	240
  1797  00F872  160A               	andwf	(??_bcd_down+1)^0,f,c
  1798  00F874  5009               	movf	??_bcd_down^0,w,c
  1799  00F876  0B0F               	andlw	15
  1800  00F878  120A               	iorwf	(??_bcd_down+1)^0,f,c
  1801  00F87A  0EF0               	movlw	240
  1802  00F87C  1609               	andwf	??_bcd_down^0,f,c
  1803  00F87E  C016  F001         	movff	_bcd,___awmod@dividend
  1804  00F882  6A02               	clrf	(___awmod@dividend+1)^0,c
  1805  00F884  0E00               	movlw	0
  1806  00F886  6E04               	movwf	(___awmod@divisor+1)^0,c
  1807  00F888  0E0A               	movlw	10
  1808  00F88A  6E03               	movwf	___awmod@divisor^0,c
  1809  00F88C  EC33  F07D         	call	___awmod	;wreg free
  1810  00F890  5001               	movf	?___awmod^0,w,c
  1811  00F892  1009               	iorwf	??_bcd_down^0,w,c
  1812  00F894  6E0B               	movwf	bcd_down@display^0,c
  1813  00F896  5002               	movf	(?___awmod+1)^0,w,c
  1814  00F898  100A               	iorwf	(??_bcd_down+1)^0,w,c
  1815  00F89A  6E0C               	movwf	(bcd_down@display+1)^0,c
  1816  00F89C                     
  1817                           ;main.c: 135:         bcd = bcd - 1;
  1818  00F89C  0416               	decf	_bcd^0,w,c
  1819  00F89E  6E16               	movwf	_bcd^0,c
  1820  00F8A0                     l1323:
  1821                           
  1822                           ;main.c: 137:     return display;
  1823  00F8A0  500B               	movf	bcd_down@display^0,w,c
  1824  00F8A2  0012               	return		;funcret
  1825  00F8A4                     __end_of_bcd_down:
  1826                           	callstack 0
  1827                           
  1828 ;; *************** function ___awmod *****************
  1829 ;; Defined at:
  1830 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  dividend        2    0[COMRAM] int 
  1833 ;;  divisor         2    2[COMRAM] int 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;  sign            1    5[COMRAM] unsigned char 
  1836 ;;  counter         1    4[COMRAM] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  2    0[COMRAM] int 
  1839 ;; Registers used:
  1840 ;;		wreg, status,2, status,0
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;Total ram usage:        6 bytes
  1851 ;; Hardware stack levels used: 1
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_bcd_up
  1856 ;;		_bcd_down
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           	psect	text13
  1861  00FA66                     __ptext13:
  1862                           	callstack 0
  1863  00FA66                     ___awmod:
  1864                           	callstack 29
  1865  00FA66  0E00               	movlw	0
  1866  00FA68  6E06               	movwf	___awmod@sign^0,c
  1867  00FA6A  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1868  00FA6C  EF3C  F07D         	goto	u690
  1869  00FA70  EF3A  F07D         	goto	u691
  1870  00FA74                     u691:
  1871  00FA74  EF42  F07D         	goto	l1221
  1872  00FA78                     u690:
  1873  00FA78  6C01               	negf	___awmod@dividend^0,c
  1874  00FA7A  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1875  00FA7C  B0D8               	btfsc	status,0,c
  1876  00FA7E  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1877  00FA80  0E01               	movlw	1
  1878  00FA82  6E06               	movwf	___awmod@sign^0,c
  1879  00FA84                     l1221:
  1880  00FA84  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1881  00FA86  EF49  F07D         	goto	u700
  1882  00FA8A  EF47  F07D         	goto	u701
  1883  00FA8E                     u701:
  1884  00FA8E  EF4D  F07D         	goto	l1225
  1885  00FA92                     u700:
  1886  00FA92  6C03               	negf	___awmod@divisor^0,c
  1887  00FA94  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1888  00FA96  B0D8               	btfsc	status,0,c
  1889  00FA98  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1890  00FA9A                     l1225:
  1891  00FA9A  5003               	movf	___awmod@divisor^0,w,c
  1892  00FA9C  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1893  00FA9E  B4D8               	btfsc	status,2,c
  1894  00FAA0  EF54  F07D         	goto	u711
  1895  00FAA4  EF56  F07D         	goto	u710
  1896  00FAA8                     u711:
  1897  00FAA8  EF7A  F07D         	goto	l1241
  1898  00FAAC                     u710:
  1899  00FAAC  0E01               	movlw	1
  1900  00FAAE  6E05               	movwf	___awmod@counter^0,c
  1901  00FAB0  EF5E  F07D         	goto	l1231
  1902  00FAB4                     l1229:
  1903  00FAB4  90D8               	bcf	status,0,c
  1904  00FAB6  3603               	rlcf	___awmod@divisor^0,f,c
  1905  00FAB8  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1906  00FABA  2A05               	incf	___awmod@counter^0,f,c
  1907  00FABC                     l1231:
  1908  00FABC  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1909  00FABE  EF63  F07D         	goto	u721
  1910  00FAC2  EF65  F07D         	goto	u720
  1911  00FAC6                     u721:
  1912  00FAC6  EF5A  F07D         	goto	l1229
  1913  00FACA                     u720:
  1914  00FACA                     l1233:
  1915  00FACA  5003               	movf	___awmod@divisor^0,w,c
  1916  00FACC  5C01               	subwf	___awmod@dividend^0,w,c
  1917  00FACE  5004               	movf	(___awmod@divisor+1)^0,w,c
  1918  00FAD0  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1919  00FAD2  A0D8               	btfss	status,0,c
  1920  00FAD4  EF6E  F07D         	goto	u731
  1921  00FAD8  EF70  F07D         	goto	u730
  1922  00FADC                     u731:
  1923  00FADC  EF74  F07D         	goto	l1237
  1924  00FAE0                     u730:
  1925  00FAE0  5003               	movf	___awmod@divisor^0,w,c
  1926  00FAE2  5E01               	subwf	___awmod@dividend^0,f,c
  1927  00FAE4  5004               	movf	(___awmod@divisor+1)^0,w,c
  1928  00FAE6  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1929  00FAE8                     l1237:
  1930  00FAE8  90D8               	bcf	status,0,c
  1931  00FAEA  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1932  00FAEC  3203               	rrcf	___awmod@divisor^0,f,c
  1933  00FAEE  2E05               	decfsz	___awmod@counter^0,f,c
  1934  00FAF0  EF65  F07D         	goto	l1233
  1935  00FAF4                     l1241:
  1936  00FAF4  5006               	movf	___awmod@sign^0,w,c
  1937  00FAF6  B4D8               	btfsc	status,2,c
  1938  00FAF8  EF80  F07D         	goto	u741
  1939  00FAFC  EF82  F07D         	goto	u740
  1940  00FB00                     u741:
  1941  00FB00  EF86  F07D         	goto	l1245
  1942  00FB04                     u740:
  1943  00FB04  6C01               	negf	___awmod@dividend^0,c
  1944  00FB06  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1945  00FB08  B0D8               	btfsc	status,0,c
  1946  00FB0A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1947  00FB0C                     l1245:
  1948  00FB0C  C001  F001         	movff	___awmod@dividend,?___awmod
  1949  00FB10  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1950  00FB14  0012               	return		;funcret
  1951  00FB16                     __end_of___awmod:
  1952                           	callstack 0
  1953                           
  1954 ;; *************** function ___awdiv *****************
  1955 ;; Defined at:
  1956 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  dividend        2    0[COMRAM] int 
  1959 ;;  divisor         2    2[COMRAM] int 
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  quotient        2    6[COMRAM] int 
  1962 ;;  sign            1    5[COMRAM] unsigned char 
  1963 ;;  counter         1    4[COMRAM] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  2    0[COMRAM] int 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;Total ram usage:        8 bytes
  1978 ;; Hardware stack levels used: 1
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_bcd_up
  1983 ;;		_bcd_down
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text14
  1988  00FB16                     __ptext14:
  1989                           	callstack 0
  1990  00FB16                     ___awdiv:
  1991                           	callstack 29
  1992  00FB16  0E00               	movlw	0
  1993  00FB18  6E06               	movwf	___awdiv@sign^0,c
  1994  00FB1A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1995  00FB1C  EF94  F07D         	goto	u630
  1996  00FB20  EF92  F07D         	goto	u631
  1997  00FB24                     u631:
  1998  00FB24  EF9A  F07D         	goto	l1177
  1999  00FB28                     u630:
  2000  00FB28  6C03               	negf	___awdiv@divisor^0,c
  2001  00FB2A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2002  00FB2C  B0D8               	btfsc	status,0,c
  2003  00FB2E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2004  00FB30  0E01               	movlw	1
  2005  00FB32  6E06               	movwf	___awdiv@sign^0,c
  2006  00FB34                     l1177:
  2007  00FB34  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2008  00FB36  EFA1  F07D         	goto	u640
  2009  00FB3A  EF9F  F07D         	goto	u641
  2010  00FB3E                     u641:
  2011  00FB3E  EFA7  F07D         	goto	l1183
  2012  00FB42                     u640:
  2013  00FB42  6C01               	negf	___awdiv@dividend^0,c
  2014  00FB44  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2015  00FB46  B0D8               	btfsc	status,0,c
  2016  00FB48  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2017  00FB4A  0E01               	movlw	1
  2018  00FB4C  1A06               	xorwf	___awdiv@sign^0,f,c
  2019  00FB4E                     l1183:
  2020  00FB4E  0E00               	movlw	0
  2021  00FB50  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2022  00FB52  0E00               	movlw	0
  2023  00FB54  6E07               	movwf	___awdiv@quotient^0,c
  2024  00FB56  5003               	movf	___awdiv@divisor^0,w,c
  2025  00FB58  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2026  00FB5A  B4D8               	btfsc	status,2,c
  2027  00FB5C  EFB2  F07D         	goto	u651
  2028  00FB60  EFB4  F07D         	goto	u650
  2029  00FB64                     u651:
  2030  00FB64  EFDC  F07D         	goto	l1205
  2031  00FB68                     u650:
  2032  00FB68  0E01               	movlw	1
  2033  00FB6A  6E05               	movwf	___awdiv@counter^0,c
  2034  00FB6C  EFBC  F07D         	goto	l1191
  2035  00FB70                     l1189:
  2036  00FB70  90D8               	bcf	status,0,c
  2037  00FB72  3603               	rlcf	___awdiv@divisor^0,f,c
  2038  00FB74  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2039  00FB76  2A05               	incf	___awdiv@counter^0,f,c
  2040  00FB78                     l1191:
  2041  00FB78  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2042  00FB7A  EFC1  F07D         	goto	u661
  2043  00FB7E  EFC3  F07D         	goto	u660
  2044  00FB82                     u661:
  2045  00FB82  EFB8  F07D         	goto	l1189
  2046  00FB86                     u660:
  2047  00FB86                     l1193:
  2048  00FB86  90D8               	bcf	status,0,c
  2049  00FB88  3607               	rlcf	___awdiv@quotient^0,f,c
  2050  00FB8A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2051  00FB8C  5003               	movf	___awdiv@divisor^0,w,c
  2052  00FB8E  5C01               	subwf	___awdiv@dividend^0,w,c
  2053  00FB90  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2054  00FB92  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2055  00FB94  A0D8               	btfss	status,0,c
  2056  00FB96  EFCF  F07D         	goto	u671
  2057  00FB9A  EFD1  F07D         	goto	u670
  2058  00FB9E                     u671:
  2059  00FB9E  EFD6  F07D         	goto	l1201
  2060  00FBA2                     u670:
  2061  00FBA2  5003               	movf	___awdiv@divisor^0,w,c
  2062  00FBA4  5E01               	subwf	___awdiv@dividend^0,f,c
  2063  00FBA6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2064  00FBA8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2065  00FBAA  8007               	bsf	___awdiv@quotient^0,0,c
  2066  00FBAC                     l1201:
  2067  00FBAC  90D8               	bcf	status,0,c
  2068  00FBAE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2069  00FBB0  3203               	rrcf	___awdiv@divisor^0,f,c
  2070  00FBB2  2E05               	decfsz	___awdiv@counter^0,f,c
  2071  00FBB4  EFC3  F07D         	goto	l1193
  2072  00FBB8                     l1205:
  2073  00FBB8  5006               	movf	___awdiv@sign^0,w,c
  2074  00FBBA  B4D8               	btfsc	status,2,c
  2075  00FBBC  EFE2  F07D         	goto	u681
  2076  00FBC0  EFE4  F07D         	goto	u680
  2077  00FBC4                     u681:
  2078  00FBC4  EFE8  F07D         	goto	l1209
  2079  00FBC8                     u680:
  2080  00FBC8  6C07               	negf	___awdiv@quotient^0,c
  2081  00FBCA  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2082  00FBCC  B0D8               	btfsc	status,0,c
  2083  00FBCE  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2084  00FBD0                     l1209:
  2085  00FBD0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2086  00FBD4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2087  00FBD8  0012               	return		;funcret
  2088  00FBDA                     __end_of___awdiv:
  2089                           	callstack 0
  2090  0000                     
  2091                           	psect	rparam
  2092  0000                     
  2093                           	psect	idloc
  2094                           
  2095                           ;Config register IDLOC0 @ 0x200000
  2096                           ;	unspecified, using default values
  2097  200000                     	org	2097152
  2098  200000  FF                 	db	255
  2099                           
  2100                           ;Config register IDLOC1 @ 0x200001
  2101                           ;	unspecified, using default values
  2102  200001                     	org	2097153
  2103  200001  FF                 	db	255
  2104                           
  2105                           ;Config register IDLOC2 @ 0x200002
  2106                           ;	unspecified, using default values
  2107  200002                     	org	2097154
  2108  200002  FF                 	db	255
  2109                           
  2110                           ;Config register IDLOC3 @ 0x200003
  2111                           ;	unspecified, using default values
  2112  200003                     	org	2097155
  2113  200003  FF                 	db	255
  2114                           
  2115                           ;Config register IDLOC4 @ 0x200004
  2116                           ;	unspecified, using default values
  2117  200004                     	org	2097156
  2118  200004  FF                 	db	255
  2119                           
  2120                           ;Config register IDLOC5 @ 0x200005
  2121                           ;	unspecified, using default values
  2122  200005                     	org	2097157
  2123  200005  FF                 	db	255
  2124                           
  2125                           ;Config register IDLOC6 @ 0x200006
  2126                           ;	unspecified, using default values
  2127  200006                     	org	2097158
  2128  200006  FF                 	db	255
  2129                           
  2130                           ;Config register IDLOC7 @ 0x200007
  2131                           ;	unspecified, using default values
  2132  200007                     	org	2097159
  2133  200007  FF                 	db	255
  2134                           
  2135                           	psect	config
  2136                           
  2137                           ; Padding undefined space
  2138  300000                     	org	3145728
  2139  300000  FF                 	db	255
  2140                           
  2141                           ;Config register CONFIG1H @ 0x300001
  2142                           ;	Oscillator Selection bits
  2143                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  2144                           ;	Fail-Safe Clock Monitor Enable bit
  2145                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2146                           ;	Internal/External Oscillator Switchover bit
  2147                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2148  300001                     	org	3145729
  2149  300001  06                 	db	6
  2150                           
  2151                           ;Config register CONFIG2L @ 0x300002
  2152                           ;	Power-up Timer Enable bit
  2153                           ;	PWRT = ON, PWRT enabled
  2154                           ;	Brown-out Reset Enable bits
  2155                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  2156                           ;	Brown Out Reset Voltage bits
  2157                           ;	BORV = 3, Minimum setting
  2158  300002                     	org	3145730
  2159  300002  18                 	db	24
  2160                           
  2161                           ;Config register CONFIG2H @ 0x300003
  2162                           ;	Watchdog Timer Enable bit
  2163                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2164                           ;	Watchdog Timer Postscale Select bits
  2165                           ;	WDTPS = 32768, 1:32768
  2166  300003                     	org	3145731
  2167  300003  1E                 	db	30
  2168                           
  2169                           ; Padding undefined space
  2170  300004                     	org	3145732
  2171  300004  FF                 	db	255
  2172                           
  2173                           ;Config register CONFIG3H @ 0x300005
  2174                           ;	CCP2 MUX bit
  2175                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2176                           ;	PORTB A/D Enable bit
  2177                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2178                           ;	Low-Power Timer1 Oscillator Enable bit
  2179                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2180                           ;	MCLR Pin Enable bit
  2181                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2182  300005                     	org	3145733
  2183  300005  81                 	db	129
  2184                           
  2185                           ;Config register CONFIG4L @ 0x300006
  2186                           ;	Stack Full/Underflow Reset Enable bit
  2187                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  2188                           ;	Single-Supply ICSP Enable bit
  2189                           ;	LVP = OFF, Single-Supply ICSP disabled
  2190                           ;	Extended Instruction Set Enable bit
  2191                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2192                           ;	Background Debugger Enable bit
  2193                           ;	DEBUG = 0x1, unprogrammed default
  2194  300006                     	org	3145734
  2195  300006  80                 	db	128
  2196                           
  2197                           ; Padding undefined space
  2198  300007                     	org	3145735
  2199  300007  FF                 	db	255
  2200                           
  2201                           ;Config register CONFIG5L @ 0x300008
  2202                           ;	Code Protection bit
  2203                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2204                           ;	Code Protection bit
  2205                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2206                           ;	Code Protection bit
  2207                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2208                           ;	Code Protection bit
  2209                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2210  300008                     	org	3145736
  2211  300008  0F                 	db	15
  2212                           
  2213                           ;Config register CONFIG5H @ 0x300009
  2214                           ;	Boot Block Code Protection bit
  2215                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2216                           ;	Data EEPROM Code Protection bit
  2217                           ;	CPD = OFF, Data EEPROM not code-protected
  2218  300009                     	org	3145737
  2219  300009  C0                 	db	192
  2220                           
  2221                           ;Config register CONFIG6L @ 0x30000A
  2222                           ;	Write Protection bit
  2223                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2224                           ;	Write Protection bit
  2225                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2226                           ;	Write Protection bit
  2227                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2228                           ;	Write Protection bit
  2229                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2230  30000A                     	org	3145738
  2231  30000A  0F                 	db	15
  2232                           
  2233                           ;Config register CONFIG6H @ 0x30000B
  2234                           ;	Configuration Register Write Protection bit
  2235                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2236                           ;	Boot Block Write Protection bit
  2237                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2238                           ;	Data EEPROM Write Protection bit
  2239                           ;	WRTD = OFF, Data EEPROM not write-protected
  2240  30000B                     	org	3145739
  2241  30000B  E0                 	db	224
  2242                           
  2243                           ;Config register CONFIG7L @ 0x30000C
  2244                           ;	Table Read Protection bit
  2245                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2246                           ;	Table Read Protection bit
  2247                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2248                           ;	Table Read Protection bit
  2249                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2250                           ;	Table Read Protection bit
  2251                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2252  30000C                     	org	3145740
  2253  30000C  0F                 	db	15
  2254                           
  2255                           ;Config register CONFIG7H @ 0x30000D
  2256                           ;	Boot Block Table Read Protection bit
  2257                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2258  30000D                     	org	3145741
  2259  30000D  40                 	db	64
  2260                           tosu	equ	0xFFF
  2261                           tosh	equ	0xFFE
  2262                           tosl	equ	0xFFD
  2263                           stkptr	equ	0xFFC
  2264                           pclatu	equ	0xFFB
  2265                           pclath	equ	0xFFA
  2266                           pcl	equ	0xFF9
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           prodh	equ	0xFF4
  2272                           prodl	equ	0xFF3
  2273                           indf0	equ	0xFEF
  2274                           postinc0	equ	0xFEE
  2275                           postdec0	equ	0xFED
  2276                           preinc0	equ	0xFEC
  2277                           plusw0	equ	0xFEB
  2278                           fsr0h	equ	0xFEA
  2279                           fsr0l	equ	0xFE9
  2280                           wreg	equ	0xFE8
  2281                           indf1	equ	0xFE7
  2282                           postinc1	equ	0xFE6
  2283                           postdec1	equ	0xFE5
  2284                           preinc1	equ	0xFE4
  2285                           plusw1	equ	0xFE3
  2286                           fsr1h	equ	0xFE2
  2287                           fsr1l	equ	0xFE1
  2288                           bsr	equ	0xFE0
  2289                           indf2	equ	0xFDF
  2290                           postinc2	equ	0xFDE
  2291                           postdec2	equ	0xFDD
  2292                           preinc2	equ	0xFDC
  2293                           plusw2	equ	0xFDB
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     17      25
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_bcd_down
    _main->_bcd_up
    _bcd_up->___awdiv
    _bcd_down->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4322
                                             12 COMRAM     5     5      0
                           _bcd_down
                             _bcd_up
                           _bin_down
                             _bin_up
                              _delay
                          _grey_down
                            _grey_up
                               _prng
                              _queue
                         _setDisplay
                            _setTask
                              _snake
 ---------------------------------------------------------------------------------
 (1) _snake                                                1     1      0     135
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setTask                                              4     0      4     417
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _setDisplay                                           2     0      2     262
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _queue                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _prng                                                10    10      0     105
                                              0 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (1) _grey_up                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _grey_down                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2     168
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _bin_up                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bin_down                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bcd_up                                               4     4      0    1227
                                              8 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _bcd_down                                             4     4      0    1227
                                              8 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bcd_down
     ___awdiv
     ___awmod
   _bcd_up
     ___awdiv
     ___awmod
   _bin_down
   _bin_up
   _delay
   _grey_down
   _grey_up
   _prng
   _queue
   _setDisplay
   _setTask
   _snake

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     11      19       1       19.7%
BITBIGSFRh          3E      0       0      36        0.0%
BITBIGSFRlh         2A      0       0      37        0.0%
BITBIGSFRllhh        E      0       0      38        0.0%
BITBIGSFRllhl        1      0       0      39        0.0%
BITBIGSFRlll         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      41        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Apr 12 10:35:02 2022

                     l35 F7B2                       l60 F750                       l44 F838  
                     l38 F7E8                       l71 F90C                       l63 F776  
                     l48 F9E8                       l57 F756                       l66 F766  
                     l76 F8A2                       l87 FA64                       l96 FCC6  
                     l99 F976             ___awdiv@sign 0006                      l110 FE32  
                    l116 FE2E                      l109 FD40                      l400 FB14  
                    l387 FBD8                      l963 F754                      l971 F768  
                    l973 F774                      l967 F74E                      l977 F758  
                    l979 F764                      u300 FC16                      u301 FC12  
                    u310 FC2A                      u311 FC26                      u320 FC3E  
                    u240 F9FC                      u321 FC3A                      u241 F9F8  
                    u330 FC52                      u250 FA16                      u331 FC4E  
                    u251 FA12                      u340 FC66                      u260 FA28  
                    u341 FC62                      u261 FA24                      u350 FC8E  
                    u270 FA56                      u351 FC8A                      u271 FA52  
                    u280 FBEE                      u281 FBEA                      u290 FC02  
                    u291 FBFE                      u700 FA92                      u701 FA8E  
                    u365 F918                      u630 FB28                      u710 FAAC  
                    u631 FB24                      u711 FAA8                      u375 F956  
                    u640 FB42                      u720 FACA                      u800 F9A6  
                    u641 FB3E                      u721 FAC6                      u801 F9A2  
                    u650 FB68                      u730 FAE0                      u810 F9BE  
                    u651 FB64                      u731 FADC                      u811 F9BA  
                    u660 FB86                      u740 FB04                      u820 F9D2  
                    u900 FD8C                      u661 FB82                      u741 FB00  
                    u821 F9CE                      u901 FD88                      u670 FBA2  
                    u750 F7CE                      u830 F9E6                      u910 FDA8  
                    u671 FB9E                      u751 F7CA                      u831 F9E2  
                    u911 FDA4                      u680 FBC8                      u840 F8B4  
                    u760 F7E8                      u920 FDC2                      u681 FBC4  
                    u841 F8B0                      u761 F7E4                      u921 FDBE  
                    u690 FA78                      u850 F84A                      u770 F80A  
                    u930 FDDE                      u691 FA74                      u851 F846  
                    u771 F806                      u931 FDDA                      u780 F828  
                    u940 FDFA                      u860 FD20                      u781 F824  
                    u941 FDF6                      u861 FD1C                      u790 F98C  
                    u950 FE1A                      u870 FD2E                      u791 F988  
                    u951 FE16                      u871 FD2A                      u960 FE40  
                    u880 FD40                      u961 FE3C                      u881 FD3C  
                    u970 FE7C                      u890 FD4E                      u971 FE78  
                    u891 FD4A                      u980 FE94                      u981 FE90  
                    u990 FEAC                      u991 FEA8                      _bcd 0016  
                    _sum 0014             ___awmod@sign 0006                      wreg 000FE8  
                   l1011 FA04                     l1013 FA16                     l1021 FA44  
                   l1023 FA56                     l1015 FA28                     l1007 F9EC  
            main@display 000F                     l1201 FBAC                     l1041 FC2A  
                   l1033 FBDA                     l1017 FA30                     l1009 F9FC  
                   l1203 FBB2                     l1051 FC7C                     l1043 FC3E  
                   l1035 FBEE                     l1019 FA3A                     l1205 FBB8  
                   l1221 FA84                     l1213 FA66                     l1061 F910  
                   l1053 FC8E                     l1045 FC52                     l1037 FC02  
                   l1029 FA62                     l1207 FBC8                     l1231 FABC  
                   l1223 FA92                     l1215 FA6A                     l1311 F90A  
                   l1303 F8A4                     l1063 F974                     l1055 FCA2  
                   l1039 FC16                     l1047 FC66                     l1209 FBD0  
                   l1233 FACA                     l1241 FAF4                     l1225 FA9A  
                   l1217 FA78                     l1321 F89C                     l1305 F8B4  
                   l1057 FCC4                     l1049 FC6E                     l1401 FF2A  
                   l1171 FB1A                     l1243 FB04                     l1235 FAE0  
                   l1227 FAAC                     l1219 FA80                     l1323 F8A0  
                   l1315 F83A                     l1307 F8BC                     l1251 F7AE  
                   l1411 FF76                     l1403 FF36                     l1331 FCF4  
                   l1181 FB4A                     l1173 FB28                     l1245 FB0C  
                   l1237 FAE8                     l1229 FAB4                     l1317 F84A  
                   l1309 F906                     l1261 F7CE                     l1421 FFC6  
                   l1413 FF8A                     l1405 FF4A                     l1341 FD2E  
                   l1333 FD00                     l1191 FB78                     l1183 FB4E  
                   l1175 FB30                     l1239 FAEE                     l1319 F852  
                   l1263 F7D2                     l1271 F828                     l1423 FFD2  
                   l1415 FF94                     l1407 FF56                     l1351 FDA8  
                   l1343 FD4E                     l1335 FD0C                     l1327 FCC8  
                   l1193 FB86                     l1185 FB56                     l1177 FB34  
                   l1169 FB16                     l1257 F7BC                     l1249 F7A2  
                   l1273 F830                     l1265 F7EA                     l1425 FFE6  
                   l1417 FFA8                     l1409 FF6A                     l1361 FDE6  
                   l1353 FDAE                     l1345 FD78                     l1337 FD12  
                   l1329 FCF0                     l1195 FB8C                     l1187 FB68  
                   l1179 FB42                     l1259 F7BE                     l1267 F80A  
                   l1427 FFF0                     l1419 FFB2                     l1371 FE68  
                   l1363 FDFA                     l1355 FDC2                     l1347 FD8C  
                   l1339 FD20                     l1197 FBA2                     l1189 FB70  
                   l1293 F9AC                     l1285 F992                     l1277 F978  
                   l1269 F816                     l1365 FE06                     l1357 FDCA  
                   l1349 FD94                     l1199 FBAA                     l1295 F9BE  
                   l1287 F9A6                     l1279 F98C                     l1391 FEE0  
                   l1383 FEB0                     l1375 FE80                     l1367 FE1A  
                   l1359 FDDE                     l1297 F9D2                     l1369 FE40  
                   l1299 F9E6                     l1387 FEC8                     l1379 FE98  
                   l1395 FEF8                     l1397 FF0A                     l1399 FF16  
                   u1000 FEC4                     u1001 FEC0                     u1010 FEDC  
                   u1011 FED8                     u1100 FFE6                     u1020 FEF4  
                   u1101 FFE2                     u1021 FEF0                     u1030 FF0A  
                   u1031 FF06                     u1040 FF2A                     u1041 FF26  
                   u1050 FF4A                     u1051 FF46                     u1060 FF6A  
                   u1061 FF66                     u1070 FF8A                     u1071 FF86  
                   u1080 FFA8                     u1081 FFA4                     u1090 FFC6  
                   u1091 FFC2                     _main FCC8                     _grey 0017  
                   _prng F90E                     start 0000             ___param_bank 000000  
                  ?_main 0001          __end_of___awdiv FBDA          __end_of___awmod FB16  
                  ?_prng 0001          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _PORTB 000F81                    _PORTD 000F83                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96                    _added 0012                    _delay F7A2  
        __end_of_grey_up F778                    _snake F9EA                    _queue FBDA  
                  main@i 000D          __end_of_setTask F83A                    tablat 000FF5  
                  status 000FD8          __initialization F778             __end_of_main 0000  
           __end_of_prng F978                   ??_main 000D                   ??_prng 0001  
          __activetblptr 000000                   ?_delay 0001                   _ADCON1 000FC1  
       ___awdiv@dividend 0001                   ?_snake 0001                   ?_queue 0001  
       __end_of_bcd_down F8A4         __end_of_bin_down F752                   _bcd_up F8A4  
              ??___awdiv 0005                ??___awmod 0005                   _bin_up F752  
                 delay@i 0003                   delay@j 0005         ___awdiv@quotient 0007  
        ___awmod@divisor 0003                   isa$std 000001          ___awmod@counter 0005  
              ??_grey_up 0001             __pdataCOMRAM 0018                ??_setTask 0005  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization F79C            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_delay F7EA            __end_of_snake FA66  
          __end_of_queue FCC8                  ??_delay 0003                  ??_snake 0001  
                ??_queue 0001                  ?_bcd_up 0001                  ?_bin_up 0001  
              ?_bcd_down 0001                ?_bin_down 0001              setTask@task 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv FB16  
                ___awmod FA66                  __pcinit F778                  __ramtop 1000  
                __ptext0 FCC8                  __ptext1 F9EA                  __ptext2 F7EA  
                __ptext3 F978                  __ptext4 FBDA                  __ptext5 F90E  
                __ptext6 F768                  __ptext7 F758                  __ptext8 F7A2  
                __ptext9 F752               ??_bcd_down 0009        __end_of_grey_down F768  
                _grey_up F768                  delay@ms 0001         ___awmod@dividend 0001  
             ??_bin_down 0001                  _setTask F7EA               _setDisplay F978  
   end_of_initialization F79C              prng@display 000A                  prng@ans 0006  
          setTask@change 0003                _PORTBbits 000F81            bin_up@display 0001  
         __end_of_bcd_up F90E           __end_of_bin_up F758            __pidataCOMRAM F74A  
    start_initialization F778              ?_setDisplay 0001         grey_down@display 0001  
               ??_bcd_up 0009                 ??_bin_up 0001              __pbssCOMRAM 0012  
         setDisplay@task 0001                 ?___awdiv 0001                 ?___awmod 0001  
              _direction 0018                 ?_grey_up 0001                 ?_setTask 0001  
         grey_up@display 0001                _grey_down F758               ?_grey_down 0001  
          bcd_up@display 000B                 __Hrparam 0000                 __Lrparam 0000  
               _bcd_down F83A                 _bin_down F74C                 __ptext10 F74C  
               __ptext11 F8A4                 __ptext12 F83A                 __ptext13 FA66  
               __ptext14 FB16             ??_setDisplay 0003             snake@display 0001  
              prng@xored 0008                 isa$xinst 000000                 main@task 0010  
     __end_of_setDisplay F9EA              ??_grey_down 0001          bin_down@display 0001  
        bcd_down@display 000B  
