

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue May 17 10:09:06 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19  0000                     
    20                           ; Version 2.40
    21                           ; Generated 17/11/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4620 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	idataCOMRAM
    57  00FD32                     __pidataCOMRAM:
    58                           	callstack 0
    59                           
    60                           ;initializer for _direction
    61  00FD32  0001               	dw	1
    62  0000                     _ADRESL	set	4035
    63  0000                     _ADRESH	set	4036
    64  0000                     _ADCON0bits	set	4034
    65  0000                     _PORTBbits	set	3969
    66  0000                     _ADCON0	set	4034
    67  0000                     _PORTD	set	3971
    68  0000                     _TRISA	set	3986
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON1	set	4033
    71  0000                     _TRISE	set	3990
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISB	set	3987
    75                           
    76                           ; #config settings
    77                           
    78                           	psect	cinit
    79  00FD34                     __pcinit:
    80                           	callstack 0
    81  00FD34                     start_initialization:
    82                           	callstack 0
    83  00FD34                     __initialization:
    84                           	callstack 0
    85                           
    86                           ; Initialize objects allocated to COMRAM (2 bytes)
    87                           ; load TBLPTR registers with __pidataCOMRAM
    88  00FD34  0E32               	movlw	low __pidataCOMRAM
    89  00FD36  6EF6               	movwf	tblptrl,c
    90  00FD38  0EFD               	movlw	high __pidataCOMRAM
    91  00FD3A  6EF7               	movwf	tblptrh,c
    92  00FD3C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    93  00FD3E  6EF8               	movwf	tblptru,c
    94  00FD40  0009               	tblrd		*+	;fetch initializer
    95  00FD42  CFF5 F013          	movff	tablat,__pdataCOMRAM
    96  00FD46  0009               	tblrd		*+	;fetch initializer
    97  00FD48  CFF5 F014          	movff	tablat,__pdataCOMRAM+1
    98                           
    99                           ; Clear objects allocated to COMRAM (2 bytes)
   100  00FD4C  6A12               	clrf	(__pbssCOMRAM+1)& (0+255),c
   101  00FD4E  6A11               	clrf	__pbssCOMRAM& (0+255),c
   102  00FD50                     end_of_initialization:
   103                           	callstack 0
   104  00FD50                     __end_of__initialization:
   105                           	callstack 0
   106  00FD50  0E00               	movlw	low (__Lmediumconst shr (0+16))
   107  00FD52  6EF8               	movwf	tblptru,c
   108  00FD54  0100               	movlb	0
   109  00FD56  EF53  F07F         	goto	_main	;jump to C main() function
   110                           
   111                           	psect	bssCOMRAM
   112  000011                     __pbssCOMRAM:
   113                           	callstack 0
   114  000011                     _isInformed:
   115                           	callstack 0
   116  000011                     	ds	2
   117                           
   118                           	psect	dataCOMRAM
   119  000013                     __pdataCOMRAM:
   120                           	callstack 0
   121  000013                     _direction:
   122                           	callstack 0
   123  000013                     	ds	2
   124                           
   125                           	psect	cstackCOMRAM
   126  000001                     __pcstackCOMRAM:
   127                           	callstack 0
   128  000001                     ?_adc:
   129                           	callstack 0
   130  000001                     delay@ms:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x0
   134  000001                     	ds	2
   135  000003                     ??_adc:
   136  000003                     delay@i:
   137                           	callstack 0
   138                           
   139                           ; 2 bytes @ 0x2
   140  000003                     	ds	2
   141  000005                     delay@j:
   142                           	callstack 0
   143                           
   144                           ; 1 bytes @ 0x4
   145  000005                     	ds	2
   146  000007                     adc@kanal:
   147                           	callstack 0
   148                           
   149                           ; 1 bytes @ 0x6
   150  000007                     	ds	1
   151  000008                     ?___lwdiv:
   152                           	callstack 0
   153  000008                     ___lwdiv@dividend:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x7
   157  000008                     	ds	2
   158  00000A                     ___lwdiv@divisor:
   159                           	callstack 0
   160                           
   161                           ; 2 bytes @ 0x9
   162  00000A                     	ds	2
   163  00000C                     ___lwdiv@quotient:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0xB
   167  00000C                     	ds	2
   168  00000E                     ___lwdiv@counter:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0xD
   172  00000E                     	ds	1
   173  00000F                     alarm@i:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0xE
   177  00000F                     	ds	2
   178  000011                     
   179                           ; 1 bytes @ 0x10
   180 ;;
   181 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   182 ;;
   183 ;; *************** function _main *****************
   184 ;; Defined at:
   185 ;;		line 117 in file "main.c"
   186 ;; Parameters:    Size  Location     Type
   187 ;;		None
   188 ;; Auto vars:     Size  Location     Type
   189 ;;		None
   190 ;; Return value:  Size  Location     Type
   191 ;;                  1    wreg      void 
   192 ;; Registers used:
   193 ;;		wreg, status,2, status,0, cstack
   194 ;; Tracked objects:
   195 ;;		On entry : 0/0
   196 ;;		On exit  : 0/0
   197 ;;		Unchanged: 0/0
   198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   203 ;;Total ram usage:        0 bytes
   204 ;; Hardware stack levels required when called: 2
   205 ;; This function calls:
   206 ;;		___lwdiv
   207 ;;		_adc
   208 ;;		_alarm
   209 ;; This function is called by:
   210 ;;		Startup code after reset
   211 ;; This function uses a non-reentrant model
   212 ;;
   213                           
   214                           	psect	text0
   215  00FEA6                     __ptext0:
   216                           	callstack 0
   217  00FEA6                     _main:
   218                           	callstack 29
   219  00FEA6                     
   220                           ;main.c: 120:     ADCON0=0x01;
   221  00FEA6  0E01               	movlw	1
   222  00FEA8  6EC2               	movwf	194,c	;volatile
   223                           
   224                           ;main.c: 121:     ADCON1=0x0B;
   225  00FEAA  0E0B               	movlw	11
   226  00FEAC  6EC1               	movwf	193,c	;volatile
   227                           
   228                           ;main.c: 122:     ADCON2=0x01;
   229  00FEAE  0E01               	movlw	1
   230  00FEB0  6EC0               	movwf	192,c	;volatile
   231                           
   232                           ;main.c: 124:     TRISA=0xC3;
   233  00FEB2  0EC3               	movlw	195
   234  00FEB4  6E92               	movwf	146,c	;volatile
   235                           
   236                           ;main.c: 125:     TRISB=0x3F;
   237  00FEB6  0E3F               	movlw	63
   238  00FEB8  6E93               	movwf	147,c	;volatile
   239                           
   240                           ;main.c: 126:     TRISC=0x01;
   241  00FEBA  0E01               	movlw	1
   242  00FEBC  6E94               	movwf	148,c	;volatile
   243                           
   244                           ;main.c: 127:     TRISD=0x00;
   245  00FEBE  0E00               	movlw	0
   246  00FEC0  6E95               	movwf	149,c	;volatile
   247                           
   248                           ;main.c: 128:     TRISE=0x00;
   249  00FEC2  0E00               	movlw	0
   250  00FEC4  6E96               	movwf	150,c	;volatile
   251  00FEC6                     l933:
   252                           
   253                           ;main.c: 132:     {;main.c: 133:         if (PORTBbits.RB3 == 0) {
   254  00FEC6  B681               	btfsc	129,3,c	;volatile
   255  00FEC8  EF68  F07F         	goto	u271
   256  00FECC  EF6A  F07F         	goto	u270
   257  00FED0                     u271:
   258  00FED0  EF77  F07F         	goto	l939
   259  00FED4                     u270:
   260  00FED4                     
   261                           ;main.c: 134:             if (isInformed == 1){
   262  00FED4  0411               	decf	_isInformed^0,w,c
   263  00FED6  1012               	iorwf	(_isInformed+1)^0,w,c
   264  00FED8  A4D8               	btfss	status,2,c
   265  00FEDA  EF71  F07F         	goto	u281
   266  00FEDE  EF73  F07F         	goto	u280
   267  00FEE2                     u281:
   268  00FEE2  EF77  F07F         	goto	l939
   269  00FEE6                     u280:
   270  00FEE6                     
   271                           ;main.c: 135:                 isInformed = 0;
   272  00FEE6  0E00               	movlw	0
   273  00FEE8  6E12               	movwf	(_isInformed+1)^0,c
   274  00FEEA  0E00               	movlw	0
   275  00FEEC  6E11               	movwf	_isInformed^0,c
   276  00FEEE                     l939:
   277                           
   278                           ;main.c: 138:         if (((unsigned int)adc(0)/10) >= 51){
   279  00FEEE  0E00               	movlw	0
   280  00FEF0  EC0B  F07F         	call	_adc
   281  00FEF4  C001  F008         	movff	?_adc,___lwdiv@dividend
   282  00FEF8  C002  F009         	movff	?_adc+1,___lwdiv@dividend+1
   283  00FEFC  0E00               	movlw	0
   284  00FEFE  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   285  00FF00  0E0A               	movlw	10
   286  00FF02  6E0A               	movwf	___lwdiv@divisor^0,c
   287  00FF04  ECD1  F07E         	call	___lwdiv	;wreg free
   288  00FF08  5009               	movf	(?___lwdiv+1)^0,w,c
   289  00FF0A  E109               	bnz	u290
   290  00FF0C  0E33               	movlw	51
   291  00FF0E  5C08               	subwf	?___lwdiv^0,w,c
   292  00FF10  A0D8               	btfss	status,0,c
   293  00FF12  EF8D  F07F         	goto	u291
   294  00FF16  EF8F  F07F         	goto	u290
   295  00FF1A                     u291:
   296  00FF1A  EF9F  F07F         	goto	l945
   297  00FF1E                     u290:
   298  00FF1E                     
   299                           ;main.c: 139:             if (isInformed == 0){
   300  00FF1E  5011               	movf	_isInformed^0,w,c
   301  00FF20  1012               	iorwf	(_isInformed+1)^0,w,c
   302  00FF22  A4D8               	btfss	status,2,c
   303  00FF24  EF96  F07F         	goto	u301
   304  00FF28  EF98  F07F         	goto	u300
   305  00FF2C                     u301:
   306  00FF2C  EF9C  F07F         	goto	l70
   307  00FF30                     u300:
   308  00FF30                     
   309                           ;main.c: 140:                 alarm();
   310  00FF30  ECA9  F07F         	call	_alarm	;wreg free
   311                           
   312                           ;main.c: 141:             } else {
   313  00FF34  EF63  F07F         	goto	l933
   314  00FF38                     l70:
   315                           
   316                           ;main.c: 142:                 PORTD = 255;
   317  00FF38  6883               	setf	131,c	;volatile
   318  00FF3A  EF63  F07F         	goto	l933
   319  00FF3E                     l945:
   320                           
   321                           ;main.c: 145:             PORTD = 0;
   322  00FF3E  0E00               	movlw	0
   323  00FF40  6E83               	movwf	131,c	;volatile
   324                           
   325                           ;main.c: 146:             isInformed = 0;
   326  00FF42  0E00               	movlw	0
   327  00FF44  6E12               	movwf	(_isInformed+1)^0,c
   328  00FF46  0E00               	movlw	0
   329  00FF48  6E11               	movwf	_isInformed^0,c
   330  00FF4A  EF63  F07F         	goto	l933
   331  00FF4E  EF00  F000         	goto	start
   332  00FF52                     __end_of_main:
   333                           	callstack 0
   334                           
   335 ;; *************** function _alarm *****************
   336 ;; Defined at:
   337 ;;		line 96 in file "main.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;  i               2   14[COMRAM] int 
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, status,2, status,0, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   355 ;;Total ram usage:        2 bytes
   356 ;; Hardware stack levels used: 1
   357 ;; Hardware stack levels required when called: 1
   358 ;; This function calls:
   359 ;;		___lwdiv
   360 ;;		_adc
   361 ;;		_delay
   362 ;; This function is called by:
   363 ;;		_main
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           	psect	text1
   368  00FF52                     __ptext1:
   369                           	callstack 0
   370  00FF52                     _alarm:
   371                           	callstack 29
   372  00FF52                     
   373                           ;main.c: 97:     int i = 0;
   374  00FF52  0E00               	movlw	0
   375  00FF54  6E10               	movwf	(alarm@i+1)^0,c
   376  00FF56  0E00               	movlw	0
   377  00FF58  6E0F               	movwf	alarm@i^0,c
   378                           
   379                           ;main.c: 98:     while (i < 10){
   380  00FF5A  EFED  F07F         	goto	l927
   381  00FF5E                     l55:
   382                           
   383                           ;main.c: 99:         if (PORTBbits.RB3 == 0) {
   384  00FF5E  B681               	btfsc	129,3,c	;volatile
   385  00FF60  EFB4  F07F         	goto	u231
   386  00FF64  EFB6  F07F         	goto	u230
   387  00FF68                     u231:
   388  00FF68  EFBC  F07F         	goto	l913
   389  00FF6C                     u230:
   390  00FF6C                     
   391                           ;main.c: 100:             PORTD = 0;
   392  00FF6C  0E00               	movlw	0
   393  00FF6E  6E83               	movwf	131,c	;volatile
   394                           
   395                           ;main.c: 101:             i = 0;
   396  00FF70  0E00               	movlw	0
   397  00FF72  6E10               	movwf	(alarm@i+1)^0,c
   398  00FF74  0E00               	movlw	0
   399  00FF76  6E0F               	movwf	alarm@i^0,c
   400  00FF78                     l913:
   401                           
   402                           ;main.c: 103:         if (((unsigned int)adc(0)/10) < 51){
   403  00FF78  0E00               	movlw	0
   404  00FF7A  EC0B  F07F         	call	_adc
   405  00FF7E  C001  F008         	movff	?_adc,___lwdiv@dividend
   406  00FF82  C002  F009         	movff	?_adc+1,___lwdiv@dividend+1
   407  00FF86  0E00               	movlw	0
   408  00FF88  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   409  00FF8A  0E0A               	movlw	10
   410  00FF8C  6E0A               	movwf	___lwdiv@divisor^0,c
   411  00FF8E  ECD1  F07E         	call	___lwdiv	;wreg free
   412  00FF92  5009               	movf	(?___lwdiv+1)^0,w,c
   413  00FF94  E107               	bnz	u241
   414  00FF96  0E33               	movlw	51
   415  00FF98  5C08               	subwf	?___lwdiv^0,w,c
   416  00FF9A  B0D8               	btfsc	status,0,c
   417  00FF9C  EFD2  F07F         	goto	u241
   418  00FFA0  EFD4  F07F         	goto	u240
   419  00FFA4                     u241:
   420  00FFA4  EFD8  F07F         	goto	l917
   421  00FFA8                     u240:
   422  00FFA8                     
   423                           ;main.c: 104:             i = 10;
   424  00FFA8  0E00               	movlw	0
   425  00FFAA  6E10               	movwf	(alarm@i+1)^0,c
   426  00FFAC  0E0A               	movlw	10
   427  00FFAE  6E0F               	movwf	alarm@i^0,c
   428  00FFB0                     l917:
   429                           
   430                           ;main.c: 106:         if (i%2 != 0){
   431  00FFB0  A00F               	btfss	alarm@i^0,0,c
   432  00FFB2  EFDD  F07F         	goto	u251
   433  00FFB6  EFDF  F07F         	goto	u250
   434  00FFBA                     u251:
   435  00FFBA  EFE3  F07F         	goto	l921
   436  00FFBE                     u250:
   437  00FFBE                     
   438                           ;main.c: 107:             PORTD = 1;
   439  00FFBE  0E01               	movlw	1
   440  00FFC0  6E83               	movwf	131,c	;volatile
   441                           
   442                           ;main.c: 108:         } else {
   443  00FFC2  EFE5  F07F         	goto	l923
   444  00FFC6                     l921:
   445                           
   446                           ;main.c: 109:             PORTD = 0;
   447  00FFC6  0E00               	movlw	0
   448  00FFC8  6E83               	movwf	131,c	;volatile
   449  00FFCA                     l923:
   450                           
   451                           ;main.c: 111:         delay(500);
   452  00FFCA  0E01               	movlw	1
   453  00FFCC  6E02               	movwf	(delay@ms+1)^0,c
   454  00FFCE  0EF4               	movlw	244
   455  00FFD0  6E01               	movwf	delay@ms^0,c
   456  00FFD2  ECAD  F07E         	call	_delay	;wreg free
   457  00FFD6                     
   458                           ;main.c: 112:         i++;
   459  00FFD6  4A0F               	infsnz	alarm@i^0,f,c
   460  00FFD8  2A10               	incf	(alarm@i+1)^0,f,c
   461  00FFDA                     l927:
   462                           
   463                           ;main.c: 98:     while (i < 10){
   464  00FFDA  BE10               	btfsc	(alarm@i+1)^0,7,c
   465  00FFDC  EFF9  F07F         	goto	u261
   466  00FFE0  5010               	movf	(alarm@i+1)^0,w,c
   467  00FFE2  E109               	bnz	u260
   468  00FFE4  0E0A               	movlw	10
   469  00FFE6  5C0F               	subwf	alarm@i^0,w,c
   470  00FFE8  A0D8               	btfss	status,0,c
   471  00FFEA  EFF9  F07F         	goto	u261
   472  00FFEE  EFFB  F07F         	goto	u260
   473  00FFF2                     u261:
   474  00FFF2  EFAF  F07F         	goto	l55
   475  00FFF6                     u260:
   476  00FFF6                     
   477                           ;main.c: 114:     isInformed = 1;
   478  00FFF6  0E00               	movlw	0
   479  00FFF8  6E12               	movwf	(_isInformed+1)^0,c
   480  00FFFA  0E01               	movlw	1
   481  00FFFC  6E11               	movwf	_isInformed^0,c
   482  00FFFE  0012               	return		;funcret
   483  010000                     __end_of_alarm:
   484                           	callstack 0
   485                           
   486 ;; *************** function _delay *****************
   487 ;; Defined at:
   488 ;;		line 60 in file "main.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;  ms              2    0[COMRAM] unsigned int 
   491 ;; Auto vars:     Size  Location     Type
   492 ;;  i               2    2[COMRAM] unsigned int 
   493 ;;  j               1    4[COMRAM] unsigned char 
   494 ;; Return value:  Size  Location     Type
   495 ;;                  1    wreg      void 
   496 ;; Registers used:
   497 ;;		wreg, status,2, status,0
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;Total ram usage:        5 bytes
   508 ;; Hardware stack levels used: 1
   509 ;; This function calls:
   510 ;;		Nothing
   511 ;; This function is called by:
   512 ;;		_alarm
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           	psect	text2
   517  00FD5A                     __ptext2:
   518                           	callstack 0
   519  00FD5A                     _delay:
   520                           	callstack 29
   521  00FD5A                     
   522                           ;main.c: 60: void delay(unsigned int ms);main.c: 61: {;main.c: 62:     unsigned int i;;m
      +                          ain.c: 63:     unsigned char j;;main.c: 65:  for (i =0; i< ms; i++)
   523  00FD5A  0E00               	movlw	0
   524  00FD5C  6E04               	movwf	(delay@i+1)^0,c
   525  00FD5E  0E00               	movlw	0
   526  00FD60  6E03               	movwf	delay@i^0,c
   527  00FD62  EFC5  F07E         	goto	l865
   528  00FD66                     l853:
   529                           
   530                           ;main.c: 66:  {;main.c: 68:   for (j =0 ; j < 200; j++)
   531  00FD66  0E00               	movlw	0
   532  00FD68  6E05               	movwf	delay@j^0,c
   533  00FD6A                     l35:
   534                           
   535                           ;main.c: 69:    {;main.c: 70:       __nop();
   536  00FD6A  F000               	nop	
   537                           
   538                           ;main.c: 71:       __nop();
   539  00FD6C  F000               	nop	
   540                           
   541                           ;main.c: 72:       __nop();
   542  00FD6E  F000               	nop	
   543                           
   544                           ;main.c: 73:       __nop();
   545  00FD70  F000               	nop	
   546                           
   547                           ;main.c: 74:       __nop();
   548  00FD72  F000               	nop	
   549  00FD74                     
   550                           ;main.c: 75:    }
   551  00FD74  2A05               	incf	delay@j^0,f,c
   552  00FD76  0EC7               	movlw	199
   553  00FD78  6405               	cpfsgt	delay@j^0,c
   554  00FD7A  EFC1  F07E         	goto	u161
   555  00FD7E  EFC3  F07E         	goto	u160
   556  00FD82                     u161:
   557  00FD82  EFB5  F07E         	goto	l35
   558  00FD86                     u160:
   559  00FD86                     
   560                           ;main.c: 76:  }
   561  00FD86  4A03               	infsnz	delay@i^0,f,c
   562  00FD88  2A04               	incf	(delay@i+1)^0,f,c
   563  00FD8A                     l865:
   564  00FD8A  5001               	movf	delay@ms^0,w,c
   565  00FD8C  5C03               	subwf	delay@i^0,w,c
   566  00FD8E  5002               	movf	(delay@ms+1)^0,w,c
   567  00FD90  5804               	subwfb	(delay@i+1)^0,w,c
   568  00FD92  A0D8               	btfss	status,0,c
   569  00FD94  EFCE  F07E         	goto	u171
   570  00FD98  EFD0  F07E         	goto	u170
   571  00FD9C                     u171:
   572  00FD9C  EFB3  F07E         	goto	l853
   573  00FDA0                     u170:
   574  00FDA0  0012               	return		;funcret
   575  00FDA2                     __end_of_delay:
   576                           	callstack 0
   577                           
   578 ;; *************** function _adc *****************
   579 ;; Defined at:
   580 ;;		line 79 in file "main.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;  kanal           1    wreg     unsigned char 
   583 ;; Auto vars:     Size  Location     Type
   584 ;;  kanal           1    6[COMRAM] unsigned char 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  2    0[COMRAM] unsigned int 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   594 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   597 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   598 ;;Total ram usage:        7 bytes
   599 ;; Hardware stack levels used: 1
   600 ;; This function calls:
   601 ;;		Nothing
   602 ;; This function is called by:
   603 ;;		_alarm
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text3
   609  00FE16                     __ptext3:
   610                           	callstack 0
   611  00FE16                     _adc:
   612                           	callstack 29
   613                           
   614                           ;incstack = 0
   615                           ;adc@kanal stored from wreg
   616  00FE16  6E07               	movwf	adc@kanal^0,c
   617  00FE18                     
   618                           ;main.c: 79: unsigned int adc(unsigned char kanal);main.c: 80: {;main.c: 81:     switch(
      +                          kanal)
   619  00FE18  EF1A  F07F         	goto	l877
   620  00FE1C                     l869:
   621  00FE1C  0E01               	movlw	1
   622  00FE1E  6EC2               	movwf	194,c	;volatile
   623  00FE20  EF33  F07F         	goto	l43
   624  00FE24                     l871:
   625  00FE24  0E05               	movlw	5
   626  00FE26  6EC2               	movwf	194,c	;volatile
   627  00FE28  EF33  F07F         	goto	l43
   628  00FE2C                     l873:
   629  00FE2C  0E09               	movlw	9
   630  00FE2E  6EC2               	movwf	194,c	;volatile
   631  00FE30  EF33  F07F         	goto	l43
   632  00FE34                     l877:
   633  00FE34  5007               	movf	adc@kanal^0,w,c
   634  00FE36  6E03               	movwf	??_adc^0,c
   635  00FE38  6A04               	clrf	(??_adc+1)^0,c
   636                           
   637                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   638                           ; Switch size 1, requested type "simple"
   639                           ; Number of cases is 1, Range of values is 0 to 0
   640                           ; switch strategies available:
   641                           ; Name         Instructions Cycles
   642                           ; simple_byte            4     3 (average)
   643                           ;	Chosen strategy is simple_byte
   644  00FE3A  5004               	movf	(??_adc+1)^0,w,c
   645  00FE3C  0A00               	xorlw	0	; case 0
   646  00FE3E  B4D8               	btfsc	status,2,c
   647  00FE40  EF24  F07F         	goto	l951
   648  00FE44  EF33  F07F         	goto	l43
   649  00FE48                     l951:
   650                           
   651                           ; Switch size 1, requested type "simple"
   652                           ; Number of cases is 3, Range of values is 0 to 2
   653                           ; switch strategies available:
   654                           ; Name         Instructions Cycles
   655                           ; simple_byte           10     6 (average)
   656                           ;	Chosen strategy is simple_byte
   657  00FE48  5003               	movf	??_adc^0,w,c
   658  00FE4A  0A00               	xorlw	0	; case 0
   659  00FE4C  B4D8               	btfsc	status,2,c
   660  00FE4E  EF0E  F07F         	goto	l869
   661  00FE52  0A01               	xorlw	1	; case 1
   662  00FE54  B4D8               	btfsc	status,2,c
   663  00FE56  EF12  F07F         	goto	l871
   664  00FE5A  0A03               	xorlw	3	; case 2
   665  00FE5C  B4D8               	btfsc	status,2,c
   666  00FE5E  EF16  F07F         	goto	l873
   667  00FE62  EF33  F07F         	goto	l43
   668  00FE66                     l43:
   669                           
   670                           ;main.c: 88:     ADCON0bits.GO=1;
   671  00FE66  82C2               	bsf	194,1,c	;volatile
   672  00FE68                     l46:
   673  00FE68  B2C2               	btfsc	194,1,c	;volatile
   674  00FE6A  EF39  F07F         	goto	u181
   675  00FE6E  EF3B  F07F         	goto	u180
   676  00FE72                     u181:
   677  00FE72  EF34  F07F         	goto	l46
   678  00FE76                     u180:
   679  00FE76                     
   680                           ;main.c: 91:    return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
   681  00FE76  CFC3 F003          	movff	4035,??_adc	;volatile
   682  00FE7A  0E06               	movlw	6
   683  00FE7C  6E04               	movwf	(??_adc+1)^0,c
   684  00FE7E                     u195:
   685  00FE7E  90D8               	bcf	status,0,c
   686  00FE80  3203               	rrcf	??_adc^0,f,c
   687  00FE82  2E04               	decfsz	(??_adc+1)^0,f,c
   688  00FE84  EF3F  F07F         	goto	u195
   689  00FE88  5003               	movf	??_adc^0,w,c
   690  00FE8A  CFC4 F005          	movff	4036,??_adc+2	;volatile
   691  00FE8E  6A06               	clrf	(??_adc+3)^0,c
   692  00FE90  90D8               	bcf	status,0,c
   693  00FE92  3605               	rlcf	(??_adc+2)^0,f,c
   694  00FE94  3606               	rlcf	(??_adc+3)^0,f,c
   695  00FE96  90D8               	bcf	status,0,c
   696  00FE98  3605               	rlcf	(??_adc+2)^0,f,c
   697  00FE9A  3606               	rlcf	(??_adc+3)^0,f,c
   698  00FE9C  1005               	iorwf	(??_adc+2)^0,w,c
   699  00FE9E  6E01               	movwf	?_adc^0,c
   700  00FEA0  5006               	movf	(??_adc+3)^0,w,c
   701  00FEA2  6E02               	movwf	(?_adc+1)^0,c
   702  00FEA4  0012               	return		;funcret
   703  00FEA6                     __end_of_adc:
   704                           	callstack 0
   705                           
   706 ;; *************** function ___lwdiv *****************
   707 ;; Defined at:
   708 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;  dividend        2    7[COMRAM] unsigned int 
   711 ;;  divisor         2    9[COMRAM] unsigned int 
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  quotient        2   11[COMRAM] unsigned int 
   714 ;;  counter         1   13[COMRAM] unsigned char 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  2    7[COMRAM] unsigned int 
   717 ;; Registers used:
   718 ;;		wreg, status,2, status,0
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   724 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;Total ram usage:        7 bytes
   729 ;; Hardware stack levels used: 1
   730 ;; This function calls:
   731 ;;		Nothing
   732 ;; This function is called by:
   733 ;;		_alarm
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text4
   739  00FDA2                     __ptext4:
   740                           	callstack 0
   741  00FDA2                     ___lwdiv:
   742                           	callstack 29
   743  00FDA2  0E00               	movlw	0
   744  00FDA4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
   745  00FDA6  0E00               	movlw	0
   746  00FDA8  6E0C               	movwf	___lwdiv@quotient^0,c
   747  00FDAA  500A               	movf	___lwdiv@divisor^0,w,c
   748  00FDAC  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
   749  00FDAE  B4D8               	btfsc	status,2,c
   750  00FDB0  EFDC  F07E         	goto	u201
   751  00FDB4  EFDE  F07E         	goto	u200
   752  00FDB8                     u201:
   753  00FDB8  EF06  F07F         	goto	l569
   754  00FDBC                     u200:
   755  00FDBC  0E01               	movlw	1
   756  00FDBE  6E0E               	movwf	___lwdiv@counter^0,c
   757  00FDC0  EFE6  F07E         	goto	l895
   758  00FDC4                     l893:
   759  00FDC4  90D8               	bcf	status,0,c
   760  00FDC6  360A               	rlcf	___lwdiv@divisor^0,f,c
   761  00FDC8  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
   762  00FDCA  2A0E               	incf	___lwdiv@counter^0,f,c
   763  00FDCC                     l895:
   764  00FDCC  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
   765  00FDCE  EFEB  F07E         	goto	u211
   766  00FDD2  EFED  F07E         	goto	u210
   767  00FDD6                     u211:
   768  00FDD6  EFE2  F07E         	goto	l893
   769  00FDDA                     u210:
   770  00FDDA                     l897:
   771  00FDDA  90D8               	bcf	status,0,c
   772  00FDDC  360C               	rlcf	___lwdiv@quotient^0,f,c
   773  00FDDE  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
   774  00FDE0  500A               	movf	___lwdiv@divisor^0,w,c
   775  00FDE2  5C08               	subwf	___lwdiv@dividend^0,w,c
   776  00FDE4  500B               	movf	(___lwdiv@divisor+1)^0,w,c
   777  00FDE6  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
   778  00FDE8  A0D8               	btfss	status,0,c
   779  00FDEA  EFF9  F07E         	goto	u221
   780  00FDEE  EFFB  F07E         	goto	u220
   781  00FDF2                     u221:
   782  00FDF2  EF00  F07F         	goto	l905
   783  00FDF6                     u220:
   784  00FDF6  500A               	movf	___lwdiv@divisor^0,w,c
   785  00FDF8  5E08               	subwf	___lwdiv@dividend^0,f,c
   786  00FDFA  500B               	movf	(___lwdiv@divisor+1)^0,w,c
   787  00FDFC  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
   788  00FDFE  800C               	bsf	___lwdiv@quotient^0,0,c
   789  00FE00                     l905:
   790  00FE00  90D8               	bcf	status,0,c
   791  00FE02  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
   792  00FE04  320A               	rrcf	___lwdiv@divisor^0,f,c
   793  00FE06  2E0E               	decfsz	___lwdiv@counter^0,f,c
   794  00FE08  EFED  F07E         	goto	l897
   795  00FE0C                     l569:
   796  00FE0C  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
   797  00FE10  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
   798  00FE14  0012               	return		;funcret
   799  00FE16                     __end_of___lwdiv:
   800                           	callstack 0
   801  0000                     
   802                           	psect	rparam
   803  0000                     
   804                           	psect	idloc
   805                           
   806                           ;Config register IDLOC0 @ 0x200000
   807                           ;	unspecified, using default values
   808  200000                     	org	2097152
   809  200000  FF                 	db	255
   810                           
   811                           ;Config register IDLOC1 @ 0x200001
   812                           ;	unspecified, using default values
   813  200001                     	org	2097153
   814  200001  FF                 	db	255
   815                           
   816                           ;Config register IDLOC2 @ 0x200002
   817                           ;	unspecified, using default values
   818  200002                     	org	2097154
   819  200002  FF                 	db	255
   820                           
   821                           ;Config register IDLOC3 @ 0x200003
   822                           ;	unspecified, using default values
   823  200003                     	org	2097155
   824  200003  FF                 	db	255
   825                           
   826                           ;Config register IDLOC4 @ 0x200004
   827                           ;	unspecified, using default values
   828  200004                     	org	2097156
   829  200004  FF                 	db	255
   830                           
   831                           ;Config register IDLOC5 @ 0x200005
   832                           ;	unspecified, using default values
   833  200005                     	org	2097157
   834  200005  FF                 	db	255
   835                           
   836                           ;Config register IDLOC6 @ 0x200006
   837                           ;	unspecified, using default values
   838  200006                     	org	2097158
   839  200006  FF                 	db	255
   840                           
   841                           ;Config register IDLOC7 @ 0x200007
   842                           ;	unspecified, using default values
   843  200007                     	org	2097159
   844  200007  FF                 	db	255
   845                           
   846                           	psect	config
   847                           
   848                           ; Padding undefined space
   849  300000                     	org	3145728
   850  300000  FF                 	db	255
   851                           
   852                           ;Config register CONFIG1H @ 0x300001
   853                           ;	Oscillator Selection bits
   854                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
   855                           ;	Fail-Safe Clock Monitor Enable bit
   856                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   857                           ;	Internal/External Oscillator Switchover bit
   858                           ;	IESO = OFF, Oscillator Switchover mode disabled
   859  300001                     	org	3145729
   860  300001  06                 	db	6
   861                           
   862                           ;Config register CONFIG2L @ 0x300002
   863                           ;	Power-up Timer Enable bit
   864                           ;	PWRT = ON, PWRT enabled
   865                           ;	Brown-out Reset Enable bits
   866                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
   867                           ;	Brown Out Reset Voltage bits
   868                           ;	BORV = 3, Minimum setting
   869  300002                     	org	3145730
   870  300002  18                 	db	24
   871                           
   872                           ;Config register CONFIG2H @ 0x300003
   873                           ;	Watchdog Timer Enable bit
   874                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   875                           ;	Watchdog Timer Postscale Select bits
   876                           ;	WDTPS = 32768, 1:32768
   877  300003                     	org	3145731
   878  300003  1E                 	db	30
   879                           
   880                           ; Padding undefined space
   881  300004                     	org	3145732
   882  300004  FF                 	db	255
   883                           
   884                           ;Config register CONFIG3H @ 0x300005
   885                           ;	CCP2 MUX bit
   886                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
   887                           ;	PORTB A/D Enable bit
   888                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   889                           ;	Low-Power Timer1 Oscillator Enable bit
   890                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   891                           ;	MCLR Pin Enable bit
   892                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   893  300005                     	org	3145733
   894  300005  81                 	db	129
   895                           
   896                           ;Config register CONFIG4L @ 0x300006
   897                           ;	Stack Full/Underflow Reset Enable bit
   898                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   899                           ;	Single-Supply ICSP Enable bit
   900                           ;	LVP = OFF, Single-Supply ICSP disabled
   901                           ;	Extended Instruction Set Enable bit
   902                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   903                           ;	Background Debugger Enable bit
   904                           ;	DEBUG = 0x1, unprogrammed default
   905  300006                     	org	3145734
   906  300006  80                 	db	128
   907                           
   908                           ; Padding undefined space
   909  300007                     	org	3145735
   910  300007  FF                 	db	255
   911                           
   912                           ;Config register CONFIG5L @ 0x300008
   913                           ;	Code Protection bit
   914                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
   915                           ;	Code Protection bit
   916                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
   917                           ;	Code Protection bit
   918                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
   919                           ;	Code Protection bit
   920                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
   921  300008                     	org	3145736
   922  300008  0F                 	db	15
   923                           
   924                           ;Config register CONFIG5H @ 0x300009
   925                           ;	Boot Block Code Protection bit
   926                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
   927                           ;	Data EEPROM Code Protection bit
   928                           ;	CPD = OFF, Data EEPROM not code-protected
   929  300009                     	org	3145737
   930  300009  C0                 	db	192
   931                           
   932                           ;Config register CONFIG6L @ 0x30000A
   933                           ;	Write Protection bit
   934                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
   935                           ;	Write Protection bit
   936                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
   937                           ;	Write Protection bit
   938                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
   939                           ;	Write Protection bit
   940                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
   941  30000A                     	org	3145738
   942  30000A  0F                 	db	15
   943                           
   944                           ;Config register CONFIG6H @ 0x30000B
   945                           ;	Configuration Register Write Protection bit
   946                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   947                           ;	Boot Block Write Protection bit
   948                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
   949                           ;	Data EEPROM Write Protection bit
   950                           ;	WRTD = OFF, Data EEPROM not write-protected
   951  30000B                     	org	3145739
   952  30000B  E0                 	db	224
   953                           
   954                           ;Config register CONFIG7L @ 0x30000C
   955                           ;	Table Read Protection bit
   956                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
   957                           ;	Table Read Protection bit
   958                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
   959                           ;	Table Read Protection bit
   960                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
   961                           ;	Table Read Protection bit
   962                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
   963  30000C                     	org	3145740
   964  30000C  0F                 	db	15
   965                           
   966                           ;Config register CONFIG7H @ 0x30000D
   967                           ;	Boot Block Table Read Protection bit
   968                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
   969  30000D                     	org	3145741
   970  30000D  40                 	db	64
   971                           tosu	equ	0xFFF
   972                           tosh	equ	0xFFE
   973                           tosl	equ	0xFFD
   974                           stkptr	equ	0xFFC
   975                           pclatu	equ	0xFFB
   976                           pclath	equ	0xFFA
   977                           pcl	equ	0xFF9
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           prodh	equ	0xFF4
   983                           prodl	equ	0xFF3
   984                           indf0	equ	0xFEF
   985                           postinc0	equ	0xFEE
   986                           postdec0	equ	0xFED
   987                           preinc0	equ	0xFEC
   988                           plusw0	equ	0xFEB
   989                           fsr0h	equ	0xFEA
   990                           fsr0l	equ	0xFE9
   991                           wreg	equ	0xFE8
   992                           indf1	equ	0xFE7
   993                           postinc1	equ	0xFE6
   994                           postdec1	equ	0xFE5
   995                           preinc1	equ	0xFE4
   996                           plusw1	equ	0xFE3
   997                           fsr1h	equ	0xFE2
   998                           fsr1l	equ	0xFE1
   999                           bsr	equ	0xFE0
  1000                           indf2	equ	0xFDF
  1001                           postinc2	equ	0xFDE
  1002                           postdec2	equ	0xFDD
  1003                           preinc2	equ	0xFDC
  1004                           plusw2	equ	0xFDB
  1005                           fsr2h	equ	0xFDA
  1006                           fsr2l	equ	0xFD9
  1007                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     16      20
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_alarm
    _alarm->___lwdiv
    ___lwdiv->_adc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1192
                            ___lwdiv
                                _adc
                              _alarm
 ---------------------------------------------------------------------------------
 (1) _alarm                                                2     2      0     704
                                             14 COMRAM     2     2      0
                            ___lwdiv
                                _adc
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     168
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _adc                                                  7     5      2      22
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              7 COMRAM     7     3      4
                                _adc (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
     _adc (ARG)
   _adc
   _alarm
     ___lwdiv
     _adc
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     10      14       1       15.7%
BITBIGSFRhh         3B      0       0      36        0.0%
BITBIGSFRlhhh       29      0       0      37        0.0%
BITBIGSFRlhhl        E      0       0      38        0.0%
BITBIGSFRlhl         1      0       0      39        0.0%
BITBIGSFRll          1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      14      41        0.0%
DATA                 0      0      14       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue May 17 10:09:06 2022

                     l43 FE66                       l35 FD6A                       l61 FFFE  
                     l46 FE68                       l38 FDA0                       l70 FF38  
                     l55 FF5E                       l49 FEA4                      l901 FDF6  
                    l903 FDFE                      l911 FF6C                      l576 FE14  
                    l905 FE00                      l569 FE0C                      l921 FFC6  
                    l913 FF78                      l907 FE06                      l851 FD5A  
                    l923 FFCA                      l915 FFA8                      l931 FEA6  
                    l861 FD76                      l853 FD66                      l925 FFD6  
                    l917 FFB0                      l909 FF52                      l941 FF1E  
                    l933 FEC6                      l951 FE48                      l871 FE24  
                    l863 FD86                      l919 FFBE                      l927 FFDA  
                    l943 FF30                      l935 FED4                      l873 FE2C  
                    l865 FD8A                      l929 FFF6                      l945 FF3E  
                    l937 FEE6                      l891 FDBC                      l867 FE18  
                    l859 FD74                      l939 FEEE                      l893 FDC4  
                    l869 FE1C                      l877 FE34                      l895 FDCC  
                    l887 FDA2                      l879 FE76                      l897 FDDA  
                    l889 FDAA                      l899 FDE0                      u200 FDBC  
                    u201 FDB8                      u210 FDDA                      u211 FDD6  
                    u220 FDF6                      u300 FF30                      u221 FDF2  
                    u301 FF2C                      u230 FF6C                      u231 FF68  
                    u160 FD86                      u240 FFA8                      u161 FD82  
                    u241 FFA4                      u170 FDA0                      u250 FFBE  
                    u171 FD9C                      u251 FFBA                      u180 FE76  
                    u260 FFF6                      u181 FE72                      u261 FFF2  
                    u270 FED4                      u271 FED0                      u280 FEE6  
                    u281 FEE2                      u290 FF1E                      u195 FE7E  
                    u291 FF1A                      _adc FE16                     ?_adc 0001  
                   _main FEA6                     start 0000             ___param_bank 000000  
                  ??_adc 0003                    ?_main 0001          __end_of___lwdiv FE16  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
                  _alarm FF52                    _delay FD5A                    tablat 000FF5  
                  status 000FD8          __initialization FD34             __end_of_main FF52  
                 ??_main 0011            __activetblptr 000002                   ?_alarm 0001  
                 ?_delay 0001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ADRESH 000FC4                   _ADRESL 000FC3  
              ??___lwdiv 000C                   alarm@i 000F                   delay@i 0003  
                 delay@j 0005                   isa$std 000001             __pdataCOMRAM 0013  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization FD50            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_alarm 0000            __end_of_delay FDA2  
                ??_alarm 000F                  ??_delay 0003               _isInformed 0011  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv FDA2  
                __pcinit FD34                  __ramtop 1000                  __ptext0 FEA6  
                __ptext1 FF52                  __ptext2 FD5A                  __ptext3 FE16  
                __ptext4 FDA2                  delay@ms 0001     end_of_initialization FD50  
          __Lmediumconst 0000                _PORTBbits 000F81            __pidataCOMRAM FD32  
    start_initialization FD34              __end_of_adc FEA6              __pbssCOMRAM 0011  
       ___lwdiv@dividend 0008                 ?___lwdiv 0008                _direction 0013  
       ___lwdiv@quotient 000C               _ADCON0bits 000FC2                 __Hrparam 0000  
               __Lrparam 0000                 adc@kanal 0007          ___lwdiv@divisor 000A  
        ___lwdiv@counter 000E                 isa$xinst 000000  
