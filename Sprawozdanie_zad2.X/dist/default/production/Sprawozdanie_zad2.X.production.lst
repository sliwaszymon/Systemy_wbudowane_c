

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Apr 12 11:10:34 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4620 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  00FC1C                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _direction
    62  00FC1C  0001               	dw	1
    63  0000                     _ADRESL	set	4035
    64  0000                     _ADRESH	set	4036
    65  0000                     _ADCON0bits	set	4034
    66  0000                     _PORTBbits	set	3969
    67  0000                     _PORTD	set	3971
    68  0000                     _TRISA	set	3986
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON1	set	4033
    71  0000                     _ADCON0	set	4034
    72  0000                     _TRISE	set	3990
    73  0000                     _TRISD	set	3989
    74  0000                     _TRISC	set	3988
    75  0000                     _TRISB	set	3987
    76                           
    77                           ; #config settings
    78                           
    79                           	psect	cinit
    80  00FC1E                     __pcinit:
    81                           	callstack 0
    82  00FC1E                     start_initialization:
    83                           	callstack 0
    84  00FC1E                     __initialization:
    85                           	callstack 0
    86                           
    87                           ; Initialize objects allocated to COMRAM (2 bytes)
    88                           ; load TBLPTR registers with __pidataCOMRAM
    89  00FC1E  0E1C               	movlw	low __pidataCOMRAM
    90  00FC20  6EF6               	movwf	tblptrl,c
    91  00FC22  0EFC               	movlw	high __pidataCOMRAM
    92  00FC24  6EF7               	movwf	tblptrh,c
    93  00FC26  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    94  00FC28  6EF8               	movwf	tblptru,c
    95  00FC2A  0009               	tblrd		*+	;fetch initializer
    96  00FC2C  CFF5 F015          	movff	tablat,__pdataCOMRAM
    97  00FC30  0009               	tblrd		*+	;fetch initializer
    98  00FC32  CFF5 F016          	movff	tablat,__pdataCOMRAM+1
    99  00FC36                     end_of_initialization:
   100                           	callstack 0
   101  00FC36                     __end_of__initialization:
   102                           	callstack 0
   103  00FC36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   104  00FC38  6EF8               	movwf	tblptru,c
   105  00FC3A  0100               	movlb	0
   106  00FC3C  EF2D  F07F         	goto	_main	;jump to C main() function
   107                           
   108                           	psect	dataCOMRAM
   109  000015                     __pdataCOMRAM:
   110                           	callstack 0
   111  000015                     _direction:
   112                           	callstack 0
   113  000015                     	ds	2
   114                           
   115                           	psect	cstackCOMRAM
   116  000001                     __pcstackCOMRAM:
   117                           	callstack 0
   118  000001                     ?_adc:
   119                           	callstack 0
   120  000001                     delay@ms:
   121                           	callstack 0
   122                           
   123                           ; 2 bytes @ 0x0
   124  000001                     	ds	2
   125  000003                     ??_adc:
   126  000003                     delay@i:
   127                           	callstack 0
   128                           
   129                           ; 2 bytes @ 0x2
   130  000003                     	ds	2
   131  000005                     delay@j:
   132                           	callstack 0
   133                           
   134                           ; 1 bytes @ 0x4
   135  000005                     	ds	2
   136  000007                     adc@kanal:
   137                           	callstack 0
   138                           
   139                           ; 1 bytes @ 0x6
   140  000007                     	ds	1
   141  000008                     ?___lwdiv:
   142                           	callstack 0
   143  000008                     ___lwdiv@dividend:
   144                           	callstack 0
   145                           
   146                           ; 2 bytes @ 0x7
   147  000008                     	ds	2
   148  00000A                     ___lwdiv@divisor:
   149                           	callstack 0
   150                           
   151                           ; 2 bytes @ 0x9
   152  00000A                     	ds	2
   153  00000C                     ___lwdiv@quotient:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0xB
   157  00000C                     	ds	2
   158  00000E                     ___lwdiv@counter:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0xD
   162  00000E                     	ds	1
   163  00000F                     better_delay@value:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0xE
   167  00000F                     	ds	2
   168  000011                     bin_up@display:
   169                           	callstack 0
   170  000011                     snake@display:
   171                           	callstack 0
   172                           
   173                           ; 1 bytes @ 0x10
   174  000011                     	ds	1
   175  000012                     main@task:
   176                           	callstack 0
   177                           
   178                           ; 2 bytes @ 0x11
   179  000012                     	ds	2
   180  000014                     main@display:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0x13
   184  000014                     	ds	1
   185                           
   186 ;;
   187 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   188 ;;
   189 ;; *************** function _main *****************
   190 ;; Defined at:
   191 ;;		line 137 in file "main.c"
   192 ;; Parameters:    Size  Location     Type
   193 ;;		None
   194 ;; Auto vars:     Size  Location     Type
   195 ;;  task            2   17[COMRAM] unsigned int 
   196 ;;  tmp             2    0        unsigned int 
   197 ;;  display         1   19[COMRAM] unsigned char 
   198 ;; Return value:  Size  Location     Type
   199 ;;                  1    wreg      void 
   200 ;; Registers used:
   201 ;;		wreg, status,2, status,0, cstack
   202 ;; Tracked objects:
   203 ;;		On entry : 0/0
   204 ;;		On exit  : 0/0
   205 ;;		Unchanged: 0/0
   206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   210 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   211 ;;Total ram usage:        3 bytes
   212 ;; Hardware stack levels required when called: 3
   213 ;; This function calls:
   214 ;;		_bin_up
   215 ;;		_delay
   216 ;;		_snake
   217 ;; This function is called by:
   218 ;;		Startup code after reset
   219 ;; This function uses a non-reentrant model
   220 ;;
   221                           
   222                           	psect	text0
   223  00FE5A                     __ptext0:
   224                           	callstack 0
   225  00FE5A                     _main:
   226                           	callstack 28
   227  00FE5A                     
   228                           ;main.c: 140:     ADCON0=0x01;
   229  00FE5A  0E01               	movlw	1
   230  00FE5C  6EC2               	movwf	194,c	;volatile
   231                           
   232                           ;main.c: 141:     ADCON1=0x0B;
   233  00FE5E  0E0B               	movlw	11
   234  00FE60  6EC1               	movwf	193,c	;volatile
   235                           
   236                           ;main.c: 142:     ADCON2=0x01;
   237  00FE62  0E01               	movlw	1
   238  00FE64  6EC0               	movwf	192,c	;volatile
   239                           
   240                           ;main.c: 144:     TRISA=0xC3;
   241  00FE66  0EC3               	movlw	195
   242  00FE68  6E92               	movwf	146,c	;volatile
   243                           
   244                           ;main.c: 145:     TRISB=0x3F;
   245  00FE6A  0E3F               	movlw	63
   246  00FE6C  6E93               	movwf	147,c	;volatile
   247                           
   248                           ;main.c: 146:     TRISC=0x01;
   249  00FE6E  0E01               	movlw	1
   250  00FE70  6E94               	movwf	148,c	;volatile
   251                           
   252                           ;main.c: 147:     TRISD=0x00;
   253  00FE72  0E00               	movlw	0
   254  00FE74  6E95               	movwf	149,c	;volatile
   255                           
   256                           ;main.c: 148:     TRISE=0x00;
   257  00FE76  0E00               	movlw	0
   258  00FE78  6E96               	movwf	150,c	;volatile
   259                           
   260                           ;main.c: 150:     unsigned char display = 0;
   261  00FE7A  0E00               	movlw	0
   262  00FE7C  6E14               	movwf	main@display^0,c
   263  00FE7E                     l1022:
   264                           
   265                           ;main.c: 154:     {;main.c: 155:         PORTD = display;
   266  00FE7E  C014  FF83         	movff	main@display,3971	;volatile
   267                           
   268                           ;main.c: 156:         unsigned int task = 1;
   269  00FE82  0E00               	movlw	0
   270  00FE84  6E13               	movwf	(main@task+1)^0,c
   271  00FE86  0E01               	movlw	1
   272  00FE88  6E12               	movwf	main@task^0,c
   273  00FE8A                     
   274                           ;main.c: 157:         delay(100);
   275  00FE8A  0E00               	movlw	0
   276  00FE8C  6E02               	movwf	(delay@ms+1)^0,c
   277  00FE8E  0E64               	movlw	100
   278  00FE90  6E01               	movwf	delay@ms^0,c
   279  00FE92  EC36  F07E         	call	_delay	;wreg free
   280  00FE96                     
   281                           ;main.c: 158:         if (PORTBbits.RB3 == 0) {
   282  00FE96  B681               	btfsc	129,3,c	;volatile
   283  00FE98  EF50  F07F         	goto	u411
   284  00FE9C  EF52  F07F         	goto	u410
   285  00FEA0                     u411:
   286  00FEA0  EF5A  F07F         	goto	l80
   287  00FEA4                     u410:
   288  00FEA4                     
   289                           ;main.c: 159:             task = 1;
   290  00FEA4  0E00               	movlw	0
   291  00FEA6  6E13               	movwf	(main@task+1)^0,c
   292  00FEA8  0E01               	movlw	1
   293  00FEAA  6E12               	movwf	main@task^0,c
   294                           
   295                           ;main.c: 160:             display = 0;
   296  00FEAC  0E00               	movlw	0
   297  00FEAE  6E14               	movwf	main@display^0,c
   298                           
   299                           ;main.c: 161:         } else if (PORTBbits.RB4 == 0) {
   300  00FEB0  EF6B  F07F         	goto	l1032
   301  00FEB4                     l80:
   302  00FEB4  B881               	btfsc	129,4,c	;volatile
   303  00FEB6  EF5F  F07F         	goto	u421
   304  00FEBA  EF61  F07F         	goto	u420
   305  00FEBE                     u421:
   306  00FEBE  EF6B  F07F         	goto	l1032
   307  00FEC2                     u420:
   308  00FEC2                     
   309                           ;main.c: 162:             task = 2;
   310  00FEC2  0E00               	movlw	0
   311  00FEC4  6E13               	movwf	(main@task+1)^0,c
   312  00FEC6  0E02               	movlw	2
   313  00FEC8  6E12               	movwf	main@task^0,c
   314                           
   315                           ;main.c: 163:             display = 0;
   316  00FECA  0E00               	movlw	0
   317  00FECC  6E14               	movwf	main@display^0,c
   318                           
   319                           ;main.c: 164:             direction = 1;
   320  00FECE  0E00               	movlw	0
   321  00FED0  6E16               	movwf	(_direction+1)^0,c
   322  00FED2  0E01               	movlw	1
   323  00FED4  6E15               	movwf	_direction^0,c
   324  00FED6                     l1032:
   325                           
   326                           ;main.c: 167:         if (task == 1) {
   327  00FED6  0412               	decf	main@task^0,w,c
   328  00FED8  1013               	iorwf	(main@task+1)^0,w,c
   329  00FEDA  A4D8               	btfss	status,2,c
   330  00FEDC  EF72  F07F         	goto	u431
   331  00FEE0  EF74  F07F         	goto	u430
   332  00FEE4                     u431:
   333  00FEE4  EF7A  F07F         	goto	l1036
   334  00FEE8                     u430:
   335  00FEE8                     
   336                           ;main.c: 168:             display = bin_up(display);
   337  00FEE8  5014               	movf	main@display^0,w,c
   338  00FEEA  EC20  F07E         	call	_bin_up
   339  00FEEE  6E14               	movwf	main@display^0,c
   340                           
   341                           ;main.c: 169:         } else if (task == 2) {
   342  00FEF0  EF3F  F07F         	goto	l1022
   343  00FEF4                     l1036:
   344  00FEF4  0E02               	movlw	2
   345  00FEF6  1812               	xorwf	main@task^0,w,c
   346  00FEF8  1013               	iorwf	(main@task+1)^0,w,c
   347  00FEFA  A4D8               	btfss	status,2,c
   348  00FEFC  EF82  F07F         	goto	u441
   349  00FF00  EF84  F07F         	goto	u440
   350  00FF04                     u441:
   351  00FF04  EF3F  F07F         	goto	l1022
   352  00FF08                     u440:
   353  00FF08                     
   354                           ;main.c: 170:             display = snake(display);
   355  00FF08  5014               	movf	main@display^0,w,c
   356  00FF0A  ECDC  F07E         	call	_snake
   357  00FF0E  6E14               	movwf	main@display^0,c
   358  00FF10  EF3F  F07F         	goto	l1022
   359  00FF14  EF00  F000         	goto	start
   360  00FF18                     __end_of_main:
   361                           	callstack 0
   362                           
   363 ;; *************** function _snake *****************
   364 ;; Defined at:
   365 ;;		line 113 in file "main.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;  display         1    wreg     unsigned char 
   368 ;; Auto vars:     Size  Location     Type
   369 ;;  display         1   16[COMRAM] unsigned char 
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      unsigned char 
   372 ;; Registers used:
   373 ;;		wreg, status,2, status,0, cstack
   374 ;; Tracked objects:
   375 ;;		On entry : 0/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   383 ;;Total ram usage:        1 bytes
   384 ;; Hardware stack levels used: 1
   385 ;; Hardware stack levels required when called: 2
   386 ;; This function calls:
   387 ;;		___lwdiv
   388 ;;		_adc
   389 ;;		_better_delay
   390 ;; This function is called by:
   391 ;;		_main
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395                           	psect	text1
   396  00FDB8                     __ptext1:
   397                           	callstack 0
   398  00FDB8                     _snake:
   399                           	callstack 28
   400                           
   401                           ;incstack = 0
   402                           ;snake@display stored from wreg
   403  00FDB8  6E11               	movwf	snake@display^0,c
   404  00FDBA                     
   405                           ;main.c: 114:     if (display < 7) {
   406  00FDBA  0E07               	movlw	7
   407  00FDBC  6011               	cpfslt	snake@display^0,c
   408  00FDBE  EFE3  F07E         	goto	u371
   409  00FDC2  EFE5  F07E         	goto	u370
   410  00FDC6                     u371:
   411  00FDC6  EFE9  F07E         	goto	l996
   412  00FDCA                     u370:
   413  00FDCA                     
   414                           ;main.c: 115:   display = (display << 1) ^ 1;
   415  00FDCA  80D8               	bsf	status,0,c
   416  00FDCC  3611               	rlcf	snake@display^0,f,c
   417                           
   418                           ;main.c: 116:  } else {
   419  00FDCE  EF18  F07F         	goto	l1014
   420  00FDD2                     l996:
   421                           
   422                           ;main.c: 117:   if (direction == 1) {
   423  00FDD2  0415               	decf	_direction^0,w,c
   424  00FDD4  1016               	iorwf	(_direction+1)^0,w,c
   425  00FDD6  A4D8               	btfss	status,2,c
   426  00FDD8  EFF0  F07E         	goto	u381
   427  00FDDC  EFF2  F07E         	goto	u380
   428  00FDE0                     u381:
   429  00FDE0  EF09  F07F         	goto	l1006
   430  00FDE4                     u380:
   431  00FDE4                     
   432                           ;main.c: 118:             if (display == 224) {
   433  00FDE4  0EE0               	movlw	224
   434  00FDE6  1811               	xorwf	snake@display^0,w,c
   435  00FDE8  A4D8               	btfss	status,2,c
   436  00FDEA  EFF9  F07E         	goto	u391
   437  00FDEE  EFFB  F07E         	goto	u390
   438  00FDF2                     u391:
   439  00FDF2  EF04  F07F         	goto	l1004
   440  00FDF6                     u390:
   441  00FDF6                     
   442                           ;main.c: 119:     direction = 0;
   443  00FDF6  0E00               	movlw	0
   444  00FDF8  6E16               	movwf	(_direction+1)^0,c
   445  00FDFA  0E00               	movlw	0
   446  00FDFC  6E15               	movwf	_direction^0,c
   447  00FDFE                     l1002:
   448                           
   449                           ;main.c: 120:     display = display >> 1;
   450  00FDFE  90D8               	bcf	status,0,c
   451  00FE00  3011               	rrcf	snake@display^0,w,c
   452  00FE02  6E11               	movwf	snake@display^0,c
   453                           
   454                           ;main.c: 121:             } else {
   455  00FE04  EF18  F07F         	goto	l1014
   456  00FE08                     l1004:
   457                           
   458                           ;main.c: 122:     display = display << 1;
   459  00FE08  5011               	movf	snake@display^0,w,c
   460  00FE0A  2411               	addwf	snake@display^0,w,c
   461  00FE0C  6E11               	movwf	snake@display^0,c
   462  00FE0E  EF18  F07F         	goto	l1014
   463  00FE12                     l1006:
   464                           
   465                           ;main.c: 125:    if (display == 7) {
   466  00FE12  0E07               	movlw	7
   467  00FE14  1811               	xorwf	snake@display^0,w,c
   468  00FE16  A4D8               	btfss	status,2,c
   469  00FE18  EF10  F07F         	goto	u401
   470  00FE1C  EF12  F07F         	goto	u400
   471  00FE20                     u401:
   472  00FE20  EFFF  F07E         	goto	l1002
   473  00FE24                     u400:
   474  00FE24                     
   475                           ;main.c: 126:     direction = 1;
   476  00FE24  0E00               	movlw	0
   477  00FE26  6E16               	movwf	(_direction+1)^0,c
   478  00FE28  0E01               	movlw	1
   479  00FE2A  6E15               	movwf	_direction^0,c
   480  00FE2C  EF04  F07F         	goto	l1004
   481  00FE30                     l1014:
   482                           
   483                           ;main.c: 133:     better_delay(((unsigned int)adc(1)/10));
   484  00FE30  0E01               	movlw	1
   485  00FE32  EC94  F07E         	call	_adc
   486  00FE36  C001  F008         	movff	?_adc,___lwdiv@dividend
   487  00FE3A  C002  F009         	movff	?_adc+1,___lwdiv@dividend+1
   488  00FE3E  0E00               	movlw	0
   489  00FE40  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   490  00FE42  0E0A               	movlw	10
   491  00FE44  6E0A               	movwf	___lwdiv@divisor^0,c
   492  00FE46  EC5A  F07E         	call	___lwdiv	;wreg free
   493  00FE4A  C008  F00F         	movff	?___lwdiv,better_delay@value
   494  00FE4E  C009  F010         	movff	?___lwdiv+1,better_delay@value+1
   495  00FE52  EC8C  F07F         	call	_better_delay	;wreg free
   496  00FE56                     
   497                           ;main.c: 134:     return display;
   498  00FE56  5011               	movf	snake@display^0,w,c
   499  00FE58  0012               	return		;funcret
   500  00FE5A                     __end_of_snake:
   501                           	callstack 0
   502                           
   503 ;; *************** function _bin_up *****************
   504 ;; Defined at:
   505 ;;		line 108 in file "main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  display         1    wreg     unsigned char 
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  display         1   16[COMRAM] unsigned char 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      unsigned char 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;Total ram usage:        1 bytes
   524 ;; Hardware stack levels used: 1
   525 ;; Hardware stack levels required when called: 2
   526 ;; This function calls:
   527 ;;		___lwdiv
   528 ;;		_adc
   529 ;;		_better_delay
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text2
   536  00FC40                     __ptext2:
   537                           	callstack 0
   538  00FC40                     _bin_up:
   539                           	callstack 28
   540                           
   541                           ;incstack = 0
   542                           ;bin_up@display stored from wreg
   543  00FC40  6E11               	movwf	bin_up@display^0,c
   544  00FC42                     
   545                           ;main.c: 109:     better_delay(((unsigned int)adc(1)/10));
   546  00FC42  0E01               	movlw	1
   547  00FC44  EC94  F07E         	call	_adc
   548  00FC48  C001  F008         	movff	?_adc,___lwdiv@dividend
   549  00FC4C  C002  F009         	movff	?_adc+1,___lwdiv@dividend+1
   550  00FC50  0E00               	movlw	0
   551  00FC52  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
   552  00FC54  0E0A               	movlw	10
   553  00FC56  6E0A               	movwf	___lwdiv@divisor^0,c
   554  00FC58  EC5A  F07E         	call	___lwdiv	;wreg free
   555  00FC5C  C008  F00F         	movff	?___lwdiv,better_delay@value
   556  00FC60  C009  F010         	movff	?___lwdiv+1,better_delay@value+1
   557  00FC64  EC8C  F07F         	call	_better_delay	;wreg free
   558  00FC68                     
   559                           ;main.c: 110:     return (display + 1);
   560  00FC68  2811               	incf	bin_up@display^0,w,c
   561  00FC6A  0012               	return		;funcret
   562  00FC6C                     __end_of_bin_up:
   563                           	callstack 0
   564                           
   565 ;; *************** function _better_delay *****************
   566 ;; Defined at:
   567 ;;		line 94 in file "main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;  value           2   14[COMRAM] unsigned int 
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, status,2, status,0, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;Total ram usage:        2 bytes
   586 ;; Hardware stack levels used: 1
   587 ;; Hardware stack levels required when called: 1
   588 ;; This function calls:
   589 ;;		_delay
   590 ;; This function is called by:
   591 ;;		_bin_up
   592 ;;		_snake
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           	psect	text3
   597  00FF18                     __ptext3:
   598                           	callstack 0
   599  00FF18                     _better_delay:
   600                           	callstack 28
   601  00FF18                     
   602                           ;main.c: 95:     if (value < 51) {
   603  00FF18  5010               	movf	(better_delay@value+1)^0,w,c
   604  00FF1A  E107               	bnz	u271
   605  00FF1C  0E33               	movlw	51
   606  00FF1E  5C0F               	subwf	better_delay@value^0,w,c
   607  00FF20  B0D8               	btfsc	status,0,c
   608  00FF22  EF95  F07F         	goto	u271
   609  00FF26  EF97  F07F         	goto	u270
   610  00FF2A                     u271:
   611  00FF2A  EF9F  F07F         	goto	l944
   612  00FF2E                     u270:
   613  00FF2E                     
   614                           ;main.c: 96:         delay(0);
   615  00FF2E  0E00               	movlw	0
   616  00FF30  6E02               	movwf	(delay@ms+1)^0,c
   617  00FF32  0E00               	movlw	0
   618  00FF34  6E01               	movwf	delay@ms^0,c
   619  00FF36  EC36  F07E         	call	_delay	;wreg free
   620                           
   621                           ;main.c: 97:     } else if (value >= 55 && value < 102) {
   622  00FF3A  EFFF  F07F         	goto	l60
   623  00FF3E                     l944:
   624  00FF3E  5010               	movf	(better_delay@value+1)^0,w,c
   625  00FF40  E109               	bnz	u280
   626  00FF42  0E37               	movlw	55
   627  00FF44  5C0F               	subwf	better_delay@value^0,w,c
   628  00FF46  A0D8               	btfss	status,0,c
   629  00FF48  EFA8  F07F         	goto	u281
   630  00FF4C  EFAA  F07F         	goto	u280
   631  00FF50                     u281:
   632  00FF50  EFBD  F07F         	goto	l950
   633  00FF54                     u280:
   634  00FF54  5010               	movf	(better_delay@value+1)^0,w,c
   635  00FF56  E107               	bnz	u291
   636  00FF58  0E66               	movlw	102
   637  00FF5A  5C0F               	subwf	better_delay@value^0,w,c
   638  00FF5C  B0D8               	btfsc	status,0,c
   639  00FF5E  EFB3  F07F         	goto	u291
   640  00FF62  EFB5  F07F         	goto	u290
   641  00FF66                     u291:
   642  00FF66  EFBD  F07F         	goto	l950
   643  00FF6A                     u290:
   644  00FF6A                     
   645                           ;main.c: 98:         delay(200);
   646  00FF6A  0E00               	movlw	0
   647  00FF6C  6E02               	movwf	(delay@ms+1)^0,c
   648  00FF6E  0EC8               	movlw	200
   649  00FF70  6E01               	movwf	delay@ms^0,c
   650  00FF72  EC36  F07E         	call	_delay	;wreg free
   651                           
   652                           ;main.c: 99:     } else if (value >= 102 && value < 153) {
   653  00FF76  EFFF  F07F         	goto	l60
   654  00FF7A                     l950:
   655  00FF7A  5010               	movf	(better_delay@value+1)^0,w,c
   656  00FF7C  E109               	bnz	u300
   657  00FF7E  0E66               	movlw	102
   658  00FF80  5C0F               	subwf	better_delay@value^0,w,c
   659  00FF82  A0D8               	btfss	status,0,c
   660  00FF84  EFC6  F07F         	goto	u301
   661  00FF88  EFC8  F07F         	goto	u300
   662  00FF8C                     u301:
   663  00FF8C  EFDB  F07F         	goto	l956
   664  00FF90                     u300:
   665  00FF90  5010               	movf	(better_delay@value+1)^0,w,c
   666  00FF92  E107               	bnz	u311
   667  00FF94  0E99               	movlw	153
   668  00FF96  5C0F               	subwf	better_delay@value^0,w,c
   669  00FF98  B0D8               	btfsc	status,0,c
   670  00FF9A  EFD1  F07F         	goto	u311
   671  00FF9E  EFD3  F07F         	goto	u310
   672  00FFA2                     u311:
   673  00FFA2  EFDB  F07F         	goto	l956
   674  00FFA6                     u310:
   675  00FFA6                     
   676                           ;main.c: 100:         delay(400);
   677  00FFA6  0E01               	movlw	1
   678  00FFA8  6E02               	movwf	(delay@ms+1)^0,c
   679  00FFAA  0E90               	movlw	144
   680  00FFAC  6E01               	movwf	delay@ms^0,c
   681  00FFAE  EC36  F07E         	call	_delay	;wreg free
   682                           
   683                           ;main.c: 101:     } else if (value >= 153 && value < 204) {
   684  00FFB2  EFFF  F07F         	goto	l60
   685  00FFB6                     l956:
   686  00FFB6  5010               	movf	(better_delay@value+1)^0,w,c
   687  00FFB8  E109               	bnz	u320
   688  00FFBA  0E99               	movlw	153
   689  00FFBC  5C0F               	subwf	better_delay@value^0,w,c
   690  00FFBE  A0D8               	btfss	status,0,c
   691  00FFC0  EFE4  F07F         	goto	u321
   692  00FFC4  EFE6  F07F         	goto	u320
   693  00FFC8                     u321:
   694  00FFC8  EFF9  F07F         	goto	l962
   695  00FFCC                     u320:
   696  00FFCC  5010               	movf	(better_delay@value+1)^0,w,c
   697  00FFCE  E107               	bnz	u331
   698  00FFD0  0ECC               	movlw	204
   699  00FFD2  5C0F               	subwf	better_delay@value^0,w,c
   700  00FFD4  B0D8               	btfsc	status,0,c
   701  00FFD6  EFEF  F07F         	goto	u331
   702  00FFDA  EFF1  F07F         	goto	u330
   703  00FFDE                     u331:
   704  00FFDE  EFF9  F07F         	goto	l962
   705  00FFE2                     u330:
   706  00FFE2                     
   707                           ;main.c: 102:         delay(800);
   708  00FFE2  0E03               	movlw	3
   709  00FFE4  6E02               	movwf	(delay@ms+1)^0,c
   710  00FFE6  0E20               	movlw	32
   711  00FFE8  6E01               	movwf	delay@ms^0,c
   712  00FFEA  EC36  F07E         	call	_delay	;wreg free
   713                           
   714                           ;main.c: 103:     } else {
   715  00FFEE  EFFF  F07F         	goto	l60
   716  00FFF2                     l962:
   717                           
   718                           ;main.c: 104:         delay(1600);
   719  00FFF2  0E06               	movlw	6
   720  00FFF4  6E02               	movwf	(delay@ms+1)^0,c
   721  00FFF6  0E40               	movlw	64
   722  00FFF8  6E01               	movwf	delay@ms^0,c
   723  00FFFA  EC36  F07E         	call	_delay	;wreg free
   724  00FFFE                     l60:
   725  00FFFE  0012               	return		;funcret
   726  010000                     __end_of_better_delay:
   727                           	callstack 0
   728                           
   729 ;; *************** function _delay *****************
   730 ;; Defined at:
   731 ;;		line 60 in file "main.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  ms              2    0[COMRAM] unsigned int 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  i               2    2[COMRAM] unsigned int 
   736 ;;  j               1    4[COMRAM] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;Total ram usage:        5 bytes
   751 ;; Hardware stack levels used: 1
   752 ;; This function calls:
   753 ;;		Nothing
   754 ;; This function is called by:
   755 ;;		_better_delay
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text4
   761  00FC6C                     __ptext4:
   762                           	callstack 0
   763  00FC6C                     _delay:
   764                           	callstack 28
   765  00FC6C                     
   766                           ;main.c: 60: void delay(unsigned int ms);main.c: 61: {;main.c: 62:     unsigned int i;;m
      +                          ain.c: 63:     unsigned char j;;main.c: 65:  for (i =0; i< ms; i++)
   767  00FC6C  0E00               	movlw	0
   768  00FC6E  6E04               	movwf	(delay@i+1)^0,c
   769  00FC70  0E00               	movlw	0
   770  00FC72  6E03               	movwf	delay@i^0,c
   771  00FC74  EF4E  F07E         	goto	l918
   772  00FC78                     l906:
   773                           
   774                           ;main.c: 66:  {;main.c: 68:   for (j =0 ; j < 200; j++)
   775  00FC78  0E00               	movlw	0
   776  00FC7A  6E05               	movwf	delay@j^0,c
   777  00FC7C                     l35:
   778                           
   779                           ;main.c: 69:    {;main.c: 70:       __nop();
   780  00FC7C  F000               	nop	
   781                           
   782                           ;main.c: 71:       __nop();
   783  00FC7E  F000               	nop	
   784                           
   785                           ;main.c: 72:       __nop();
   786  00FC80  F000               	nop	
   787                           
   788                           ;main.c: 73:       __nop();
   789  00FC82  F000               	nop	
   790                           
   791                           ;main.c: 74:       __nop();
   792  00FC84  F000               	nop	
   793  00FC86                     
   794                           ;main.c: 75:    }
   795  00FC86  2A05               	incf	delay@j^0,f,c
   796  00FC88  0EC7               	movlw	199
   797  00FC8A  6405               	cpfsgt	delay@j^0,c
   798  00FC8C  EF4A  F07E         	goto	u231
   799  00FC90  EF4C  F07E         	goto	u230
   800  00FC94                     u231:
   801  00FC94  EF3E  F07E         	goto	l35
   802  00FC98                     u230:
   803  00FC98                     
   804                           ;main.c: 76:  }
   805  00FC98  4A03               	infsnz	delay@i^0,f,c
   806  00FC9A  2A04               	incf	(delay@i+1)^0,f,c
   807  00FC9C                     l918:
   808  00FC9C  5001               	movf	delay@ms^0,w,c
   809  00FC9E  5C03               	subwf	delay@i^0,w,c
   810  00FCA0  5002               	movf	(delay@ms+1)^0,w,c
   811  00FCA2  5804               	subwfb	(delay@i+1)^0,w,c
   812  00FCA4  A0D8               	btfss	status,0,c
   813  00FCA6  EF57  F07E         	goto	u241
   814  00FCAA  EF59  F07E         	goto	u240
   815  00FCAE                     u241:
   816  00FCAE  EF3C  F07E         	goto	l906
   817  00FCB2                     u240:
   818  00FCB2  0012               	return		;funcret
   819  00FCB4                     __end_of_delay:
   820                           	callstack 0
   821                           
   822 ;; *************** function _adc *****************
   823 ;; Defined at:
   824 ;;		line 79 in file "main.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  kanal           1    wreg     unsigned char 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  kanal           1    6[COMRAM] unsigned char 
   829 ;; Return value:  Size  Location     Type
   830 ;;                  2    0[COMRAM] unsigned int 
   831 ;; Registers used:
   832 ;;		wreg, status,2, status,0
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;Total ram usage:        7 bytes
   843 ;; Hardware stack levels used: 1
   844 ;; This function calls:
   845 ;;		Nothing
   846 ;; This function is called by:
   847 ;;		_bin_up
   848 ;;		_snake
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text5
   853  00FD28                     __ptext5:
   854                           	callstack 0
   855  00FD28                     _adc:
   856                           	callstack 29
   857                           
   858                           ;incstack = 0
   859                           ;adc@kanal stored from wreg
   860  00FD28  6E07               	movwf	adc@kanal^0,c
   861  00FD2A                     
   862                           ;main.c: 79: unsigned int adc(unsigned char kanal);main.c: 80: {;main.c: 81:     switch(
      +                          kanal)
   863  00FD2A  EFA3  F07E         	goto	l930
   864  00FD2E                     l922:
   865  00FD2E  0E01               	movlw	1
   866  00FD30  6EC2               	movwf	194,c	;volatile
   867  00FD32  EFBC  F07E         	goto	l43
   868  00FD36                     l924:
   869  00FD36  0E05               	movlw	5
   870  00FD38  6EC2               	movwf	194,c	;volatile
   871  00FD3A  EFBC  F07E         	goto	l43
   872  00FD3E                     l926:
   873  00FD3E  0E09               	movlw	9
   874  00FD40  6EC2               	movwf	194,c	;volatile
   875  00FD42  EFBC  F07E         	goto	l43
   876  00FD46                     l930:
   877  00FD46  5007               	movf	adc@kanal^0,w,c
   878  00FD48  6E03               	movwf	??_adc^0,c
   879  00FD4A  6A04               	clrf	(??_adc+1)^0,c
   880                           
   881                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   882                           ; Switch size 1, requested type "simple"
   883                           ; Number of cases is 1, Range of values is 0 to 0
   884                           ; switch strategies available:
   885                           ; Name         Instructions Cycles
   886                           ; simple_byte            4     3 (average)
   887                           ;	Chosen strategy is simple_byte
   888  00FD4C  5004               	movf	(??_adc+1)^0,w,c
   889  00FD4E  0A00               	xorlw	0	; case 0
   890  00FD50  B4D8               	btfsc	status,2,c
   891  00FD52  EFAD  F07E         	goto	l1044
   892  00FD56  EFBC  F07E         	goto	l43
   893  00FD5A                     l1044:
   894                           
   895                           ; Switch size 1, requested type "simple"
   896                           ; Number of cases is 3, Range of values is 0 to 2
   897                           ; switch strategies available:
   898                           ; Name         Instructions Cycles
   899                           ; simple_byte           10     6 (average)
   900                           ;	Chosen strategy is simple_byte
   901  00FD5A  5003               	movf	??_adc^0,w,c
   902  00FD5C  0A00               	xorlw	0	; case 0
   903  00FD5E  B4D8               	btfsc	status,2,c
   904  00FD60  EF97  F07E         	goto	l922
   905  00FD64  0A01               	xorlw	1	; case 1
   906  00FD66  B4D8               	btfsc	status,2,c
   907  00FD68  EF9B  F07E         	goto	l924
   908  00FD6C  0A03               	xorlw	3	; case 2
   909  00FD6E  B4D8               	btfsc	status,2,c
   910  00FD70  EF9F  F07E         	goto	l926
   911  00FD74  EFBC  F07E         	goto	l43
   912  00FD78                     l43:
   913                           
   914                           ;main.c: 88:     ADCON0bits.GO=1;
   915  00FD78  82C2               	bsf	194,1,c	;volatile
   916  00FD7A                     l46:
   917  00FD7A  B2C2               	btfsc	194,1,c	;volatile
   918  00FD7C  EFC2  F07E         	goto	u251
   919  00FD80  EFC4  F07E         	goto	u250
   920  00FD84                     u251:
   921  00FD84  EFBD  F07E         	goto	l46
   922  00FD88                     u250:
   923  00FD88                     
   924                           ;main.c: 91:    return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
   925  00FD88  CFC3 F003          	movff	4035,??_adc	;volatile
   926  00FD8C  0E06               	movlw	6
   927  00FD8E  6E04               	movwf	(??_adc+1)^0,c
   928  00FD90                     u265:
   929  00FD90  90D8               	bcf	status,0,c
   930  00FD92  3203               	rrcf	??_adc^0,f,c
   931  00FD94  2E04               	decfsz	(??_adc+1)^0,f,c
   932  00FD96  EFC8  F07E         	goto	u265
   933  00FD9A  5003               	movf	??_adc^0,w,c
   934  00FD9C  CFC4 F005          	movff	4036,??_adc+2	;volatile
   935  00FDA0  6A06               	clrf	(??_adc+3)^0,c
   936  00FDA2  90D8               	bcf	status,0,c
   937  00FDA4  3605               	rlcf	(??_adc+2)^0,f,c
   938  00FDA6  3606               	rlcf	(??_adc+3)^0,f,c
   939  00FDA8  90D8               	bcf	status,0,c
   940  00FDAA  3605               	rlcf	(??_adc+2)^0,f,c
   941  00FDAC  3606               	rlcf	(??_adc+3)^0,f,c
   942  00FDAE  1005               	iorwf	(??_adc+2)^0,w,c
   943  00FDB0  6E01               	movwf	?_adc^0,c
   944  00FDB2  5006               	movf	(??_adc+3)^0,w,c
   945  00FDB4  6E02               	movwf	(?_adc+1)^0,c
   946  00FDB6  0012               	return		;funcret
   947  00FDB8                     __end_of_adc:
   948                           	callstack 0
   949                           
   950 ;; *************** function ___lwdiv *****************
   951 ;; Defined at:
   952 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\lwdiv.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  dividend        2    7[COMRAM] unsigned int 
   955 ;;  divisor         2    9[COMRAM] unsigned int 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  quotient        2   11[COMRAM] unsigned int 
   958 ;;  counter         1   13[COMRAM] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  2    7[COMRAM] unsigned int 
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   968 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;Total ram usage:        7 bytes
   973 ;; Hardware stack levels used: 1
   974 ;; This function calls:
   975 ;;		Nothing
   976 ;; This function is called by:
   977 ;;		_bin_up
   978 ;;		_snake
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text6
   983  00FCB4                     __ptext6:
   984                           	callstack 0
   985  00FCB4                     ___lwdiv:
   986                           	callstack 29
   987  00FCB4  0E00               	movlw	0
   988  00FCB6  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
   989  00FCB8  0E00               	movlw	0
   990  00FCBA  6E0C               	movwf	___lwdiv@quotient^0,c
   991  00FCBC  500A               	movf	___lwdiv@divisor^0,w,c
   992  00FCBE  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
   993  00FCC0  B4D8               	btfsc	status,2,c
   994  00FCC2  EF65  F07E         	goto	u341
   995  00FCC6  EF67  F07E         	goto	u340
   996  00FCCA                     u341:
   997  00FCCA  EF8F  F07E         	goto	l582
   998  00FCCE                     u340:
   999  00FCCE  0E01               	movlw	1
  1000  00FCD0  6E0E               	movwf	___lwdiv@counter^0,c
  1001  00FCD2  EF6F  F07E         	goto	l972
  1002  00FCD6                     l970:
  1003  00FCD6  90D8               	bcf	status,0,c
  1004  00FCD8  360A               	rlcf	___lwdiv@divisor^0,f,c
  1005  00FCDA  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1006  00FCDC  2A0E               	incf	___lwdiv@counter^0,f,c
  1007  00FCDE                     l972:
  1008  00FCDE  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  1009  00FCE0  EF74  F07E         	goto	u351
  1010  00FCE4  EF76  F07E         	goto	u350
  1011  00FCE8                     u351:
  1012  00FCE8  EF6B  F07E         	goto	l970
  1013  00FCEC                     u350:
  1014  00FCEC                     l974:
  1015  00FCEC  90D8               	bcf	status,0,c
  1016  00FCEE  360C               	rlcf	___lwdiv@quotient^0,f,c
  1017  00FCF0  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1018  00FCF2  500A               	movf	___lwdiv@divisor^0,w,c
  1019  00FCF4  5C08               	subwf	___lwdiv@dividend^0,w,c
  1020  00FCF6  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  1021  00FCF8  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1022  00FCFA  A0D8               	btfss	status,0,c
  1023  00FCFC  EF82  F07E         	goto	u361
  1024  00FD00  EF84  F07E         	goto	u360
  1025  00FD04                     u361:
  1026  00FD04  EF89  F07E         	goto	l982
  1027  00FD08                     u360:
  1028  00FD08  500A               	movf	___lwdiv@divisor^0,w,c
  1029  00FD0A  5E08               	subwf	___lwdiv@dividend^0,f,c
  1030  00FD0C  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  1031  00FD0E  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1032  00FD10  800C               	bsf	___lwdiv@quotient^0,0,c
  1033  00FD12                     l982:
  1034  00FD12  90D8               	bcf	status,0,c
  1035  00FD14  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1036  00FD16  320A               	rrcf	___lwdiv@divisor^0,f,c
  1037  00FD18  2E0E               	decfsz	___lwdiv@counter^0,f,c
  1038  00FD1A  EF76  F07E         	goto	l974
  1039  00FD1E                     l582:
  1040  00FD1E  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  1041  00FD22  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1042  00FD26  0012               	return		;funcret
  1043  00FD28                     __end_of___lwdiv:
  1044                           	callstack 0
  1045  0000                     
  1046                           	psect	rparam
  1047  0000                     
  1048                           	psect	idloc
  1049                           
  1050                           ;Config register IDLOC0 @ 0x200000
  1051                           ;	unspecified, using default values
  1052  200000                     	org	2097152
  1053  200000  FF                 	db	255
  1054                           
  1055                           ;Config register IDLOC1 @ 0x200001
  1056                           ;	unspecified, using default values
  1057  200001                     	org	2097153
  1058  200001  FF                 	db	255
  1059                           
  1060                           ;Config register IDLOC2 @ 0x200002
  1061                           ;	unspecified, using default values
  1062  200002                     	org	2097154
  1063  200002  FF                 	db	255
  1064                           
  1065                           ;Config register IDLOC3 @ 0x200003
  1066                           ;	unspecified, using default values
  1067  200003                     	org	2097155
  1068  200003  FF                 	db	255
  1069                           
  1070                           ;Config register IDLOC4 @ 0x200004
  1071                           ;	unspecified, using default values
  1072  200004                     	org	2097156
  1073  200004  FF                 	db	255
  1074                           
  1075                           ;Config register IDLOC5 @ 0x200005
  1076                           ;	unspecified, using default values
  1077  200005                     	org	2097157
  1078  200005  FF                 	db	255
  1079                           
  1080                           ;Config register IDLOC6 @ 0x200006
  1081                           ;	unspecified, using default values
  1082  200006                     	org	2097158
  1083  200006  FF                 	db	255
  1084                           
  1085                           ;Config register IDLOC7 @ 0x200007
  1086                           ;	unspecified, using default values
  1087  200007                     	org	2097159
  1088  200007  FF                 	db	255
  1089                           
  1090                           	psect	config
  1091                           
  1092                           ; Padding undefined space
  1093  300000                     	org	3145728
  1094  300000  FF                 	db	255
  1095                           
  1096                           ;Config register CONFIG1H @ 0x300001
  1097                           ;	Oscillator Selection bits
  1098                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  1099                           ;	Fail-Safe Clock Monitor Enable bit
  1100                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1101                           ;	Internal/External Oscillator Switchover bit
  1102                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1103  300001                     	org	3145729
  1104  300001  06                 	db	6
  1105                           
  1106                           ;Config register CONFIG2L @ 0x300002
  1107                           ;	Power-up Timer Enable bit
  1108                           ;	PWRT = ON, PWRT enabled
  1109                           ;	Brown-out Reset Enable bits
  1110                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1111                           ;	Brown Out Reset Voltage bits
  1112                           ;	BORV = 3, Minimum setting
  1113  300002                     	org	3145730
  1114  300002  18                 	db	24
  1115                           
  1116                           ;Config register CONFIG2H @ 0x300003
  1117                           ;	Watchdog Timer Enable bit
  1118                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1119                           ;	Watchdog Timer Postscale Select bits
  1120                           ;	WDTPS = 32768, 1:32768
  1121  300003                     	org	3145731
  1122  300003  1E                 	db	30
  1123                           
  1124                           ; Padding undefined space
  1125  300004                     	org	3145732
  1126  300004  FF                 	db	255
  1127                           
  1128                           ;Config register CONFIG3H @ 0x300005
  1129                           ;	CCP2 MUX bit
  1130                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1131                           ;	PORTB A/D Enable bit
  1132                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1133                           ;	Low-Power Timer1 Oscillator Enable bit
  1134                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1135                           ;	MCLR Pin Enable bit
  1136                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1137  300005                     	org	3145733
  1138  300005  81                 	db	129
  1139                           
  1140                           ;Config register CONFIG4L @ 0x300006
  1141                           ;	Stack Full/Underflow Reset Enable bit
  1142                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1143                           ;	Single-Supply ICSP Enable bit
  1144                           ;	LVP = OFF, Single-Supply ICSP disabled
  1145                           ;	Extended Instruction Set Enable bit
  1146                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1147                           ;	Background Debugger Enable bit
  1148                           ;	DEBUG = 0x1, unprogrammed default
  1149  300006                     	org	3145734
  1150  300006  80                 	db	128
  1151                           
  1152                           ; Padding undefined space
  1153  300007                     	org	3145735
  1154  300007  FF                 	db	255
  1155                           
  1156                           ;Config register CONFIG5L @ 0x300008
  1157                           ;	Code Protection bit
  1158                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1159                           ;	Code Protection bit
  1160                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1161                           ;	Code Protection bit
  1162                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1163                           ;	Code Protection bit
  1164                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1165  300008                     	org	3145736
  1166  300008  0F                 	db	15
  1167                           
  1168                           ;Config register CONFIG5H @ 0x300009
  1169                           ;	Boot Block Code Protection bit
  1170                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1171                           ;	Data EEPROM Code Protection bit
  1172                           ;	CPD = OFF, Data EEPROM not code-protected
  1173  300009                     	org	3145737
  1174  300009  C0                 	db	192
  1175                           
  1176                           ;Config register CONFIG6L @ 0x30000A
  1177                           ;	Write Protection bit
  1178                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1179                           ;	Write Protection bit
  1180                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1181                           ;	Write Protection bit
  1182                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1183                           ;	Write Protection bit
  1184                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1185  30000A                     	org	3145738
  1186  30000A  0F                 	db	15
  1187                           
  1188                           ;Config register CONFIG6H @ 0x30000B
  1189                           ;	Configuration Register Write Protection bit
  1190                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1191                           ;	Boot Block Write Protection bit
  1192                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1193                           ;	Data EEPROM Write Protection bit
  1194                           ;	WRTD = OFF, Data EEPROM not write-protected
  1195  30000B                     	org	3145739
  1196  30000B  E0                 	db	224
  1197                           
  1198                           ;Config register CONFIG7L @ 0x30000C
  1199                           ;	Table Read Protection bit
  1200                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1201                           ;	Table Read Protection bit
  1202                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1203                           ;	Table Read Protection bit
  1204                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1205                           ;	Table Read Protection bit
  1206                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1207  30000C                     	org	3145740
  1208  30000C  0F                 	db	15
  1209                           
  1210                           ;Config register CONFIG7H @ 0x30000D
  1211                           ;	Boot Block Table Read Protection bit
  1212                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1213  30000D                     	org	3145741
  1214  30000D  40                 	db	64
  1215                           tosu	equ	0xFFF
  1216                           tosh	equ	0xFFE
  1217                           tosl	equ	0xFFD
  1218                           stkptr	equ	0xFFC
  1219                           pclatu	equ	0xFFB
  1220                           pclath	equ	0xFFA
  1221                           pcl	equ	0xFF9
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           prodh	equ	0xFF4
  1227                           prodl	equ	0xFF3
  1228                           indf0	equ	0xFEF
  1229                           postinc0	equ	0xFEE
  1230                           postdec0	equ	0xFED
  1231                           preinc0	equ	0xFEC
  1232                           plusw0	equ	0xFEB
  1233                           fsr0h	equ	0xFEA
  1234                           fsr0l	equ	0xFE9
  1235                           wreg	equ	0xFE8
  1236                           indf1	equ	0xFE7
  1237                           postinc1	equ	0xFE6
  1238                           postdec1	equ	0xFE5
  1239                           preinc1	equ	0xFE4
  1240                           plusw1	equ	0xFE3
  1241                           fsr1h	equ	0xFE2
  1242                           fsr1l	equ	0xFE1
  1243                           bsr	equ	0xFE0
  1244                           indf2	equ	0xFDF
  1245                           postinc2	equ	0xFDE
  1246                           postdec2	equ	0xFDD
  1247                           preinc2	equ	0xFDC
  1248                           plusw2	equ	0xFDB
  1249                           fsr2h	equ	0xFDA
  1250                           fsr2l	equ	0xFD9
  1251                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     20      22
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_bin_up
    _main->_snake
    _snake->_better_delay
    _bin_up->_better_delay
    _better_delay->___lwdiv
    ___lwdiv->_adc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3576
                                             17 COMRAM     3     3      0
                             _bin_up
                              _delay
                              _snake
 ---------------------------------------------------------------------------------
 (1) _snake                                                1     1      0    1545
                                             16 COMRAM     1     1      0
                            ___lwdiv
                                _adc
                       _better_delay
 ---------------------------------------------------------------------------------
 (1) _bin_up                                               1     1      0    1364
                                             16 COMRAM     1     1      0
                            ___lwdiv
                                _adc
                       _better_delay
 ---------------------------------------------------------------------------------
 (2) _better_delay                                         2     0      2     854
                                             14 COMRAM     2     0      2
                            ___lwdiv (ARG)
                                _adc (ARG)
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     548
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _adc                                                  7     5      2      22
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              7 COMRAM     7     3      4
                                _adc (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bin_up
     ___lwdiv
       _adc (ARG)
     _adc
     _better_delay
       ___lwdiv (ARG)
       _adc (ARG)
       _delay (ARG)
   _delay
   _snake
     ___lwdiv
     _adc
     _better_delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     14      16       1       17.3%
BITBIGSFRhh         3B      0       0      36        0.0%
BITBIGSFRlh         29      0       0      37        0.0%
BITBIGSFRllh         E      0       0      38        0.0%
BITBIGSFRlllh        1      0       0      39        0.0%
BITBIGSFRllll        1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      16      41        0.0%
DATA                 0      0      16       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Apr 12 11:10:34 2022

                     l43 FD78                       l35 FC7C                       l60 FFFE  
                     l46 FD7A                       l38 FCB2                       l63 FC6A  
                     l80 FEB4                       l49 FDB6                       l74 FE58  
                    l582 FD1E                      l920 FD2A                      l912 FC86  
                    l904 FC6C                      l922 FD2E                      l930 FD46  
                    l914 FC88                      l906 FC78                      l932 FD88  
                    l924 FD36                      l916 FC98                      l940 FF18  
                    l589 FD26                      l926 FD3E                      l918 FC9C  
                    l950 FF7A                      l942 FF2E                      l960 FFE2  
                    l952 FF90                      l944 FF3E                      l970 FCD6  
                    l962 FFF2                      l954 FFA6                      l946 FF54  
                    l980 FD10                      l972 FCDE                      l964 FCB4  
                    l956 FFB6                      l948 FF6A                      l982 FD12  
                    l974 FCEC                      l966 FCBC                      l958 FFCC  
                    l984 FD18                      l976 FCF2                      l968 FCCE  
                    l992 FDBA                      l978 FD08                      l986 FC42  
                    l994 FDCA                      l988 FC68                      l996 FDD2  
                    l998 FDE4                      u300 FF90                      u301 FF8C  
                    u230 FC98                      u310 FFA6                      u231 FC94  
                    u311 FFA2                      u240 FCB2                      u320 FFCC  
                    u400 FE24                      u241 FCAE                      u321 FFC8  
                    u401 FE20                      u250 FD88                      u330 FFE2  
                    u410 FEA4                      u251 FD84                      u331 FFDE  
                    u411 FEA0                      u340 FCCE                      u420 FEC2  
                    u341 FCCA                      u421 FEBE                      u350 FCEC  
                    u270 FF2E                      u430 FEE8                      u351 FCE8  
                    u271 FF2A                      u431 FEE4                      u360 FD08  
                    u280 FF54                      u440 FF08                      u361 FD04  
                    u265 FD90                      u281 FF50                      u441 FF04  
                    u290 FF6A                      u370 FDCA                      u291 FF66  
                    u371 FDC6                      u380 FDE4                      u381 FDE0  
                    u390 FDF6                      u391 FDF2                      _adc FD28  
                   ?_adc 0001                     l1000 FDF6                     l1002 FDFE  
                   l1004 FE08                     l1020 FE5A                     l1006 FE12  
                   l1014 FE30                     l1030 FEC2                     l1022 FE7E  
                   l1016 FE56                     l1008 FE24                     l1032 FED6  
                   l1024 FE8A              main@display 0014                     l1034 FEE8  
                   l1026 FE96                     l1044 FD5A                     l1036 FEF4  
                   l1028 FEA4                     l1038 FF08                     _main FE5A  
      better_delay@value 000F                     start 0000             ___param_bank 000000  
                  ??_adc 0003                    ?_main 0001          __end_of___lwdiv FD28  
                  _PORTD 000F83                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
                  _delay FC6C                    _snake FDB8                    tablat 000FF5  
                  status 000FD8          __initialization FC1E     __end_of_better_delay 0000  
           __end_of_main FF18                   ??_main 0012            __activetblptr 000002  
                 ?_delay 0001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 ?_snake 0001                   _bin_up FC40                ??___lwdiv 000C  
                 delay@i 0003                   delay@j 0005                   isa$std 000001  
           __pdataCOMRAM 0015                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization FC36  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_delay FCB4  
          __end_of_snake FE5A                  ??_delay 0003                  ??_snake 0011  
                ?_bin_up 0001             _better_delay FF18                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv FCB4                  __pcinit FC1E  
                __ramtop 1000                  __ptext0 FE5A                  __ptext1 FDB8  
                __ptext2 FC40                  __ptext3 FF18                  __ptext4 FC6C  
                __ptext5 FD28                  __ptext6 FCB4                  delay@ms 0001  
   end_of_initialization FC36            __Lmediumconst 0000                _PORTBbits 000F81  
          bin_up@display 0011           __end_of_bin_up FC6C            __pidataCOMRAM FC1C  
    start_initialization FC1E              __end_of_adc FDB8                 ??_bin_up 0011  
       ___lwdiv@dividend 0008                 ?___lwdiv 0008                _direction 0015  
       ___lwdiv@quotient 000C               _ADCON0bits 000FC2                 __Hrparam 0000  
               __Lrparam 0000                 adc@kanal 0007          ___lwdiv@divisor 000A  
        ___lwdiv@counter 000E             snake@display 0011                 isa$xinst 000000  
               main@task 0012            ?_better_delay 000F           ??_better_delay 0011  
